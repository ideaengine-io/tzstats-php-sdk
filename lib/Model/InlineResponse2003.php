<?php
/**
 * InlineResponse2003
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TZstats
 *
 * API for TZstats.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tezos@whafor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2003 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2003 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'address_type' => 'string',
        'delegate' => 'string',
        'pubkey' => 'string',
        'first_in' => 'float',
        'first_out' => 'float',
        'last_in' => 'float',
        'last_out' => 'float',
        'first_seen' => 'float',
        'last_seen' => 'float',
        'delegate_since' => 'float',
        'first_in_time' => 'string',
        'first_out_time' => 'string',
        'last_in_time' => 'string',
        'last_out_time' => 'string',
        'first_seen_time' => 'string',
        'last_seen_time' => 'string',
        'delegate_since_time' => 'string',
        'total_received' => 'float',
        'total_sent' => 'float',
        'total_burned' => 'float',
        'total_fees_paid' => 'float',
        'total_rewards_earned' => 'float',
        'total_fees_earned' => 'float',
        'total_lost' => 'float',
        'frozen_deposits' => 'float',
        'frozen_rewards' => 'float',
        'frozen_fees' => 'float',
        'spendable_balance' => 'float',
        'total_balance' => 'float',
        'delegated_balance' => 'float',
        'total_delegations' => 'float',
        'active_delegations' => 'float',
        'is_funded' => 'bool',
        'is_activated' => 'bool',
        'is_delegated' => 'bool',
        'is_revealed' => 'bool',
        'is_delegate' => 'bool',
        'is_active_delegate' => 'bool',
        'is_contract' => 'bool',
        'blocks_baked' => 'float',
        'blocks_missed' => 'float',
        'blocks_stolen' => 'float',
        'blocks_endorsed' => 'float',
        'slots_endorsed' => 'float',
        'slots_missed' => 'float',
        'n_ops' => 'float',
        'n_ops_failed' => 'float',
        'n_tx' => 'float',
        'n_delegation' => 'float',
        'n_origination' => 'float',
        'n_proposal' => 'float',
        'n_ballot' => 'float',
        'token_gen_min' => 'float',
        'token_gen_max' => 'float',
        'grace_period' => 'float',
        'staking_balance' => 'float',
        'staking_capacity' => 'float',
        'rolls' => 'float',
        'last_bake_height' => 'float',
        'last_bake_block' => 'string',
        'last_bake_time' => 'string',
        'last_endorse_height' => 'float',
        'last_endorse_block' => 'string',
        'last_endorse_time' => 'string',
        'next_bake_height' => 'float',
        'next_bake_priority' => 'float',
        'next_bake_time' => 'string',
        'next_endorse_height' => 'float',
        'next_endorse_time' => 'string',
        'avg_luck_64' => 'float',
        'avg_performance_64' => 'float',
        'avg_contribution_64' => 'float',
        'baker_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'address_type' => null,
        'delegate' => null,
        'pubkey' => null,
        'first_in' => null,
        'first_out' => null,
        'last_in' => null,
        'last_out' => null,
        'first_seen' => null,
        'last_seen' => null,
        'delegate_since' => null,
        'first_in_time' => null,
        'first_out_time' => null,
        'last_in_time' => null,
        'last_out_time' => null,
        'first_seen_time' => null,
        'last_seen_time' => null,
        'delegate_since_time' => null,
        'total_received' => null,
        'total_sent' => null,
        'total_burned' => null,
        'total_fees_paid' => null,
        'total_rewards_earned' => null,
        'total_fees_earned' => null,
        'total_lost' => null,
        'frozen_deposits' => null,
        'frozen_rewards' => null,
        'frozen_fees' => null,
        'spendable_balance' => null,
        'total_balance' => null,
        'delegated_balance' => null,
        'total_delegations' => null,
        'active_delegations' => null,
        'is_funded' => null,
        'is_activated' => null,
        'is_delegated' => null,
        'is_revealed' => null,
        'is_delegate' => null,
        'is_active_delegate' => null,
        'is_contract' => null,
        'blocks_baked' => null,
        'blocks_missed' => null,
        'blocks_stolen' => null,
        'blocks_endorsed' => null,
        'slots_endorsed' => null,
        'slots_missed' => null,
        'n_ops' => null,
        'n_ops_failed' => null,
        'n_tx' => null,
        'n_delegation' => null,
        'n_origination' => null,
        'n_proposal' => null,
        'n_ballot' => null,
        'token_gen_min' => null,
        'token_gen_max' => null,
        'grace_period' => null,
        'staking_balance' => null,
        'staking_capacity' => null,
        'rolls' => null,
        'last_bake_height' => null,
        'last_bake_block' => null,
        'last_bake_time' => null,
        'last_endorse_height' => null,
        'last_endorse_block' => null,
        'last_endorse_time' => null,
        'next_bake_height' => null,
        'next_bake_priority' => null,
        'next_bake_time' => null,
        'next_endorse_height' => null,
        'next_endorse_time' => null,
        'avg_luck_64' => null,
        'avg_performance_64' => null,
        'avg_contribution_64' => null,
        'baker_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'address_type' => 'address_type',
        'delegate' => 'delegate',
        'pubkey' => 'pubkey',
        'first_in' => 'first_in',
        'first_out' => 'first_out',
        'last_in' => 'last_in',
        'last_out' => 'last_out',
        'first_seen' => 'first_seen',
        'last_seen' => 'last_seen',
        'delegate_since' => 'delegate_since',
        'first_in_time' => 'first_in_time',
        'first_out_time' => 'first_out_time',
        'last_in_time' => 'last_in_time',
        'last_out_time' => 'last_out_time',
        'first_seen_time' => 'first_seen_time',
        'last_seen_time' => 'last_seen_time',
        'delegate_since_time' => 'delegate_since_time',
        'total_received' => 'total_received',
        'total_sent' => 'total_sent',
        'total_burned' => 'total_burned',
        'total_fees_paid' => 'total_fees_paid',
        'total_rewards_earned' => 'total_rewards_earned',
        'total_fees_earned' => 'total_fees_earned',
        'total_lost' => 'total_lost',
        'frozen_deposits' => 'frozen_deposits',
        'frozen_rewards' => 'frozen_rewards',
        'frozen_fees' => 'frozen_fees',
        'spendable_balance' => 'spendable_balance',
        'total_balance' => 'total_balance',
        'delegated_balance' => 'delegated_balance',
        'total_delegations' => 'total_delegations',
        'active_delegations' => 'active_delegations',
        'is_funded' => 'is_funded',
        'is_activated' => 'is_activated',
        'is_delegated' => 'is_delegated',
        'is_revealed' => 'is_revealed',
        'is_delegate' => 'is_delegate',
        'is_active_delegate' => 'is_active_delegate',
        'is_contract' => 'is_contract',
        'blocks_baked' => 'blocks_baked',
        'blocks_missed' => 'blocks_missed',
        'blocks_stolen' => 'blocks_stolen',
        'blocks_endorsed' => 'blocks_endorsed',
        'slots_endorsed' => 'slots_endorsed',
        'slots_missed' => 'slots_missed',
        'n_ops' => 'n_ops',
        'n_ops_failed' => 'n_ops_failed',
        'n_tx' => 'n_tx',
        'n_delegation' => 'n_delegation',
        'n_origination' => 'n_origination',
        'n_proposal' => 'n_proposal',
        'n_ballot' => 'n_ballot',
        'token_gen_min' => 'token_gen_min',
        'token_gen_max' => 'token_gen_max',
        'grace_period' => 'grace_period',
        'staking_balance' => 'staking_balance',
        'staking_capacity' => 'staking_capacity',
        'rolls' => 'rolls',
        'last_bake_height' => 'last_bake_height',
        'last_bake_block' => 'last_bake_block',
        'last_bake_time' => 'last_bake_time',
        'last_endorse_height' => 'last_endorse_height',
        'last_endorse_block' => 'last_endorse_block',
        'last_endorse_time' => 'last_endorse_time',
        'next_bake_height' => 'next_bake_height',
        'next_bake_priority' => 'next_bake_priority',
        'next_bake_time' => 'next_bake_time',
        'next_endorse_height' => 'next_endorse_height',
        'next_endorse_time' => 'next_endorse_time',
        'avg_luck_64' => 'avg_luck_64',
        'avg_performance_64' => 'avg_performance_64',
        'avg_contribution_64' => 'avg_contribution_64',
        'baker_version' => 'baker_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'address_type' => 'setAddressType',
        'delegate' => 'setDelegate',
        'pubkey' => 'setPubkey',
        'first_in' => 'setFirstIn',
        'first_out' => 'setFirstOut',
        'last_in' => 'setLastIn',
        'last_out' => 'setLastOut',
        'first_seen' => 'setFirstSeen',
        'last_seen' => 'setLastSeen',
        'delegate_since' => 'setDelegateSince',
        'first_in_time' => 'setFirstInTime',
        'first_out_time' => 'setFirstOutTime',
        'last_in_time' => 'setLastInTime',
        'last_out_time' => 'setLastOutTime',
        'first_seen_time' => 'setFirstSeenTime',
        'last_seen_time' => 'setLastSeenTime',
        'delegate_since_time' => 'setDelegateSinceTime',
        'total_received' => 'setTotalReceived',
        'total_sent' => 'setTotalSent',
        'total_burned' => 'setTotalBurned',
        'total_fees_paid' => 'setTotalFeesPaid',
        'total_rewards_earned' => 'setTotalRewardsEarned',
        'total_fees_earned' => 'setTotalFeesEarned',
        'total_lost' => 'setTotalLost',
        'frozen_deposits' => 'setFrozenDeposits',
        'frozen_rewards' => 'setFrozenRewards',
        'frozen_fees' => 'setFrozenFees',
        'spendable_balance' => 'setSpendableBalance',
        'total_balance' => 'setTotalBalance',
        'delegated_balance' => 'setDelegatedBalance',
        'total_delegations' => 'setTotalDelegations',
        'active_delegations' => 'setActiveDelegations',
        'is_funded' => 'setIsFunded',
        'is_activated' => 'setIsActivated',
        'is_delegated' => 'setIsDelegated',
        'is_revealed' => 'setIsRevealed',
        'is_delegate' => 'setIsDelegate',
        'is_active_delegate' => 'setIsActiveDelegate',
        'is_contract' => 'setIsContract',
        'blocks_baked' => 'setBlocksBaked',
        'blocks_missed' => 'setBlocksMissed',
        'blocks_stolen' => 'setBlocksStolen',
        'blocks_endorsed' => 'setBlocksEndorsed',
        'slots_endorsed' => 'setSlotsEndorsed',
        'slots_missed' => 'setSlotsMissed',
        'n_ops' => 'setNOps',
        'n_ops_failed' => 'setNOpsFailed',
        'n_tx' => 'setNTx',
        'n_delegation' => 'setNDelegation',
        'n_origination' => 'setNOrigination',
        'n_proposal' => 'setNProposal',
        'n_ballot' => 'setNBallot',
        'token_gen_min' => 'setTokenGenMin',
        'token_gen_max' => 'setTokenGenMax',
        'grace_period' => 'setGracePeriod',
        'staking_balance' => 'setStakingBalance',
        'staking_capacity' => 'setStakingCapacity',
        'rolls' => 'setRolls',
        'last_bake_height' => 'setLastBakeHeight',
        'last_bake_block' => 'setLastBakeBlock',
        'last_bake_time' => 'setLastBakeTime',
        'last_endorse_height' => 'setLastEndorseHeight',
        'last_endorse_block' => 'setLastEndorseBlock',
        'last_endorse_time' => 'setLastEndorseTime',
        'next_bake_height' => 'setNextBakeHeight',
        'next_bake_priority' => 'setNextBakePriority',
        'next_bake_time' => 'setNextBakeTime',
        'next_endorse_height' => 'setNextEndorseHeight',
        'next_endorse_time' => 'setNextEndorseTime',
        'avg_luck_64' => 'setAvgLuck64',
        'avg_performance_64' => 'setAvgPerformance64',
        'avg_contribution_64' => 'setAvgContribution64',
        'baker_version' => 'setBakerVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'address_type' => 'getAddressType',
        'delegate' => 'getDelegate',
        'pubkey' => 'getPubkey',
        'first_in' => 'getFirstIn',
        'first_out' => 'getFirstOut',
        'last_in' => 'getLastIn',
        'last_out' => 'getLastOut',
        'first_seen' => 'getFirstSeen',
        'last_seen' => 'getLastSeen',
        'delegate_since' => 'getDelegateSince',
        'first_in_time' => 'getFirstInTime',
        'first_out_time' => 'getFirstOutTime',
        'last_in_time' => 'getLastInTime',
        'last_out_time' => 'getLastOutTime',
        'first_seen_time' => 'getFirstSeenTime',
        'last_seen_time' => 'getLastSeenTime',
        'delegate_since_time' => 'getDelegateSinceTime',
        'total_received' => 'getTotalReceived',
        'total_sent' => 'getTotalSent',
        'total_burned' => 'getTotalBurned',
        'total_fees_paid' => 'getTotalFeesPaid',
        'total_rewards_earned' => 'getTotalRewardsEarned',
        'total_fees_earned' => 'getTotalFeesEarned',
        'total_lost' => 'getTotalLost',
        'frozen_deposits' => 'getFrozenDeposits',
        'frozen_rewards' => 'getFrozenRewards',
        'frozen_fees' => 'getFrozenFees',
        'spendable_balance' => 'getSpendableBalance',
        'total_balance' => 'getTotalBalance',
        'delegated_balance' => 'getDelegatedBalance',
        'total_delegations' => 'getTotalDelegations',
        'active_delegations' => 'getActiveDelegations',
        'is_funded' => 'getIsFunded',
        'is_activated' => 'getIsActivated',
        'is_delegated' => 'getIsDelegated',
        'is_revealed' => 'getIsRevealed',
        'is_delegate' => 'getIsDelegate',
        'is_active_delegate' => 'getIsActiveDelegate',
        'is_contract' => 'getIsContract',
        'blocks_baked' => 'getBlocksBaked',
        'blocks_missed' => 'getBlocksMissed',
        'blocks_stolen' => 'getBlocksStolen',
        'blocks_endorsed' => 'getBlocksEndorsed',
        'slots_endorsed' => 'getSlotsEndorsed',
        'slots_missed' => 'getSlotsMissed',
        'n_ops' => 'getNOps',
        'n_ops_failed' => 'getNOpsFailed',
        'n_tx' => 'getNTx',
        'n_delegation' => 'getNDelegation',
        'n_origination' => 'getNOrigination',
        'n_proposal' => 'getNProposal',
        'n_ballot' => 'getNBallot',
        'token_gen_min' => 'getTokenGenMin',
        'token_gen_max' => 'getTokenGenMax',
        'grace_period' => 'getGracePeriod',
        'staking_balance' => 'getStakingBalance',
        'staking_capacity' => 'getStakingCapacity',
        'rolls' => 'getRolls',
        'last_bake_height' => 'getLastBakeHeight',
        'last_bake_block' => 'getLastBakeBlock',
        'last_bake_time' => 'getLastBakeTime',
        'last_endorse_height' => 'getLastEndorseHeight',
        'last_endorse_block' => 'getLastEndorseBlock',
        'last_endorse_time' => 'getLastEndorseTime',
        'next_bake_height' => 'getNextBakeHeight',
        'next_bake_priority' => 'getNextBakePriority',
        'next_bake_time' => 'getNextBakeTime',
        'next_endorse_height' => 'getNextEndorseHeight',
        'next_endorse_time' => 'getNextEndorseTime',
        'avg_luck_64' => 'getAvgLuck64',
        'avg_performance_64' => 'getAvgPerformance64',
        'avg_contribution_64' => 'getAvgContribution64',
        'baker_version' => 'getBakerVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = $data['address'] ?? null;
        $this->container['address_type'] = $data['address_type'] ?? null;
        $this->container['delegate'] = $data['delegate'] ?? null;
        $this->container['pubkey'] = $data['pubkey'] ?? null;
        $this->container['first_in'] = $data['first_in'] ?? null;
        $this->container['first_out'] = $data['first_out'] ?? null;
        $this->container['last_in'] = $data['last_in'] ?? null;
        $this->container['last_out'] = $data['last_out'] ?? null;
        $this->container['first_seen'] = $data['first_seen'] ?? null;
        $this->container['last_seen'] = $data['last_seen'] ?? null;
        $this->container['delegate_since'] = $data['delegate_since'] ?? null;
        $this->container['first_in_time'] = $data['first_in_time'] ?? null;
        $this->container['first_out_time'] = $data['first_out_time'] ?? null;
        $this->container['last_in_time'] = $data['last_in_time'] ?? null;
        $this->container['last_out_time'] = $data['last_out_time'] ?? null;
        $this->container['first_seen_time'] = $data['first_seen_time'] ?? null;
        $this->container['last_seen_time'] = $data['last_seen_time'] ?? null;
        $this->container['delegate_since_time'] = $data['delegate_since_time'] ?? null;
        $this->container['total_received'] = $data['total_received'] ?? null;
        $this->container['total_sent'] = $data['total_sent'] ?? null;
        $this->container['total_burned'] = $data['total_burned'] ?? null;
        $this->container['total_fees_paid'] = $data['total_fees_paid'] ?? null;
        $this->container['total_rewards_earned'] = $data['total_rewards_earned'] ?? null;
        $this->container['total_fees_earned'] = $data['total_fees_earned'] ?? null;
        $this->container['total_lost'] = $data['total_lost'] ?? null;
        $this->container['frozen_deposits'] = $data['frozen_deposits'] ?? null;
        $this->container['frozen_rewards'] = $data['frozen_rewards'] ?? null;
        $this->container['frozen_fees'] = $data['frozen_fees'] ?? null;
        $this->container['spendable_balance'] = $data['spendable_balance'] ?? null;
        $this->container['total_balance'] = $data['total_balance'] ?? null;
        $this->container['delegated_balance'] = $data['delegated_balance'] ?? null;
        $this->container['total_delegations'] = $data['total_delegations'] ?? null;
        $this->container['active_delegations'] = $data['active_delegations'] ?? null;
        $this->container['is_funded'] = $data['is_funded'] ?? null;
        $this->container['is_activated'] = $data['is_activated'] ?? null;
        $this->container['is_delegated'] = $data['is_delegated'] ?? null;
        $this->container['is_revealed'] = $data['is_revealed'] ?? null;
        $this->container['is_delegate'] = $data['is_delegate'] ?? null;
        $this->container['is_active_delegate'] = $data['is_active_delegate'] ?? null;
        $this->container['is_contract'] = $data['is_contract'] ?? null;
        $this->container['blocks_baked'] = $data['blocks_baked'] ?? null;
        $this->container['blocks_missed'] = $data['blocks_missed'] ?? null;
        $this->container['blocks_stolen'] = $data['blocks_stolen'] ?? null;
        $this->container['blocks_endorsed'] = $data['blocks_endorsed'] ?? null;
        $this->container['slots_endorsed'] = $data['slots_endorsed'] ?? null;
        $this->container['slots_missed'] = $data['slots_missed'] ?? null;
        $this->container['n_ops'] = $data['n_ops'] ?? null;
        $this->container['n_ops_failed'] = $data['n_ops_failed'] ?? null;
        $this->container['n_tx'] = $data['n_tx'] ?? null;
        $this->container['n_delegation'] = $data['n_delegation'] ?? null;
        $this->container['n_origination'] = $data['n_origination'] ?? null;
        $this->container['n_proposal'] = $data['n_proposal'] ?? null;
        $this->container['n_ballot'] = $data['n_ballot'] ?? null;
        $this->container['token_gen_min'] = $data['token_gen_min'] ?? null;
        $this->container['token_gen_max'] = $data['token_gen_max'] ?? null;
        $this->container['grace_period'] = $data['grace_period'] ?? null;
        $this->container['staking_balance'] = $data['staking_balance'] ?? null;
        $this->container['staking_capacity'] = $data['staking_capacity'] ?? null;
        $this->container['rolls'] = $data['rolls'] ?? null;
        $this->container['last_bake_height'] = $data['last_bake_height'] ?? null;
        $this->container['last_bake_block'] = $data['last_bake_block'] ?? null;
        $this->container['last_bake_time'] = $data['last_bake_time'] ?? null;
        $this->container['last_endorse_height'] = $data['last_endorse_height'] ?? null;
        $this->container['last_endorse_block'] = $data['last_endorse_block'] ?? null;
        $this->container['last_endorse_time'] = $data['last_endorse_time'] ?? null;
        $this->container['next_bake_height'] = $data['next_bake_height'] ?? null;
        $this->container['next_bake_priority'] = $data['next_bake_priority'] ?? null;
        $this->container['next_bake_time'] = $data['next_bake_time'] ?? null;
        $this->container['next_endorse_height'] = $data['next_endorse_height'] ?? null;
        $this->container['next_endorse_time'] = $data['next_endorse_time'] ?? null;
        $this->container['avg_luck_64'] = $data['avg_luck_64'] ?? null;
        $this->container['avg_performance_64'] = $data['avg_performance_64'] ?? null;
        $this->container['avg_contribution_64'] = $data['avg_contribution_64'] ?? null;
        $this->container['baker_version'] = $data['baker_version'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ((mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address_type'] === null) {
            $invalidProperties[] = "'address_type' can't be null";
        }
        if ((mb_strlen($this->container['address_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'address_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['delegate'] === null) {
            $invalidProperties[] = "'delegate' can't be null";
        }
        if ((mb_strlen($this->container['delegate']) < 1)) {
            $invalidProperties[] = "invalid value for 'delegate', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pubkey'] === null) {
            $invalidProperties[] = "'pubkey' can't be null";
        }
        if ((mb_strlen($this->container['pubkey']) < 1)) {
            $invalidProperties[] = "invalid value for 'pubkey', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['first_in'] === null) {
            $invalidProperties[] = "'first_in' can't be null";
        }
        if ($this->container['first_out'] === null) {
            $invalidProperties[] = "'first_out' can't be null";
        }
        if ($this->container['last_in'] === null) {
            $invalidProperties[] = "'last_in' can't be null";
        }
        if ($this->container['last_out'] === null) {
            $invalidProperties[] = "'last_out' can't be null";
        }
        if ($this->container['first_seen'] === null) {
            $invalidProperties[] = "'first_seen' can't be null";
        }
        if ($this->container['last_seen'] === null) {
            $invalidProperties[] = "'last_seen' can't be null";
        }
        if ($this->container['delegate_since'] === null) {
            $invalidProperties[] = "'delegate_since' can't be null";
        }
        if ($this->container['first_in_time'] === null) {
            $invalidProperties[] = "'first_in_time' can't be null";
        }
        if ((mb_strlen($this->container['first_in_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_in_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['first_out_time'] === null) {
            $invalidProperties[] = "'first_out_time' can't be null";
        }
        if ((mb_strlen($this->container['first_out_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_out_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_in_time'] === null) {
            $invalidProperties[] = "'last_in_time' can't be null";
        }
        if ((mb_strlen($this->container['last_in_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_in_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_out_time'] === null) {
            $invalidProperties[] = "'last_out_time' can't be null";
        }
        if ((mb_strlen($this->container['last_out_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_out_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['first_seen_time'] === null) {
            $invalidProperties[] = "'first_seen_time' can't be null";
        }
        if ((mb_strlen($this->container['first_seen_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_seen_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_seen_time'] === null) {
            $invalidProperties[] = "'last_seen_time' can't be null";
        }
        if ((mb_strlen($this->container['last_seen_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_seen_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['delegate_since_time'] === null) {
            $invalidProperties[] = "'delegate_since_time' can't be null";
        }
        if ((mb_strlen($this->container['delegate_since_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'delegate_since_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total_received'] === null) {
            $invalidProperties[] = "'total_received' can't be null";
        }
        if ($this->container['total_sent'] === null) {
            $invalidProperties[] = "'total_sent' can't be null";
        }
        if ($this->container['total_burned'] === null) {
            $invalidProperties[] = "'total_burned' can't be null";
        }
        if ($this->container['total_fees_paid'] === null) {
            $invalidProperties[] = "'total_fees_paid' can't be null";
        }
        if ($this->container['total_rewards_earned'] === null) {
            $invalidProperties[] = "'total_rewards_earned' can't be null";
        }
        if ($this->container['total_fees_earned'] === null) {
            $invalidProperties[] = "'total_fees_earned' can't be null";
        }
        if ($this->container['total_lost'] === null) {
            $invalidProperties[] = "'total_lost' can't be null";
        }
        if ($this->container['frozen_deposits'] === null) {
            $invalidProperties[] = "'frozen_deposits' can't be null";
        }
        if ($this->container['frozen_rewards'] === null) {
            $invalidProperties[] = "'frozen_rewards' can't be null";
        }
        if ($this->container['frozen_fees'] === null) {
            $invalidProperties[] = "'frozen_fees' can't be null";
        }
        if ($this->container['spendable_balance'] === null) {
            $invalidProperties[] = "'spendable_balance' can't be null";
        }
        if ($this->container['total_balance'] === null) {
            $invalidProperties[] = "'total_balance' can't be null";
        }
        if ($this->container['delegated_balance'] === null) {
            $invalidProperties[] = "'delegated_balance' can't be null";
        }
        if ($this->container['total_delegations'] === null) {
            $invalidProperties[] = "'total_delegations' can't be null";
        }
        if ($this->container['active_delegations'] === null) {
            $invalidProperties[] = "'active_delegations' can't be null";
        }
        if ($this->container['is_funded'] === null) {
            $invalidProperties[] = "'is_funded' can't be null";
        }
        if ($this->container['is_activated'] === null) {
            $invalidProperties[] = "'is_activated' can't be null";
        }
        if ($this->container['is_delegated'] === null) {
            $invalidProperties[] = "'is_delegated' can't be null";
        }
        if ($this->container['is_revealed'] === null) {
            $invalidProperties[] = "'is_revealed' can't be null";
        }
        if ($this->container['is_delegate'] === null) {
            $invalidProperties[] = "'is_delegate' can't be null";
        }
        if ($this->container['is_active_delegate'] === null) {
            $invalidProperties[] = "'is_active_delegate' can't be null";
        }
        if ($this->container['is_contract'] === null) {
            $invalidProperties[] = "'is_contract' can't be null";
        }
        if ($this->container['blocks_baked'] === null) {
            $invalidProperties[] = "'blocks_baked' can't be null";
        }
        if ($this->container['blocks_missed'] === null) {
            $invalidProperties[] = "'blocks_missed' can't be null";
        }
        if ($this->container['blocks_stolen'] === null) {
            $invalidProperties[] = "'blocks_stolen' can't be null";
        }
        if ($this->container['blocks_endorsed'] === null) {
            $invalidProperties[] = "'blocks_endorsed' can't be null";
        }
        if ($this->container['slots_endorsed'] === null) {
            $invalidProperties[] = "'slots_endorsed' can't be null";
        }
        if ($this->container['slots_missed'] === null) {
            $invalidProperties[] = "'slots_missed' can't be null";
        }
        if ($this->container['n_ops'] === null) {
            $invalidProperties[] = "'n_ops' can't be null";
        }
        if ($this->container['n_ops_failed'] === null) {
            $invalidProperties[] = "'n_ops_failed' can't be null";
        }
        if ($this->container['n_tx'] === null) {
            $invalidProperties[] = "'n_tx' can't be null";
        }
        if ($this->container['n_delegation'] === null) {
            $invalidProperties[] = "'n_delegation' can't be null";
        }
        if ($this->container['n_origination'] === null) {
            $invalidProperties[] = "'n_origination' can't be null";
        }
        if ($this->container['n_proposal'] === null) {
            $invalidProperties[] = "'n_proposal' can't be null";
        }
        if ($this->container['n_ballot'] === null) {
            $invalidProperties[] = "'n_ballot' can't be null";
        }
        if ($this->container['token_gen_min'] === null) {
            $invalidProperties[] = "'token_gen_min' can't be null";
        }
        if ($this->container['token_gen_max'] === null) {
            $invalidProperties[] = "'token_gen_max' can't be null";
        }
        if ($this->container['grace_period'] === null) {
            $invalidProperties[] = "'grace_period' can't be null";
        }
        if ($this->container['staking_balance'] === null) {
            $invalidProperties[] = "'staking_balance' can't be null";
        }
        if ($this->container['staking_capacity'] === null) {
            $invalidProperties[] = "'staking_capacity' can't be null";
        }
        if ($this->container['rolls'] === null) {
            $invalidProperties[] = "'rolls' can't be null";
        }
        if ($this->container['last_bake_height'] === null) {
            $invalidProperties[] = "'last_bake_height' can't be null";
        }
        if ($this->container['last_bake_block'] === null) {
            $invalidProperties[] = "'last_bake_block' can't be null";
        }
        if ((mb_strlen($this->container['last_bake_block']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_bake_block', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_bake_time'] === null) {
            $invalidProperties[] = "'last_bake_time' can't be null";
        }
        if ((mb_strlen($this->container['last_bake_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_bake_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_endorse_height'] === null) {
            $invalidProperties[] = "'last_endorse_height' can't be null";
        }
        if ($this->container['last_endorse_block'] === null) {
            $invalidProperties[] = "'last_endorse_block' can't be null";
        }
        if ((mb_strlen($this->container['last_endorse_block']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_endorse_block', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_endorse_time'] === null) {
            $invalidProperties[] = "'last_endorse_time' can't be null";
        }
        if ((mb_strlen($this->container['last_endorse_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_endorse_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['next_bake_height'] === null) {
            $invalidProperties[] = "'next_bake_height' can't be null";
        }
        if ($this->container['next_bake_priority'] === null) {
            $invalidProperties[] = "'next_bake_priority' can't be null";
        }
        if ($this->container['next_bake_time'] === null) {
            $invalidProperties[] = "'next_bake_time' can't be null";
        }
        if ((mb_strlen($this->container['next_bake_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'next_bake_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['next_endorse_height'] === null) {
            $invalidProperties[] = "'next_endorse_height' can't be null";
        }
        if ($this->container['next_endorse_time'] === null) {
            $invalidProperties[] = "'next_endorse_time' can't be null";
        }
        if ((mb_strlen($this->container['next_endorse_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'next_endorse_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['avg_luck_64'] === null) {
            $invalidProperties[] = "'avg_luck_64' can't be null";
        }
        if ($this->container['avg_performance_64'] === null) {
            $invalidProperties[] = "'avg_performance_64' can't be null";
        }
        if ($this->container['avg_contribution_64'] === null) {
            $invalidProperties[] = "'avg_contribution_64' can't be null";
        }
        if ($this->container['baker_version'] === null) {
            $invalidProperties[] = "'baker_version' can't be null";
        }
        if ((mb_strlen($this->container['baker_version']) < 1)) {
            $invalidProperties[] = "invalid value for 'baker_version', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if ((mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_type
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['address_type'];
    }

    /**
     * Sets address_type
     *
     * @param string $address_type address_type
     *
     * @return self
     */
    public function setAddressType($address_type)
    {

        if ((mb_strlen($address_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address_type when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['address_type'] = $address_type;

        return $this;
    }

    /**
     * Gets delegate
     *
     * @return string
     */
    public function getDelegate()
    {
        return $this->container['delegate'];
    }

    /**
     * Sets delegate
     *
     * @param string $delegate delegate
     *
     * @return self
     */
    public function setDelegate($delegate)
    {

        if ((mb_strlen($delegate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $delegate when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['delegate'] = $delegate;

        return $this;
    }

    /**
     * Gets pubkey
     *
     * @return string
     */
    public function getPubkey()
    {
        return $this->container['pubkey'];
    }

    /**
     * Sets pubkey
     *
     * @param string $pubkey pubkey
     *
     * @return self
     */
    public function setPubkey($pubkey)
    {

        if ((mb_strlen($pubkey) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pubkey when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['pubkey'] = $pubkey;

        return $this;
    }

    /**
     * Gets first_in
     *
     * @return float
     */
    public function getFirstIn()
    {
        return $this->container['first_in'];
    }

    /**
     * Sets first_in
     *
     * @param float $first_in first_in
     *
     * @return self
     */
    public function setFirstIn($first_in)
    {
        $this->container['first_in'] = $first_in;

        return $this;
    }

    /**
     * Gets first_out
     *
     * @return float
     */
    public function getFirstOut()
    {
        return $this->container['first_out'];
    }

    /**
     * Sets first_out
     *
     * @param float $first_out first_out
     *
     * @return self
     */
    public function setFirstOut($first_out)
    {
        $this->container['first_out'] = $first_out;

        return $this;
    }

    /**
     * Gets last_in
     *
     * @return float
     */
    public function getLastIn()
    {
        return $this->container['last_in'];
    }

    /**
     * Sets last_in
     *
     * @param float $last_in last_in
     *
     * @return self
     */
    public function setLastIn($last_in)
    {
        $this->container['last_in'] = $last_in;

        return $this;
    }

    /**
     * Gets last_out
     *
     * @return float
     */
    public function getLastOut()
    {
        return $this->container['last_out'];
    }

    /**
     * Sets last_out
     *
     * @param float $last_out last_out
     *
     * @return self
     */
    public function setLastOut($last_out)
    {
        $this->container['last_out'] = $last_out;

        return $this;
    }

    /**
     * Gets first_seen
     *
     * @return float
     */
    public function getFirstSeen()
    {
        return $this->container['first_seen'];
    }

    /**
     * Sets first_seen
     *
     * @param float $first_seen first_seen
     *
     * @return self
     */
    public function setFirstSeen($first_seen)
    {
        $this->container['first_seen'] = $first_seen;

        return $this;
    }

    /**
     * Gets last_seen
     *
     * @return float
     */
    public function getLastSeen()
    {
        return $this->container['last_seen'];
    }

    /**
     * Sets last_seen
     *
     * @param float $last_seen last_seen
     *
     * @return self
     */
    public function setLastSeen($last_seen)
    {
        $this->container['last_seen'] = $last_seen;

        return $this;
    }

    /**
     * Gets delegate_since
     *
     * @return float
     */
    public function getDelegateSince()
    {
        return $this->container['delegate_since'];
    }

    /**
     * Sets delegate_since
     *
     * @param float $delegate_since delegate_since
     *
     * @return self
     */
    public function setDelegateSince($delegate_since)
    {
        $this->container['delegate_since'] = $delegate_since;

        return $this;
    }

    /**
     * Gets first_in_time
     *
     * @return string
     */
    public function getFirstInTime()
    {
        return $this->container['first_in_time'];
    }

    /**
     * Sets first_in_time
     *
     * @param string $first_in_time first_in_time
     *
     * @return self
     */
    public function setFirstInTime($first_in_time)
    {

        if ((mb_strlen($first_in_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_in_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['first_in_time'] = $first_in_time;

        return $this;
    }

    /**
     * Gets first_out_time
     *
     * @return string
     */
    public function getFirstOutTime()
    {
        return $this->container['first_out_time'];
    }

    /**
     * Sets first_out_time
     *
     * @param string $first_out_time first_out_time
     *
     * @return self
     */
    public function setFirstOutTime($first_out_time)
    {

        if ((mb_strlen($first_out_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_out_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['first_out_time'] = $first_out_time;

        return $this;
    }

    /**
     * Gets last_in_time
     *
     * @return string
     */
    public function getLastInTime()
    {
        return $this->container['last_in_time'];
    }

    /**
     * Sets last_in_time
     *
     * @param string $last_in_time last_in_time
     *
     * @return self
     */
    public function setLastInTime($last_in_time)
    {

        if ((mb_strlen($last_in_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_in_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_in_time'] = $last_in_time;

        return $this;
    }

    /**
     * Gets last_out_time
     *
     * @return string
     */
    public function getLastOutTime()
    {
        return $this->container['last_out_time'];
    }

    /**
     * Sets last_out_time
     *
     * @param string $last_out_time last_out_time
     *
     * @return self
     */
    public function setLastOutTime($last_out_time)
    {

        if ((mb_strlen($last_out_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_out_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_out_time'] = $last_out_time;

        return $this;
    }

    /**
     * Gets first_seen_time
     *
     * @return string
     */
    public function getFirstSeenTime()
    {
        return $this->container['first_seen_time'];
    }

    /**
     * Sets first_seen_time
     *
     * @param string $first_seen_time first_seen_time
     *
     * @return self
     */
    public function setFirstSeenTime($first_seen_time)
    {

        if ((mb_strlen($first_seen_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_seen_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['first_seen_time'] = $first_seen_time;

        return $this;
    }

    /**
     * Gets last_seen_time
     *
     * @return string
     */
    public function getLastSeenTime()
    {
        return $this->container['last_seen_time'];
    }

    /**
     * Sets last_seen_time
     *
     * @param string $last_seen_time last_seen_time
     *
     * @return self
     */
    public function setLastSeenTime($last_seen_time)
    {

        if ((mb_strlen($last_seen_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_seen_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_seen_time'] = $last_seen_time;

        return $this;
    }

    /**
     * Gets delegate_since_time
     *
     * @return string
     */
    public function getDelegateSinceTime()
    {
        return $this->container['delegate_since_time'];
    }

    /**
     * Sets delegate_since_time
     *
     * @param string $delegate_since_time delegate_since_time
     *
     * @return self
     */
    public function setDelegateSinceTime($delegate_since_time)
    {

        if ((mb_strlen($delegate_since_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $delegate_since_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['delegate_since_time'] = $delegate_since_time;

        return $this;
    }

    /**
     * Gets total_received
     *
     * @return float
     */
    public function getTotalReceived()
    {
        return $this->container['total_received'];
    }

    /**
     * Sets total_received
     *
     * @param float $total_received total_received
     *
     * @return self
     */
    public function setTotalReceived($total_received)
    {
        $this->container['total_received'] = $total_received;

        return $this;
    }

    /**
     * Gets total_sent
     *
     * @return float
     */
    public function getTotalSent()
    {
        return $this->container['total_sent'];
    }

    /**
     * Sets total_sent
     *
     * @param float $total_sent total_sent
     *
     * @return self
     */
    public function setTotalSent($total_sent)
    {
        $this->container['total_sent'] = $total_sent;

        return $this;
    }

    /**
     * Gets total_burned
     *
     * @return float
     */
    public function getTotalBurned()
    {
        return $this->container['total_burned'];
    }

    /**
     * Sets total_burned
     *
     * @param float $total_burned total_burned
     *
     * @return self
     */
    public function setTotalBurned($total_burned)
    {
        $this->container['total_burned'] = $total_burned;

        return $this;
    }

    /**
     * Gets total_fees_paid
     *
     * @return float
     */
    public function getTotalFeesPaid()
    {
        return $this->container['total_fees_paid'];
    }

    /**
     * Sets total_fees_paid
     *
     * @param float $total_fees_paid total_fees_paid
     *
     * @return self
     */
    public function setTotalFeesPaid($total_fees_paid)
    {
        $this->container['total_fees_paid'] = $total_fees_paid;

        return $this;
    }

    /**
     * Gets total_rewards_earned
     *
     * @return float
     */
    public function getTotalRewardsEarned()
    {
        return $this->container['total_rewards_earned'];
    }

    /**
     * Sets total_rewards_earned
     *
     * @param float $total_rewards_earned total_rewards_earned
     *
     * @return self
     */
    public function setTotalRewardsEarned($total_rewards_earned)
    {
        $this->container['total_rewards_earned'] = $total_rewards_earned;

        return $this;
    }

    /**
     * Gets total_fees_earned
     *
     * @return float
     */
    public function getTotalFeesEarned()
    {
        return $this->container['total_fees_earned'];
    }

    /**
     * Sets total_fees_earned
     *
     * @param float $total_fees_earned total_fees_earned
     *
     * @return self
     */
    public function setTotalFeesEarned($total_fees_earned)
    {
        $this->container['total_fees_earned'] = $total_fees_earned;

        return $this;
    }

    /**
     * Gets total_lost
     *
     * @return float
     */
    public function getTotalLost()
    {
        return $this->container['total_lost'];
    }

    /**
     * Sets total_lost
     *
     * @param float $total_lost total_lost
     *
     * @return self
     */
    public function setTotalLost($total_lost)
    {
        $this->container['total_lost'] = $total_lost;

        return $this;
    }

    /**
     * Gets frozen_deposits
     *
     * @return float
     */
    public function getFrozenDeposits()
    {
        return $this->container['frozen_deposits'];
    }

    /**
     * Sets frozen_deposits
     *
     * @param float $frozen_deposits frozen_deposits
     *
     * @return self
     */
    public function setFrozenDeposits($frozen_deposits)
    {
        $this->container['frozen_deposits'] = $frozen_deposits;

        return $this;
    }

    /**
     * Gets frozen_rewards
     *
     * @return float
     */
    public function getFrozenRewards()
    {
        return $this->container['frozen_rewards'];
    }

    /**
     * Sets frozen_rewards
     *
     * @param float $frozen_rewards frozen_rewards
     *
     * @return self
     */
    public function setFrozenRewards($frozen_rewards)
    {
        $this->container['frozen_rewards'] = $frozen_rewards;

        return $this;
    }

    /**
     * Gets frozen_fees
     *
     * @return float
     */
    public function getFrozenFees()
    {
        return $this->container['frozen_fees'];
    }

    /**
     * Sets frozen_fees
     *
     * @param float $frozen_fees frozen_fees
     *
     * @return self
     */
    public function setFrozenFees($frozen_fees)
    {
        $this->container['frozen_fees'] = $frozen_fees;

        return $this;
    }

    /**
     * Gets spendable_balance
     *
     * @return float
     */
    public function getSpendableBalance()
    {
        return $this->container['spendable_balance'];
    }

    /**
     * Sets spendable_balance
     *
     * @param float $spendable_balance spendable_balance
     *
     * @return self
     */
    public function setSpendableBalance($spendable_balance)
    {
        $this->container['spendable_balance'] = $spendable_balance;

        return $this;
    }

    /**
     * Gets total_balance
     *
     * @return float
     */
    public function getTotalBalance()
    {
        return $this->container['total_balance'];
    }

    /**
     * Sets total_balance
     *
     * @param float $total_balance total_balance
     *
     * @return self
     */
    public function setTotalBalance($total_balance)
    {
        $this->container['total_balance'] = $total_balance;

        return $this;
    }

    /**
     * Gets delegated_balance
     *
     * @return float
     */
    public function getDelegatedBalance()
    {
        return $this->container['delegated_balance'];
    }

    /**
     * Sets delegated_balance
     *
     * @param float $delegated_balance delegated_balance
     *
     * @return self
     */
    public function setDelegatedBalance($delegated_balance)
    {
        $this->container['delegated_balance'] = $delegated_balance;

        return $this;
    }

    /**
     * Gets total_delegations
     *
     * @return float
     */
    public function getTotalDelegations()
    {
        return $this->container['total_delegations'];
    }

    /**
     * Sets total_delegations
     *
     * @param float $total_delegations total_delegations
     *
     * @return self
     */
    public function setTotalDelegations($total_delegations)
    {
        $this->container['total_delegations'] = $total_delegations;

        return $this;
    }

    /**
     * Gets active_delegations
     *
     * @return float
     */
    public function getActiveDelegations()
    {
        return $this->container['active_delegations'];
    }

    /**
     * Sets active_delegations
     *
     * @param float $active_delegations active_delegations
     *
     * @return self
     */
    public function setActiveDelegations($active_delegations)
    {
        $this->container['active_delegations'] = $active_delegations;

        return $this;
    }

    /**
     * Gets is_funded
     *
     * @return bool
     */
    public function getIsFunded()
    {
        return $this->container['is_funded'];
    }

    /**
     * Sets is_funded
     *
     * @param bool $is_funded is_funded
     *
     * @return self
     */
    public function setIsFunded($is_funded)
    {
        $this->container['is_funded'] = $is_funded;

        return $this;
    }

    /**
     * Gets is_activated
     *
     * @return bool
     */
    public function getIsActivated()
    {
        return $this->container['is_activated'];
    }

    /**
     * Sets is_activated
     *
     * @param bool $is_activated is_activated
     *
     * @return self
     */
    public function setIsActivated($is_activated)
    {
        $this->container['is_activated'] = $is_activated;

        return $this;
    }

    /**
     * Gets is_delegated
     *
     * @return bool
     */
    public function getIsDelegated()
    {
        return $this->container['is_delegated'];
    }

    /**
     * Sets is_delegated
     *
     * @param bool $is_delegated is_delegated
     *
     * @return self
     */
    public function setIsDelegated($is_delegated)
    {
        $this->container['is_delegated'] = $is_delegated;

        return $this;
    }

    /**
     * Gets is_revealed
     *
     * @return bool
     */
    public function getIsRevealed()
    {
        return $this->container['is_revealed'];
    }

    /**
     * Sets is_revealed
     *
     * @param bool $is_revealed is_revealed
     *
     * @return self
     */
    public function setIsRevealed($is_revealed)
    {
        $this->container['is_revealed'] = $is_revealed;

        return $this;
    }

    /**
     * Gets is_delegate
     *
     * @return bool
     */
    public function getIsDelegate()
    {
        return $this->container['is_delegate'];
    }

    /**
     * Sets is_delegate
     *
     * @param bool $is_delegate is_delegate
     *
     * @return self
     */
    public function setIsDelegate($is_delegate)
    {
        $this->container['is_delegate'] = $is_delegate;

        return $this;
    }

    /**
     * Gets is_active_delegate
     *
     * @return bool
     */
    public function getIsActiveDelegate()
    {
        return $this->container['is_active_delegate'];
    }

    /**
     * Sets is_active_delegate
     *
     * @param bool $is_active_delegate is_active_delegate
     *
     * @return self
     */
    public function setIsActiveDelegate($is_active_delegate)
    {
        $this->container['is_active_delegate'] = $is_active_delegate;

        return $this;
    }

    /**
     * Gets is_contract
     *
     * @return bool
     */
    public function getIsContract()
    {
        return $this->container['is_contract'];
    }

    /**
     * Sets is_contract
     *
     * @param bool $is_contract is_contract
     *
     * @return self
     */
    public function setIsContract($is_contract)
    {
        $this->container['is_contract'] = $is_contract;

        return $this;
    }

    /**
     * Gets blocks_baked
     *
     * @return float
     */
    public function getBlocksBaked()
    {
        return $this->container['blocks_baked'];
    }

    /**
     * Sets blocks_baked
     *
     * @param float $blocks_baked blocks_baked
     *
     * @return self
     */
    public function setBlocksBaked($blocks_baked)
    {
        $this->container['blocks_baked'] = $blocks_baked;

        return $this;
    }

    /**
     * Gets blocks_missed
     *
     * @return float
     */
    public function getBlocksMissed()
    {
        return $this->container['blocks_missed'];
    }

    /**
     * Sets blocks_missed
     *
     * @param float $blocks_missed blocks_missed
     *
     * @return self
     */
    public function setBlocksMissed($blocks_missed)
    {
        $this->container['blocks_missed'] = $blocks_missed;

        return $this;
    }

    /**
     * Gets blocks_stolen
     *
     * @return float
     */
    public function getBlocksStolen()
    {
        return $this->container['blocks_stolen'];
    }

    /**
     * Sets blocks_stolen
     *
     * @param float $blocks_stolen blocks_stolen
     *
     * @return self
     */
    public function setBlocksStolen($blocks_stolen)
    {
        $this->container['blocks_stolen'] = $blocks_stolen;

        return $this;
    }

    /**
     * Gets blocks_endorsed
     *
     * @return float
     */
    public function getBlocksEndorsed()
    {
        return $this->container['blocks_endorsed'];
    }

    /**
     * Sets blocks_endorsed
     *
     * @param float $blocks_endorsed blocks_endorsed
     *
     * @return self
     */
    public function setBlocksEndorsed($blocks_endorsed)
    {
        $this->container['blocks_endorsed'] = $blocks_endorsed;

        return $this;
    }

    /**
     * Gets slots_endorsed
     *
     * @return float
     */
    public function getSlotsEndorsed()
    {
        return $this->container['slots_endorsed'];
    }

    /**
     * Sets slots_endorsed
     *
     * @param float $slots_endorsed slots_endorsed
     *
     * @return self
     */
    public function setSlotsEndorsed($slots_endorsed)
    {
        $this->container['slots_endorsed'] = $slots_endorsed;

        return $this;
    }

    /**
     * Gets slots_missed
     *
     * @return float
     */
    public function getSlotsMissed()
    {
        return $this->container['slots_missed'];
    }

    /**
     * Sets slots_missed
     *
     * @param float $slots_missed slots_missed
     *
     * @return self
     */
    public function setSlotsMissed($slots_missed)
    {
        $this->container['slots_missed'] = $slots_missed;

        return $this;
    }

    /**
     * Gets n_ops
     *
     * @return float
     */
    public function getNOps()
    {
        return $this->container['n_ops'];
    }

    /**
     * Sets n_ops
     *
     * @param float $n_ops n_ops
     *
     * @return self
     */
    public function setNOps($n_ops)
    {
        $this->container['n_ops'] = $n_ops;

        return $this;
    }

    /**
     * Gets n_ops_failed
     *
     * @return float
     */
    public function getNOpsFailed()
    {
        return $this->container['n_ops_failed'];
    }

    /**
     * Sets n_ops_failed
     *
     * @param float $n_ops_failed n_ops_failed
     *
     * @return self
     */
    public function setNOpsFailed($n_ops_failed)
    {
        $this->container['n_ops_failed'] = $n_ops_failed;

        return $this;
    }

    /**
     * Gets n_tx
     *
     * @return float
     */
    public function getNTx()
    {
        return $this->container['n_tx'];
    }

    /**
     * Sets n_tx
     *
     * @param float $n_tx n_tx
     *
     * @return self
     */
    public function setNTx($n_tx)
    {
        $this->container['n_tx'] = $n_tx;

        return $this;
    }

    /**
     * Gets n_delegation
     *
     * @return float
     */
    public function getNDelegation()
    {
        return $this->container['n_delegation'];
    }

    /**
     * Sets n_delegation
     *
     * @param float $n_delegation n_delegation
     *
     * @return self
     */
    public function setNDelegation($n_delegation)
    {
        $this->container['n_delegation'] = $n_delegation;

        return $this;
    }

    /**
     * Gets n_origination
     *
     * @return float
     */
    public function getNOrigination()
    {
        return $this->container['n_origination'];
    }

    /**
     * Sets n_origination
     *
     * @param float $n_origination n_origination
     *
     * @return self
     */
    public function setNOrigination($n_origination)
    {
        $this->container['n_origination'] = $n_origination;

        return $this;
    }

    /**
     * Gets n_proposal
     *
     * @return float
     */
    public function getNProposal()
    {
        return $this->container['n_proposal'];
    }

    /**
     * Sets n_proposal
     *
     * @param float $n_proposal n_proposal
     *
     * @return self
     */
    public function setNProposal($n_proposal)
    {
        $this->container['n_proposal'] = $n_proposal;

        return $this;
    }

    /**
     * Gets n_ballot
     *
     * @return float
     */
    public function getNBallot()
    {
        return $this->container['n_ballot'];
    }

    /**
     * Sets n_ballot
     *
     * @param float $n_ballot n_ballot
     *
     * @return self
     */
    public function setNBallot($n_ballot)
    {
        $this->container['n_ballot'] = $n_ballot;

        return $this;
    }

    /**
     * Gets token_gen_min
     *
     * @return float
     */
    public function getTokenGenMin()
    {
        return $this->container['token_gen_min'];
    }

    /**
     * Sets token_gen_min
     *
     * @param float $token_gen_min token_gen_min
     *
     * @return self
     */
    public function setTokenGenMin($token_gen_min)
    {
        $this->container['token_gen_min'] = $token_gen_min;

        return $this;
    }

    /**
     * Gets token_gen_max
     *
     * @return float
     */
    public function getTokenGenMax()
    {
        return $this->container['token_gen_max'];
    }

    /**
     * Sets token_gen_max
     *
     * @param float $token_gen_max token_gen_max
     *
     * @return self
     */
    public function setTokenGenMax($token_gen_max)
    {
        $this->container['token_gen_max'] = $token_gen_max;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return float
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param float $grace_period grace_period
     *
     * @return self
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets staking_balance
     *
     * @return float
     */
    public function getStakingBalance()
    {
        return $this->container['staking_balance'];
    }

    /**
     * Sets staking_balance
     *
     * @param float $staking_balance staking_balance
     *
     * @return self
     */
    public function setStakingBalance($staking_balance)
    {
        $this->container['staking_balance'] = $staking_balance;

        return $this;
    }

    /**
     * Gets staking_capacity
     *
     * @return float
     */
    public function getStakingCapacity()
    {
        return $this->container['staking_capacity'];
    }

    /**
     * Sets staking_capacity
     *
     * @param float $staking_capacity staking_capacity
     *
     * @return self
     */
    public function setStakingCapacity($staking_capacity)
    {
        $this->container['staking_capacity'] = $staking_capacity;

        return $this;
    }

    /**
     * Gets rolls
     *
     * @return float
     */
    public function getRolls()
    {
        return $this->container['rolls'];
    }

    /**
     * Sets rolls
     *
     * @param float $rolls rolls
     *
     * @return self
     */
    public function setRolls($rolls)
    {
        $this->container['rolls'] = $rolls;

        return $this;
    }

    /**
     * Gets last_bake_height
     *
     * @return float
     */
    public function getLastBakeHeight()
    {
        return $this->container['last_bake_height'];
    }

    /**
     * Sets last_bake_height
     *
     * @param float $last_bake_height last_bake_height
     *
     * @return self
     */
    public function setLastBakeHeight($last_bake_height)
    {
        $this->container['last_bake_height'] = $last_bake_height;

        return $this;
    }

    /**
     * Gets last_bake_block
     *
     * @return string
     */
    public function getLastBakeBlock()
    {
        return $this->container['last_bake_block'];
    }

    /**
     * Sets last_bake_block
     *
     * @param string $last_bake_block last_bake_block
     *
     * @return self
     */
    public function setLastBakeBlock($last_bake_block)
    {

        if ((mb_strlen($last_bake_block) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_bake_block when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_bake_block'] = $last_bake_block;

        return $this;
    }

    /**
     * Gets last_bake_time
     *
     * @return string
     */
    public function getLastBakeTime()
    {
        return $this->container['last_bake_time'];
    }

    /**
     * Sets last_bake_time
     *
     * @param string $last_bake_time last_bake_time
     *
     * @return self
     */
    public function setLastBakeTime($last_bake_time)
    {

        if ((mb_strlen($last_bake_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_bake_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_bake_time'] = $last_bake_time;

        return $this;
    }

    /**
     * Gets last_endorse_height
     *
     * @return float
     */
    public function getLastEndorseHeight()
    {
        return $this->container['last_endorse_height'];
    }

    /**
     * Sets last_endorse_height
     *
     * @param float $last_endorse_height last_endorse_height
     *
     * @return self
     */
    public function setLastEndorseHeight($last_endorse_height)
    {
        $this->container['last_endorse_height'] = $last_endorse_height;

        return $this;
    }

    /**
     * Gets last_endorse_block
     *
     * @return string
     */
    public function getLastEndorseBlock()
    {
        return $this->container['last_endorse_block'];
    }

    /**
     * Sets last_endorse_block
     *
     * @param string $last_endorse_block last_endorse_block
     *
     * @return self
     */
    public function setLastEndorseBlock($last_endorse_block)
    {

        if ((mb_strlen($last_endorse_block) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_endorse_block when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_endorse_block'] = $last_endorse_block;

        return $this;
    }

    /**
     * Gets last_endorse_time
     *
     * @return string
     */
    public function getLastEndorseTime()
    {
        return $this->container['last_endorse_time'];
    }

    /**
     * Sets last_endorse_time
     *
     * @param string $last_endorse_time last_endorse_time
     *
     * @return self
     */
    public function setLastEndorseTime($last_endorse_time)
    {

        if ((mb_strlen($last_endorse_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_endorse_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['last_endorse_time'] = $last_endorse_time;

        return $this;
    }

    /**
     * Gets next_bake_height
     *
     * @return float
     */
    public function getNextBakeHeight()
    {
        return $this->container['next_bake_height'];
    }

    /**
     * Sets next_bake_height
     *
     * @param float $next_bake_height next_bake_height
     *
     * @return self
     */
    public function setNextBakeHeight($next_bake_height)
    {
        $this->container['next_bake_height'] = $next_bake_height;

        return $this;
    }

    /**
     * Gets next_bake_priority
     *
     * @return float
     */
    public function getNextBakePriority()
    {
        return $this->container['next_bake_priority'];
    }

    /**
     * Sets next_bake_priority
     *
     * @param float $next_bake_priority next_bake_priority
     *
     * @return self
     */
    public function setNextBakePriority($next_bake_priority)
    {
        $this->container['next_bake_priority'] = $next_bake_priority;

        return $this;
    }

    /**
     * Gets next_bake_time
     *
     * @return string
     */
    public function getNextBakeTime()
    {
        return $this->container['next_bake_time'];
    }

    /**
     * Sets next_bake_time
     *
     * @param string $next_bake_time next_bake_time
     *
     * @return self
     */
    public function setNextBakeTime($next_bake_time)
    {

        if ((mb_strlen($next_bake_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $next_bake_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['next_bake_time'] = $next_bake_time;

        return $this;
    }

    /**
     * Gets next_endorse_height
     *
     * @return float
     */
    public function getNextEndorseHeight()
    {
        return $this->container['next_endorse_height'];
    }

    /**
     * Sets next_endorse_height
     *
     * @param float $next_endorse_height next_endorse_height
     *
     * @return self
     */
    public function setNextEndorseHeight($next_endorse_height)
    {
        $this->container['next_endorse_height'] = $next_endorse_height;

        return $this;
    }

    /**
     * Gets next_endorse_time
     *
     * @return string
     */
    public function getNextEndorseTime()
    {
        return $this->container['next_endorse_time'];
    }

    /**
     * Sets next_endorse_time
     *
     * @param string $next_endorse_time next_endorse_time
     *
     * @return self
     */
    public function setNextEndorseTime($next_endorse_time)
    {

        if ((mb_strlen($next_endorse_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $next_endorse_time when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['next_endorse_time'] = $next_endorse_time;

        return $this;
    }

    /**
     * Gets avg_luck_64
     *
     * @return float
     */
    public function getAvgLuck64()
    {
        return $this->container['avg_luck_64'];
    }

    /**
     * Sets avg_luck_64
     *
     * @param float $avg_luck_64 avg_luck_64
     *
     * @return self
     */
    public function setAvgLuck64($avg_luck_64)
    {
        $this->container['avg_luck_64'] = $avg_luck_64;

        return $this;
    }

    /**
     * Gets avg_performance_64
     *
     * @return float
     */
    public function getAvgPerformance64()
    {
        return $this->container['avg_performance_64'];
    }

    /**
     * Sets avg_performance_64
     *
     * @param float $avg_performance_64 avg_performance_64
     *
     * @return self
     */
    public function setAvgPerformance64($avg_performance_64)
    {
        $this->container['avg_performance_64'] = $avg_performance_64;

        return $this;
    }

    /**
     * Gets avg_contribution_64
     *
     * @return float
     */
    public function getAvgContribution64()
    {
        return $this->container['avg_contribution_64'];
    }

    /**
     * Sets avg_contribution_64
     *
     * @param float $avg_contribution_64 avg_contribution_64
     *
     * @return self
     */
    public function setAvgContribution64($avg_contribution_64)
    {
        $this->container['avg_contribution_64'] = $avg_contribution_64;

        return $this;
    }

    /**
     * Gets baker_version
     *
     * @return string
     */
    public function getBakerVersion()
    {
        return $this->container['baker_version'];
    }

    /**
     * Sets baker_version
     *
     * @param string $baker_version baker_version
     *
     * @return self
     */
    public function setBakerVersion($baker_version)
    {

        if ((mb_strlen($baker_version) < 1)) {
            throw new \InvalidArgumentException('invalid length for $baker_version when calling InlineResponse2003., must be bigger than or equal to 1.');
        }

        $this->container['baker_version'] = $baker_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


