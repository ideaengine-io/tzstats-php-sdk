<?php
/**
 * InlineResponse2001
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TZstats
 *
 * API for TZstats.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tezos@whafor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2001 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2001 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'network' => 'string',
        'symbol' => 'string',
        'chain_id' => 'string',
        'deployment' => 'float',
        'version' => 'float',
        'protocol' => 'string',
        'start_height' => 'float',
        'end_height' => 'float',
        'no_reward_cycles' => 'float',
        'security_deposit_ramp_up_cycles' => 'float',
        'decimals' => 'float',
        'units' => 'float',
        'block_reward' => 'float',
        'block_security_deposit' => 'float',
        'blocks_per_commitment' => 'float',
        'blocks_per_cycle' => 'float',
        'blocks_per_roll_snapshot' => 'float',
        'blocks_per_voting_period' => 'float',
        'cost_per_byte' => 'float',
        'endorsement_reward' => 'float',
        'endorsement_security_deposit' => 'float',
        'endorsers_per_block' => 'float',
        'hard_gas_limit_per_block' => 'float',
        'hard_gas_limit_per_operation' => 'float',
        'hard_storage_limit_per_operation' => 'float',
        'max_operation_data_length' => 'float',
        'max_proposals_per_delegate' => 'float',
        'max_revelations_per_block' => 'float',
        'michelson_maximum_type_size' => 'float',
        'nonce_length' => 'float',
        'origination_burn' => 'float',
        'origination_size' => 'float',
        'preserved_cycles' => 'float',
        'proof_of_work_nonce_size' => 'float',
        'proof_of_work_threshold' => 'float',
        'seed_nonce_revelation_tip' => 'float',
        'time_between_blocks' => 'mixed[]',
        'tokens_per_roll' => 'float',
        'test_chain_duration' => 'float',
        'min_proposal_quorum' => 'float',
        'quorum_min' => 'float',
        'quorum_max' => 'float',
        'block_rewards_v6' => 'mixed[]',
        'endorsement_rewards_v6' => 'mixed[]',
        'max_anon_ops_per_block' => 'float',
        'liquidity_baking_escape_ema_threshold' => 'float',
        'liquidity_baking_subsidy' => 'float',
        'liquidity_baking_sunset_level' => 'float',
        'minimal_block_delay' => 'float',
        'num_voting_periods' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'network' => null,
        'symbol' => null,
        'chain_id' => null,
        'deployment' => null,
        'version' => null,
        'protocol' => null,
        'start_height' => null,
        'end_height' => null,
        'no_reward_cycles' => null,
        'security_deposit_ramp_up_cycles' => null,
        'decimals' => null,
        'units' => null,
        'block_reward' => null,
        'block_security_deposit' => null,
        'blocks_per_commitment' => null,
        'blocks_per_cycle' => null,
        'blocks_per_roll_snapshot' => null,
        'blocks_per_voting_period' => null,
        'cost_per_byte' => null,
        'endorsement_reward' => null,
        'endorsement_security_deposit' => null,
        'endorsers_per_block' => null,
        'hard_gas_limit_per_block' => null,
        'hard_gas_limit_per_operation' => null,
        'hard_storage_limit_per_operation' => null,
        'max_operation_data_length' => null,
        'max_proposals_per_delegate' => null,
        'max_revelations_per_block' => null,
        'michelson_maximum_type_size' => null,
        'nonce_length' => null,
        'origination_burn' => null,
        'origination_size' => null,
        'preserved_cycles' => null,
        'proof_of_work_nonce_size' => null,
        'proof_of_work_threshold' => null,
        'seed_nonce_revelation_tip' => null,
        'time_between_blocks' => null,
        'tokens_per_roll' => null,
        'test_chain_duration' => null,
        'min_proposal_quorum' => null,
        'quorum_min' => null,
        'quorum_max' => null,
        'block_rewards_v6' => null,
        'endorsement_rewards_v6' => null,
        'max_anon_ops_per_block' => null,
        'liquidity_baking_escape_ema_threshold' => null,
        'liquidity_baking_subsidy' => null,
        'liquidity_baking_sunset_level' => null,
        'minimal_block_delay' => null,
        'num_voting_periods' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'network' => 'network',
        'symbol' => 'symbol',
        'chain_id' => 'chain_id',
        'deployment' => 'deployment',
        'version' => 'version',
        'protocol' => 'protocol',
        'start_height' => 'start_height',
        'end_height' => 'end_height',
        'no_reward_cycles' => 'no_reward_cycles',
        'security_deposit_ramp_up_cycles' => 'security_deposit_ramp_up_cycles',
        'decimals' => 'decimals',
        'units' => 'units',
        'block_reward' => 'block_reward',
        'block_security_deposit' => 'block_security_deposit',
        'blocks_per_commitment' => 'blocks_per_commitment',
        'blocks_per_cycle' => 'blocks_per_cycle',
        'blocks_per_roll_snapshot' => 'blocks_per_roll_snapshot',
        'blocks_per_voting_period' => 'blocks_per_voting_period',
        'cost_per_byte' => 'cost_per_byte',
        'endorsement_reward' => 'endorsement_reward',
        'endorsement_security_deposit' => 'endorsement_security_deposit',
        'endorsers_per_block' => 'endorsers_per_block',
        'hard_gas_limit_per_block' => 'hard_gas_limit_per_block',
        'hard_gas_limit_per_operation' => 'hard_gas_limit_per_operation',
        'hard_storage_limit_per_operation' => 'hard_storage_limit_per_operation',
        'max_operation_data_length' => 'max_operation_data_length',
        'max_proposals_per_delegate' => 'max_proposals_per_delegate',
        'max_revelations_per_block' => 'max_revelations_per_block',
        'michelson_maximum_type_size' => 'michelson_maximum_type_size',
        'nonce_length' => 'nonce_length',
        'origination_burn' => 'origination_burn',
        'origination_size' => 'origination_size',
        'preserved_cycles' => 'preserved_cycles',
        'proof_of_work_nonce_size' => 'proof_of_work_nonce_size',
        'proof_of_work_threshold' => 'proof_of_work_threshold',
        'seed_nonce_revelation_tip' => 'seed_nonce_revelation_tip',
        'time_between_blocks' => 'time_between_blocks',
        'tokens_per_roll' => 'tokens_per_roll',
        'test_chain_duration' => 'test_chain_duration',
        'min_proposal_quorum' => 'min_proposal_quorum',
        'quorum_min' => 'quorum_min',
        'quorum_max' => 'quorum_max',
        'block_rewards_v6' => 'block_rewards_v6',
        'endorsement_rewards_v6' => 'endorsement_rewards_v6',
        'max_anon_ops_per_block' => 'max_anon_ops_per_block',
        'liquidity_baking_escape_ema_threshold' => 'liquidity_baking_escape_ema_threshold',
        'liquidity_baking_subsidy' => 'liquidity_baking_subsidy',
        'liquidity_baking_sunset_level' => 'liquidity_baking_sunset_level',
        'minimal_block_delay' => 'minimal_block_delay',
        'num_voting_periods' => 'num_voting_periods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'network' => 'setNetwork',
        'symbol' => 'setSymbol',
        'chain_id' => 'setChainId',
        'deployment' => 'setDeployment',
        'version' => 'setVersion',
        'protocol' => 'setProtocol',
        'start_height' => 'setStartHeight',
        'end_height' => 'setEndHeight',
        'no_reward_cycles' => 'setNoRewardCycles',
        'security_deposit_ramp_up_cycles' => 'setSecurityDepositRampUpCycles',
        'decimals' => 'setDecimals',
        'units' => 'setUnits',
        'block_reward' => 'setBlockReward',
        'block_security_deposit' => 'setBlockSecurityDeposit',
        'blocks_per_commitment' => 'setBlocksPerCommitment',
        'blocks_per_cycle' => 'setBlocksPerCycle',
        'blocks_per_roll_snapshot' => 'setBlocksPerRollSnapshot',
        'blocks_per_voting_period' => 'setBlocksPerVotingPeriod',
        'cost_per_byte' => 'setCostPerByte',
        'endorsement_reward' => 'setEndorsementReward',
        'endorsement_security_deposit' => 'setEndorsementSecurityDeposit',
        'endorsers_per_block' => 'setEndorsersPerBlock',
        'hard_gas_limit_per_block' => 'setHardGasLimitPerBlock',
        'hard_gas_limit_per_operation' => 'setHardGasLimitPerOperation',
        'hard_storage_limit_per_operation' => 'setHardStorageLimitPerOperation',
        'max_operation_data_length' => 'setMaxOperationDataLength',
        'max_proposals_per_delegate' => 'setMaxProposalsPerDelegate',
        'max_revelations_per_block' => 'setMaxRevelationsPerBlock',
        'michelson_maximum_type_size' => 'setMichelsonMaximumTypeSize',
        'nonce_length' => 'setNonceLength',
        'origination_burn' => 'setOriginationBurn',
        'origination_size' => 'setOriginationSize',
        'preserved_cycles' => 'setPreservedCycles',
        'proof_of_work_nonce_size' => 'setProofOfWorkNonceSize',
        'proof_of_work_threshold' => 'setProofOfWorkThreshold',
        'seed_nonce_revelation_tip' => 'setSeedNonceRevelationTip',
        'time_between_blocks' => 'setTimeBetweenBlocks',
        'tokens_per_roll' => 'setTokensPerRoll',
        'test_chain_duration' => 'setTestChainDuration',
        'min_proposal_quorum' => 'setMinProposalQuorum',
        'quorum_min' => 'setQuorumMin',
        'quorum_max' => 'setQuorumMax',
        'block_rewards_v6' => 'setBlockRewardsV6',
        'endorsement_rewards_v6' => 'setEndorsementRewardsV6',
        'max_anon_ops_per_block' => 'setMaxAnonOpsPerBlock',
        'liquidity_baking_escape_ema_threshold' => 'setLiquidityBakingEscapeEmaThreshold',
        'liquidity_baking_subsidy' => 'setLiquidityBakingSubsidy',
        'liquidity_baking_sunset_level' => 'setLiquidityBakingSunsetLevel',
        'minimal_block_delay' => 'setMinimalBlockDelay',
        'num_voting_periods' => 'setNumVotingPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'network' => 'getNetwork',
        'symbol' => 'getSymbol',
        'chain_id' => 'getChainId',
        'deployment' => 'getDeployment',
        'version' => 'getVersion',
        'protocol' => 'getProtocol',
        'start_height' => 'getStartHeight',
        'end_height' => 'getEndHeight',
        'no_reward_cycles' => 'getNoRewardCycles',
        'security_deposit_ramp_up_cycles' => 'getSecurityDepositRampUpCycles',
        'decimals' => 'getDecimals',
        'units' => 'getUnits',
        'block_reward' => 'getBlockReward',
        'block_security_deposit' => 'getBlockSecurityDeposit',
        'blocks_per_commitment' => 'getBlocksPerCommitment',
        'blocks_per_cycle' => 'getBlocksPerCycle',
        'blocks_per_roll_snapshot' => 'getBlocksPerRollSnapshot',
        'blocks_per_voting_period' => 'getBlocksPerVotingPeriod',
        'cost_per_byte' => 'getCostPerByte',
        'endorsement_reward' => 'getEndorsementReward',
        'endorsement_security_deposit' => 'getEndorsementSecurityDeposit',
        'endorsers_per_block' => 'getEndorsersPerBlock',
        'hard_gas_limit_per_block' => 'getHardGasLimitPerBlock',
        'hard_gas_limit_per_operation' => 'getHardGasLimitPerOperation',
        'hard_storage_limit_per_operation' => 'getHardStorageLimitPerOperation',
        'max_operation_data_length' => 'getMaxOperationDataLength',
        'max_proposals_per_delegate' => 'getMaxProposalsPerDelegate',
        'max_revelations_per_block' => 'getMaxRevelationsPerBlock',
        'michelson_maximum_type_size' => 'getMichelsonMaximumTypeSize',
        'nonce_length' => 'getNonceLength',
        'origination_burn' => 'getOriginationBurn',
        'origination_size' => 'getOriginationSize',
        'preserved_cycles' => 'getPreservedCycles',
        'proof_of_work_nonce_size' => 'getProofOfWorkNonceSize',
        'proof_of_work_threshold' => 'getProofOfWorkThreshold',
        'seed_nonce_revelation_tip' => 'getSeedNonceRevelationTip',
        'time_between_blocks' => 'getTimeBetweenBlocks',
        'tokens_per_roll' => 'getTokensPerRoll',
        'test_chain_duration' => 'getTestChainDuration',
        'min_proposal_quorum' => 'getMinProposalQuorum',
        'quorum_min' => 'getQuorumMin',
        'quorum_max' => 'getQuorumMax',
        'block_rewards_v6' => 'getBlockRewardsV6',
        'endorsement_rewards_v6' => 'getEndorsementRewardsV6',
        'max_anon_ops_per_block' => 'getMaxAnonOpsPerBlock',
        'liquidity_baking_escape_ema_threshold' => 'getLiquidityBakingEscapeEmaThreshold',
        'liquidity_baking_subsidy' => 'getLiquidityBakingSubsidy',
        'liquidity_baking_sunset_level' => 'getLiquidityBakingSunsetLevel',
        'minimal_block_delay' => 'getMinimalBlockDelay',
        'num_voting_periods' => 'getNumVotingPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['chain_id'] = $data['chain_id'] ?? null;
        $this->container['deployment'] = $data['deployment'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['start_height'] = $data['start_height'] ?? null;
        $this->container['end_height'] = $data['end_height'] ?? null;
        $this->container['no_reward_cycles'] = $data['no_reward_cycles'] ?? null;
        $this->container['security_deposit_ramp_up_cycles'] = $data['security_deposit_ramp_up_cycles'] ?? null;
        $this->container['decimals'] = $data['decimals'] ?? null;
        $this->container['units'] = $data['units'] ?? null;
        $this->container['block_reward'] = $data['block_reward'] ?? null;
        $this->container['block_security_deposit'] = $data['block_security_deposit'] ?? null;
        $this->container['blocks_per_commitment'] = $data['blocks_per_commitment'] ?? null;
        $this->container['blocks_per_cycle'] = $data['blocks_per_cycle'] ?? null;
        $this->container['blocks_per_roll_snapshot'] = $data['blocks_per_roll_snapshot'] ?? null;
        $this->container['blocks_per_voting_period'] = $data['blocks_per_voting_period'] ?? null;
        $this->container['cost_per_byte'] = $data['cost_per_byte'] ?? null;
        $this->container['endorsement_reward'] = $data['endorsement_reward'] ?? null;
        $this->container['endorsement_security_deposit'] = $data['endorsement_security_deposit'] ?? null;
        $this->container['endorsers_per_block'] = $data['endorsers_per_block'] ?? null;
        $this->container['hard_gas_limit_per_block'] = $data['hard_gas_limit_per_block'] ?? null;
        $this->container['hard_gas_limit_per_operation'] = $data['hard_gas_limit_per_operation'] ?? null;
        $this->container['hard_storage_limit_per_operation'] = $data['hard_storage_limit_per_operation'] ?? null;
        $this->container['max_operation_data_length'] = $data['max_operation_data_length'] ?? null;
        $this->container['max_proposals_per_delegate'] = $data['max_proposals_per_delegate'] ?? null;
        $this->container['max_revelations_per_block'] = $data['max_revelations_per_block'] ?? null;
        $this->container['michelson_maximum_type_size'] = $data['michelson_maximum_type_size'] ?? null;
        $this->container['nonce_length'] = $data['nonce_length'] ?? null;
        $this->container['origination_burn'] = $data['origination_burn'] ?? null;
        $this->container['origination_size'] = $data['origination_size'] ?? null;
        $this->container['preserved_cycles'] = $data['preserved_cycles'] ?? null;
        $this->container['proof_of_work_nonce_size'] = $data['proof_of_work_nonce_size'] ?? null;
        $this->container['proof_of_work_threshold'] = $data['proof_of_work_threshold'] ?? null;
        $this->container['seed_nonce_revelation_tip'] = $data['seed_nonce_revelation_tip'] ?? null;
        $this->container['time_between_blocks'] = $data['time_between_blocks'] ?? null;
        $this->container['tokens_per_roll'] = $data['tokens_per_roll'] ?? null;
        $this->container['test_chain_duration'] = $data['test_chain_duration'] ?? null;
        $this->container['min_proposal_quorum'] = $data['min_proposal_quorum'] ?? null;
        $this->container['quorum_min'] = $data['quorum_min'] ?? null;
        $this->container['quorum_max'] = $data['quorum_max'] ?? null;
        $this->container['block_rewards_v6'] = $data['block_rewards_v6'] ?? null;
        $this->container['endorsement_rewards_v6'] = $data['endorsement_rewards_v6'] ?? null;
        $this->container['max_anon_ops_per_block'] = $data['max_anon_ops_per_block'] ?? null;
        $this->container['liquidity_baking_escape_ema_threshold'] = $data['liquidity_baking_escape_ema_threshold'] ?? null;
        $this->container['liquidity_baking_subsidy'] = $data['liquidity_baking_subsidy'] ?? null;
        $this->container['liquidity_baking_sunset_level'] = $data['liquidity_baking_sunset_level'] ?? null;
        $this->container['minimal_block_delay'] = $data['minimal_block_delay'] ?? null;
        $this->container['num_voting_periods'] = $data['num_voting_periods'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ((mb_strlen($this->container['network']) < 1)) {
            $invalidProperties[] = "invalid value for 'network', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->container['symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['chain_id'] === null) {
            $invalidProperties[] = "'chain_id' can't be null";
        }
        if ((mb_strlen($this->container['chain_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'chain_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['deployment'] === null) {
            $invalidProperties[] = "'deployment' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        if ((mb_strlen($this->container['protocol']) < 1)) {
            $invalidProperties[] = "invalid value for 'protocol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['start_height'] === null) {
            $invalidProperties[] = "'start_height' can't be null";
        }
        if ($this->container['end_height'] === null) {
            $invalidProperties[] = "'end_height' can't be null";
        }
        if ($this->container['no_reward_cycles'] === null) {
            $invalidProperties[] = "'no_reward_cycles' can't be null";
        }
        if ($this->container['security_deposit_ramp_up_cycles'] === null) {
            $invalidProperties[] = "'security_deposit_ramp_up_cycles' can't be null";
        }
        if ($this->container['decimals'] === null) {
            $invalidProperties[] = "'decimals' can't be null";
        }
        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if ($this->container['block_reward'] === null) {
            $invalidProperties[] = "'block_reward' can't be null";
        }
        if ($this->container['block_security_deposit'] === null) {
            $invalidProperties[] = "'block_security_deposit' can't be null";
        }
        if ($this->container['blocks_per_commitment'] === null) {
            $invalidProperties[] = "'blocks_per_commitment' can't be null";
        }
        if ($this->container['blocks_per_cycle'] === null) {
            $invalidProperties[] = "'blocks_per_cycle' can't be null";
        }
        if ($this->container['blocks_per_roll_snapshot'] === null) {
            $invalidProperties[] = "'blocks_per_roll_snapshot' can't be null";
        }
        if ($this->container['blocks_per_voting_period'] === null) {
            $invalidProperties[] = "'blocks_per_voting_period' can't be null";
        }
        if ($this->container['cost_per_byte'] === null) {
            $invalidProperties[] = "'cost_per_byte' can't be null";
        }
        if ($this->container['endorsement_reward'] === null) {
            $invalidProperties[] = "'endorsement_reward' can't be null";
        }
        if ($this->container['endorsement_security_deposit'] === null) {
            $invalidProperties[] = "'endorsement_security_deposit' can't be null";
        }
        if ($this->container['endorsers_per_block'] === null) {
            $invalidProperties[] = "'endorsers_per_block' can't be null";
        }
        if ($this->container['hard_gas_limit_per_block'] === null) {
            $invalidProperties[] = "'hard_gas_limit_per_block' can't be null";
        }
        if ($this->container['hard_gas_limit_per_operation'] === null) {
            $invalidProperties[] = "'hard_gas_limit_per_operation' can't be null";
        }
        if ($this->container['hard_storage_limit_per_operation'] === null) {
            $invalidProperties[] = "'hard_storage_limit_per_operation' can't be null";
        }
        if ($this->container['max_operation_data_length'] === null) {
            $invalidProperties[] = "'max_operation_data_length' can't be null";
        }
        if ($this->container['max_proposals_per_delegate'] === null) {
            $invalidProperties[] = "'max_proposals_per_delegate' can't be null";
        }
        if ($this->container['max_revelations_per_block'] === null) {
            $invalidProperties[] = "'max_revelations_per_block' can't be null";
        }
        if ($this->container['michelson_maximum_type_size'] === null) {
            $invalidProperties[] = "'michelson_maximum_type_size' can't be null";
        }
        if ($this->container['nonce_length'] === null) {
            $invalidProperties[] = "'nonce_length' can't be null";
        }
        if ($this->container['origination_burn'] === null) {
            $invalidProperties[] = "'origination_burn' can't be null";
        }
        if ($this->container['origination_size'] === null) {
            $invalidProperties[] = "'origination_size' can't be null";
        }
        if ($this->container['preserved_cycles'] === null) {
            $invalidProperties[] = "'preserved_cycles' can't be null";
        }
        if ($this->container['proof_of_work_nonce_size'] === null) {
            $invalidProperties[] = "'proof_of_work_nonce_size' can't be null";
        }
        if ($this->container['proof_of_work_threshold'] === null) {
            $invalidProperties[] = "'proof_of_work_threshold' can't be null";
        }
        if ($this->container['seed_nonce_revelation_tip'] === null) {
            $invalidProperties[] = "'seed_nonce_revelation_tip' can't be null";
        }
        if ($this->container['time_between_blocks'] === null) {
            $invalidProperties[] = "'time_between_blocks' can't be null";
        }
        if ($this->container['tokens_per_roll'] === null) {
            $invalidProperties[] = "'tokens_per_roll' can't be null";
        }
        if ($this->container['test_chain_duration'] === null) {
            $invalidProperties[] = "'test_chain_duration' can't be null";
        }
        if ($this->container['min_proposal_quorum'] === null) {
            $invalidProperties[] = "'min_proposal_quorum' can't be null";
        }
        if ($this->container['quorum_min'] === null) {
            $invalidProperties[] = "'quorum_min' can't be null";
        }
        if ($this->container['quorum_max'] === null) {
            $invalidProperties[] = "'quorum_max' can't be null";
        }
        if ($this->container['block_rewards_v6'] === null) {
            $invalidProperties[] = "'block_rewards_v6' can't be null";
        }
        if ($this->container['endorsement_rewards_v6'] === null) {
            $invalidProperties[] = "'endorsement_rewards_v6' can't be null";
        }
        if ($this->container['max_anon_ops_per_block'] === null) {
            $invalidProperties[] = "'max_anon_ops_per_block' can't be null";
        }
        if ($this->container['liquidity_baking_escape_ema_threshold'] === null) {
            $invalidProperties[] = "'liquidity_baking_escape_ema_threshold' can't be null";
        }
        if ($this->container['liquidity_baking_subsidy'] === null) {
            $invalidProperties[] = "'liquidity_baking_subsidy' can't be null";
        }
        if ($this->container['liquidity_baking_sunset_level'] === null) {
            $invalidProperties[] = "'liquidity_baking_sunset_level' can't be null";
        }
        if ($this->container['minimal_block_delay'] === null) {
            $invalidProperties[] = "'minimal_block_delay' can't be null";
        }
        if ($this->container['num_voting_periods'] === null) {
            $invalidProperties[] = "'num_voting_periods' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {

        if ((mb_strlen($network) < 1)) {
            throw new \InvalidArgumentException('invalid length for $network when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {

        if ((mb_strlen($symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets chain_id
     *
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param string $chain_id chain_id
     *
     * @return self
     */
    public function setChainId($chain_id)
    {

        if ((mb_strlen($chain_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $chain_id when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets deployment
     *
     * @return float
     */
    public function getDeployment()
    {
        return $this->container['deployment'];
    }

    /**
     * Sets deployment
     *
     * @param float $deployment deployment
     *
     * @return self
     */
    public function setDeployment($deployment)
    {
        $this->container['deployment'] = $deployment;

        return $this;
    }

    /**
     * Gets version
     *
     * @return float
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param float $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {

        if ((mb_strlen($protocol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $protocol when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets start_height
     *
     * @return float
     */
    public function getStartHeight()
    {
        return $this->container['start_height'];
    }

    /**
     * Sets start_height
     *
     * @param float $start_height start_height
     *
     * @return self
     */
    public function setStartHeight($start_height)
    {
        $this->container['start_height'] = $start_height;

        return $this;
    }

    /**
     * Gets end_height
     *
     * @return float
     */
    public function getEndHeight()
    {
        return $this->container['end_height'];
    }

    /**
     * Sets end_height
     *
     * @param float $end_height end_height
     *
     * @return self
     */
    public function setEndHeight($end_height)
    {
        $this->container['end_height'] = $end_height;

        return $this;
    }

    /**
     * Gets no_reward_cycles
     *
     * @return float
     */
    public function getNoRewardCycles()
    {
        return $this->container['no_reward_cycles'];
    }

    /**
     * Sets no_reward_cycles
     *
     * @param float $no_reward_cycles no_reward_cycles
     *
     * @return self
     */
    public function setNoRewardCycles($no_reward_cycles)
    {
        $this->container['no_reward_cycles'] = $no_reward_cycles;

        return $this;
    }

    /**
     * Gets security_deposit_ramp_up_cycles
     *
     * @return float
     */
    public function getSecurityDepositRampUpCycles()
    {
        return $this->container['security_deposit_ramp_up_cycles'];
    }

    /**
     * Sets security_deposit_ramp_up_cycles
     *
     * @param float $security_deposit_ramp_up_cycles security_deposit_ramp_up_cycles
     *
     * @return self
     */
    public function setSecurityDepositRampUpCycles($security_deposit_ramp_up_cycles)
    {
        $this->container['security_deposit_ramp_up_cycles'] = $security_deposit_ramp_up_cycles;

        return $this;
    }

    /**
     * Gets decimals
     *
     * @return float
     */
    public function getDecimals()
    {
        return $this->container['decimals'];
    }

    /**
     * Sets decimals
     *
     * @param float $decimals decimals
     *
     * @return self
     */
    public function setDecimals($decimals)
    {
        $this->container['decimals'] = $decimals;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float $units units
     *
     * @return self
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets block_reward
     *
     * @return float
     */
    public function getBlockReward()
    {
        return $this->container['block_reward'];
    }

    /**
     * Sets block_reward
     *
     * @param float $block_reward block_reward
     *
     * @return self
     */
    public function setBlockReward($block_reward)
    {
        $this->container['block_reward'] = $block_reward;

        return $this;
    }

    /**
     * Gets block_security_deposit
     *
     * @return float
     */
    public function getBlockSecurityDeposit()
    {
        return $this->container['block_security_deposit'];
    }

    /**
     * Sets block_security_deposit
     *
     * @param float $block_security_deposit block_security_deposit
     *
     * @return self
     */
    public function setBlockSecurityDeposit($block_security_deposit)
    {
        $this->container['block_security_deposit'] = $block_security_deposit;

        return $this;
    }

    /**
     * Gets blocks_per_commitment
     *
     * @return float
     */
    public function getBlocksPerCommitment()
    {
        return $this->container['blocks_per_commitment'];
    }

    /**
     * Sets blocks_per_commitment
     *
     * @param float $blocks_per_commitment blocks_per_commitment
     *
     * @return self
     */
    public function setBlocksPerCommitment($blocks_per_commitment)
    {
        $this->container['blocks_per_commitment'] = $blocks_per_commitment;

        return $this;
    }

    /**
     * Gets blocks_per_cycle
     *
     * @return float
     */
    public function getBlocksPerCycle()
    {
        return $this->container['blocks_per_cycle'];
    }

    /**
     * Sets blocks_per_cycle
     *
     * @param float $blocks_per_cycle blocks_per_cycle
     *
     * @return self
     */
    public function setBlocksPerCycle($blocks_per_cycle)
    {
        $this->container['blocks_per_cycle'] = $blocks_per_cycle;

        return $this;
    }

    /**
     * Gets blocks_per_roll_snapshot
     *
     * @return float
     */
    public function getBlocksPerRollSnapshot()
    {
        return $this->container['blocks_per_roll_snapshot'];
    }

    /**
     * Sets blocks_per_roll_snapshot
     *
     * @param float $blocks_per_roll_snapshot blocks_per_roll_snapshot
     *
     * @return self
     */
    public function setBlocksPerRollSnapshot($blocks_per_roll_snapshot)
    {
        $this->container['blocks_per_roll_snapshot'] = $blocks_per_roll_snapshot;

        return $this;
    }

    /**
     * Gets blocks_per_voting_period
     *
     * @return float
     */
    public function getBlocksPerVotingPeriod()
    {
        return $this->container['blocks_per_voting_period'];
    }

    /**
     * Sets blocks_per_voting_period
     *
     * @param float $blocks_per_voting_period blocks_per_voting_period
     *
     * @return self
     */
    public function setBlocksPerVotingPeriod($blocks_per_voting_period)
    {
        $this->container['blocks_per_voting_period'] = $blocks_per_voting_period;

        return $this;
    }

    /**
     * Gets cost_per_byte
     *
     * @return float
     */
    public function getCostPerByte()
    {
        return $this->container['cost_per_byte'];
    }

    /**
     * Sets cost_per_byte
     *
     * @param float $cost_per_byte cost_per_byte
     *
     * @return self
     */
    public function setCostPerByte($cost_per_byte)
    {
        $this->container['cost_per_byte'] = $cost_per_byte;

        return $this;
    }

    /**
     * Gets endorsement_reward
     *
     * @return float
     */
    public function getEndorsementReward()
    {
        return $this->container['endorsement_reward'];
    }

    /**
     * Sets endorsement_reward
     *
     * @param float $endorsement_reward endorsement_reward
     *
     * @return self
     */
    public function setEndorsementReward($endorsement_reward)
    {
        $this->container['endorsement_reward'] = $endorsement_reward;

        return $this;
    }

    /**
     * Gets endorsement_security_deposit
     *
     * @return float
     */
    public function getEndorsementSecurityDeposit()
    {
        return $this->container['endorsement_security_deposit'];
    }

    /**
     * Sets endorsement_security_deposit
     *
     * @param float $endorsement_security_deposit endorsement_security_deposit
     *
     * @return self
     */
    public function setEndorsementSecurityDeposit($endorsement_security_deposit)
    {
        $this->container['endorsement_security_deposit'] = $endorsement_security_deposit;

        return $this;
    }

    /**
     * Gets endorsers_per_block
     *
     * @return float
     */
    public function getEndorsersPerBlock()
    {
        return $this->container['endorsers_per_block'];
    }

    /**
     * Sets endorsers_per_block
     *
     * @param float $endorsers_per_block endorsers_per_block
     *
     * @return self
     */
    public function setEndorsersPerBlock($endorsers_per_block)
    {
        $this->container['endorsers_per_block'] = $endorsers_per_block;

        return $this;
    }

    /**
     * Gets hard_gas_limit_per_block
     *
     * @return float
     */
    public function getHardGasLimitPerBlock()
    {
        return $this->container['hard_gas_limit_per_block'];
    }

    /**
     * Sets hard_gas_limit_per_block
     *
     * @param float $hard_gas_limit_per_block hard_gas_limit_per_block
     *
     * @return self
     */
    public function setHardGasLimitPerBlock($hard_gas_limit_per_block)
    {
        $this->container['hard_gas_limit_per_block'] = $hard_gas_limit_per_block;

        return $this;
    }

    /**
     * Gets hard_gas_limit_per_operation
     *
     * @return float
     */
    public function getHardGasLimitPerOperation()
    {
        return $this->container['hard_gas_limit_per_operation'];
    }

    /**
     * Sets hard_gas_limit_per_operation
     *
     * @param float $hard_gas_limit_per_operation hard_gas_limit_per_operation
     *
     * @return self
     */
    public function setHardGasLimitPerOperation($hard_gas_limit_per_operation)
    {
        $this->container['hard_gas_limit_per_operation'] = $hard_gas_limit_per_operation;

        return $this;
    }

    /**
     * Gets hard_storage_limit_per_operation
     *
     * @return float
     */
    public function getHardStorageLimitPerOperation()
    {
        return $this->container['hard_storage_limit_per_operation'];
    }

    /**
     * Sets hard_storage_limit_per_operation
     *
     * @param float $hard_storage_limit_per_operation hard_storage_limit_per_operation
     *
     * @return self
     */
    public function setHardStorageLimitPerOperation($hard_storage_limit_per_operation)
    {
        $this->container['hard_storage_limit_per_operation'] = $hard_storage_limit_per_operation;

        return $this;
    }

    /**
     * Gets max_operation_data_length
     *
     * @return float
     */
    public function getMaxOperationDataLength()
    {
        return $this->container['max_operation_data_length'];
    }

    /**
     * Sets max_operation_data_length
     *
     * @param float $max_operation_data_length max_operation_data_length
     *
     * @return self
     */
    public function setMaxOperationDataLength($max_operation_data_length)
    {
        $this->container['max_operation_data_length'] = $max_operation_data_length;

        return $this;
    }

    /**
     * Gets max_proposals_per_delegate
     *
     * @return float
     */
    public function getMaxProposalsPerDelegate()
    {
        return $this->container['max_proposals_per_delegate'];
    }

    /**
     * Sets max_proposals_per_delegate
     *
     * @param float $max_proposals_per_delegate max_proposals_per_delegate
     *
     * @return self
     */
    public function setMaxProposalsPerDelegate($max_proposals_per_delegate)
    {
        $this->container['max_proposals_per_delegate'] = $max_proposals_per_delegate;

        return $this;
    }

    /**
     * Gets max_revelations_per_block
     *
     * @return float
     */
    public function getMaxRevelationsPerBlock()
    {
        return $this->container['max_revelations_per_block'];
    }

    /**
     * Sets max_revelations_per_block
     *
     * @param float $max_revelations_per_block max_revelations_per_block
     *
     * @return self
     */
    public function setMaxRevelationsPerBlock($max_revelations_per_block)
    {
        $this->container['max_revelations_per_block'] = $max_revelations_per_block;

        return $this;
    }

    /**
     * Gets michelson_maximum_type_size
     *
     * @return float
     */
    public function getMichelsonMaximumTypeSize()
    {
        return $this->container['michelson_maximum_type_size'];
    }

    /**
     * Sets michelson_maximum_type_size
     *
     * @param float $michelson_maximum_type_size michelson_maximum_type_size
     *
     * @return self
     */
    public function setMichelsonMaximumTypeSize($michelson_maximum_type_size)
    {
        $this->container['michelson_maximum_type_size'] = $michelson_maximum_type_size;

        return $this;
    }

    /**
     * Gets nonce_length
     *
     * @return float
     */
    public function getNonceLength()
    {
        return $this->container['nonce_length'];
    }

    /**
     * Sets nonce_length
     *
     * @param float $nonce_length nonce_length
     *
     * @return self
     */
    public function setNonceLength($nonce_length)
    {
        $this->container['nonce_length'] = $nonce_length;

        return $this;
    }

    /**
     * Gets origination_burn
     *
     * @return float
     */
    public function getOriginationBurn()
    {
        return $this->container['origination_burn'];
    }

    /**
     * Sets origination_burn
     *
     * @param float $origination_burn origination_burn
     *
     * @return self
     */
    public function setOriginationBurn($origination_burn)
    {
        $this->container['origination_burn'] = $origination_burn;

        return $this;
    }

    /**
     * Gets origination_size
     *
     * @return float
     */
    public function getOriginationSize()
    {
        return $this->container['origination_size'];
    }

    /**
     * Sets origination_size
     *
     * @param float $origination_size origination_size
     *
     * @return self
     */
    public function setOriginationSize($origination_size)
    {
        $this->container['origination_size'] = $origination_size;

        return $this;
    }

    /**
     * Gets preserved_cycles
     *
     * @return float
     */
    public function getPreservedCycles()
    {
        return $this->container['preserved_cycles'];
    }

    /**
     * Sets preserved_cycles
     *
     * @param float $preserved_cycles preserved_cycles
     *
     * @return self
     */
    public function setPreservedCycles($preserved_cycles)
    {
        $this->container['preserved_cycles'] = $preserved_cycles;

        return $this;
    }

    /**
     * Gets proof_of_work_nonce_size
     *
     * @return float
     */
    public function getProofOfWorkNonceSize()
    {
        return $this->container['proof_of_work_nonce_size'];
    }

    /**
     * Sets proof_of_work_nonce_size
     *
     * @param float $proof_of_work_nonce_size proof_of_work_nonce_size
     *
     * @return self
     */
    public function setProofOfWorkNonceSize($proof_of_work_nonce_size)
    {
        $this->container['proof_of_work_nonce_size'] = $proof_of_work_nonce_size;

        return $this;
    }

    /**
     * Gets proof_of_work_threshold
     *
     * @return float
     */
    public function getProofOfWorkThreshold()
    {
        return $this->container['proof_of_work_threshold'];
    }

    /**
     * Sets proof_of_work_threshold
     *
     * @param float $proof_of_work_threshold proof_of_work_threshold
     *
     * @return self
     */
    public function setProofOfWorkThreshold($proof_of_work_threshold)
    {
        $this->container['proof_of_work_threshold'] = $proof_of_work_threshold;

        return $this;
    }

    /**
     * Gets seed_nonce_revelation_tip
     *
     * @return float
     */
    public function getSeedNonceRevelationTip()
    {
        return $this->container['seed_nonce_revelation_tip'];
    }

    /**
     * Sets seed_nonce_revelation_tip
     *
     * @param float $seed_nonce_revelation_tip seed_nonce_revelation_tip
     *
     * @return self
     */
    public function setSeedNonceRevelationTip($seed_nonce_revelation_tip)
    {
        $this->container['seed_nonce_revelation_tip'] = $seed_nonce_revelation_tip;

        return $this;
    }

    /**
     * Gets time_between_blocks
     *
     * @return mixed[]
     */
    public function getTimeBetweenBlocks()
    {
        return $this->container['time_between_blocks'];
    }

    /**
     * Sets time_between_blocks
     *
     * @param mixed[] $time_between_blocks time_between_blocks
     *
     * @return self
     */
    public function setTimeBetweenBlocks($time_between_blocks)
    {
        $this->container['time_between_blocks'] = $time_between_blocks;

        return $this;
    }

    /**
     * Gets tokens_per_roll
     *
     * @return float
     */
    public function getTokensPerRoll()
    {
        return $this->container['tokens_per_roll'];
    }

    /**
     * Sets tokens_per_roll
     *
     * @param float $tokens_per_roll tokens_per_roll
     *
     * @return self
     */
    public function setTokensPerRoll($tokens_per_roll)
    {
        $this->container['tokens_per_roll'] = $tokens_per_roll;

        return $this;
    }

    /**
     * Gets test_chain_duration
     *
     * @return float
     */
    public function getTestChainDuration()
    {
        return $this->container['test_chain_duration'];
    }

    /**
     * Sets test_chain_duration
     *
     * @param float $test_chain_duration test_chain_duration
     *
     * @return self
     */
    public function setTestChainDuration($test_chain_duration)
    {
        $this->container['test_chain_duration'] = $test_chain_duration;

        return $this;
    }

    /**
     * Gets min_proposal_quorum
     *
     * @return float
     */
    public function getMinProposalQuorum()
    {
        return $this->container['min_proposal_quorum'];
    }

    /**
     * Sets min_proposal_quorum
     *
     * @param float $min_proposal_quorum min_proposal_quorum
     *
     * @return self
     */
    public function setMinProposalQuorum($min_proposal_quorum)
    {
        $this->container['min_proposal_quorum'] = $min_proposal_quorum;

        return $this;
    }

    /**
     * Gets quorum_min
     *
     * @return float
     */
    public function getQuorumMin()
    {
        return $this->container['quorum_min'];
    }

    /**
     * Sets quorum_min
     *
     * @param float $quorum_min quorum_min
     *
     * @return self
     */
    public function setQuorumMin($quorum_min)
    {
        $this->container['quorum_min'] = $quorum_min;

        return $this;
    }

    /**
     * Gets quorum_max
     *
     * @return float
     */
    public function getQuorumMax()
    {
        return $this->container['quorum_max'];
    }

    /**
     * Sets quorum_max
     *
     * @param float $quorum_max quorum_max
     *
     * @return self
     */
    public function setQuorumMax($quorum_max)
    {
        $this->container['quorum_max'] = $quorum_max;

        return $this;
    }

    /**
     * Gets block_rewards_v6
     *
     * @return mixed[]
     */
    public function getBlockRewardsV6()
    {
        return $this->container['block_rewards_v6'];
    }

    /**
     * Sets block_rewards_v6
     *
     * @param mixed[] $block_rewards_v6 block_rewards_v6
     *
     * @return self
     */
    public function setBlockRewardsV6($block_rewards_v6)
    {
        $this->container['block_rewards_v6'] = $block_rewards_v6;

        return $this;
    }

    /**
     * Gets endorsement_rewards_v6
     *
     * @return mixed[]
     */
    public function getEndorsementRewardsV6()
    {
        return $this->container['endorsement_rewards_v6'];
    }

    /**
     * Sets endorsement_rewards_v6
     *
     * @param mixed[] $endorsement_rewards_v6 endorsement_rewards_v6
     *
     * @return self
     */
    public function setEndorsementRewardsV6($endorsement_rewards_v6)
    {
        $this->container['endorsement_rewards_v6'] = $endorsement_rewards_v6;

        return $this;
    }

    /**
     * Gets max_anon_ops_per_block
     *
     * @return float
     */
    public function getMaxAnonOpsPerBlock()
    {
        return $this->container['max_anon_ops_per_block'];
    }

    /**
     * Sets max_anon_ops_per_block
     *
     * @param float $max_anon_ops_per_block max_anon_ops_per_block
     *
     * @return self
     */
    public function setMaxAnonOpsPerBlock($max_anon_ops_per_block)
    {
        $this->container['max_anon_ops_per_block'] = $max_anon_ops_per_block;

        return $this;
    }

    /**
     * Gets liquidity_baking_escape_ema_threshold
     *
     * @return float
     */
    public function getLiquidityBakingEscapeEmaThreshold()
    {
        return $this->container['liquidity_baking_escape_ema_threshold'];
    }

    /**
     * Sets liquidity_baking_escape_ema_threshold
     *
     * @param float $liquidity_baking_escape_ema_threshold liquidity_baking_escape_ema_threshold
     *
     * @return self
     */
    public function setLiquidityBakingEscapeEmaThreshold($liquidity_baking_escape_ema_threshold)
    {
        $this->container['liquidity_baking_escape_ema_threshold'] = $liquidity_baking_escape_ema_threshold;

        return $this;
    }

    /**
     * Gets liquidity_baking_subsidy
     *
     * @return float
     */
    public function getLiquidityBakingSubsidy()
    {
        return $this->container['liquidity_baking_subsidy'];
    }

    /**
     * Sets liquidity_baking_subsidy
     *
     * @param float $liquidity_baking_subsidy liquidity_baking_subsidy
     *
     * @return self
     */
    public function setLiquidityBakingSubsidy($liquidity_baking_subsidy)
    {
        $this->container['liquidity_baking_subsidy'] = $liquidity_baking_subsidy;

        return $this;
    }

    /**
     * Gets liquidity_baking_sunset_level
     *
     * @return float
     */
    public function getLiquidityBakingSunsetLevel()
    {
        return $this->container['liquidity_baking_sunset_level'];
    }

    /**
     * Sets liquidity_baking_sunset_level
     *
     * @param float $liquidity_baking_sunset_level liquidity_baking_sunset_level
     *
     * @return self
     */
    public function setLiquidityBakingSunsetLevel($liquidity_baking_sunset_level)
    {
        $this->container['liquidity_baking_sunset_level'] = $liquidity_baking_sunset_level;

        return $this;
    }

    /**
     * Gets minimal_block_delay
     *
     * @return float
     */
    public function getMinimalBlockDelay()
    {
        return $this->container['minimal_block_delay'];
    }

    /**
     * Sets minimal_block_delay
     *
     * @param float $minimal_block_delay minimal_block_delay
     *
     * @return self
     */
    public function setMinimalBlockDelay($minimal_block_delay)
    {
        $this->container['minimal_block_delay'] = $minimal_block_delay;

        return $this;
    }

    /**
     * Gets num_voting_periods
     *
     * @return float
     */
    public function getNumVotingPeriods()
    {
        return $this->container['num_voting_periods'];
    }

    /**
     * Sets num_voting_periods
     *
     * @param float $num_voting_periods num_voting_periods
     *
     * @return self
     */
    public function setNumVotingPeriods($num_voting_periods)
    {
        $this->container['num_voting_periods'] = $num_voting_periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


