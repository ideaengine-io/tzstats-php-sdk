<?php
/**
 * InlineResponse2006
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzStats API - PHP SDK
 *
 * API for TZstats.com, useful for viewing information about the Tezos blockchain.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@ideaengine.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2006 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2006 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_6';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hash' => 'string',
        'predecessor' => 'string',
        'successor' => 'string',
        'baker' => 'string',
        'height' => 'float',
        'cycle' => 'float',
        'is_cycle_snapshot' => 'bool',
        'time' => 'string',
        'solvetime' => 'float',
        'version' => 'float',
        'validation_pass' => 'float',
        'fitness' => 'float',
        'priority' => 'float',
        'nonce' => 'string',
        'voting_period_kind' => 'string',
        'slot_mask' => 'string',
        'n_endorsed_slots' => 'float',
        'n_ops' => 'float',
        'n_ops_failed' => 'float',
        'n_ops_contract' => 'float',
        'n_contract_calls' => 'float',
        'n_tx' => 'float',
        'n_activation' => 'float',
        'n_seed_nonce_revelations' => 'float',
        'n_double_baking_evidences' => 'float',
        'n_double_endorsement_evidences' => 'float',
        'n_endorsement' => 'float',
        'n_delegation' => 'float',
        'n_reveal' => 'float',
        'n_origination' => 'float',
        'n_proposal' => 'float',
        'n_ballot' => 'float',
        'n_register_constant' => 'float',
        'volume' => 'float',
        'fee' => 'float',
        'reward' => 'float',
        'deposit' => 'float',
        'unfrozen_fees' => 'float',
        'unfrozen_rewards' => 'float',
        'unfrozen_deposits' => 'float',
        'activated_supply' => 'float',
        'burned_supply' => 'float',
        'n_accounts' => 'float',
        'n_new_accounts' => 'float',
        'n_new_contracts' => 'float',
        'n_cleared_accounts' => 'float',
        'n_funded_accounts' => 'float',
        'gas_limit' => 'float',
        'gas_used' => 'float',
        'gas_price' => 'float',
        'storage_size' => 'float',
        'days_destroyed' => 'float',
        'pct_account_reuse' => 'float',
        'n_ops_implicit' => 'float',
        'lb_esc_vote' => 'bool',
        'lb_esc_ema' => 'float',
        'protocol' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hash' => null,
        'predecessor' => null,
        'successor' => null,
        'baker' => null,
        'height' => null,
        'cycle' => null,
        'is_cycle_snapshot' => null,
        'time' => null,
        'solvetime' => null,
        'version' => null,
        'validation_pass' => null,
        'fitness' => null,
        'priority' => null,
        'nonce' => null,
        'voting_period_kind' => null,
        'slot_mask' => null,
        'n_endorsed_slots' => null,
        'n_ops' => null,
        'n_ops_failed' => null,
        'n_ops_contract' => null,
        'n_contract_calls' => null,
        'n_tx' => null,
        'n_activation' => null,
        'n_seed_nonce_revelations' => null,
        'n_double_baking_evidences' => null,
        'n_double_endorsement_evidences' => null,
        'n_endorsement' => null,
        'n_delegation' => null,
        'n_reveal' => null,
        'n_origination' => null,
        'n_proposal' => null,
        'n_ballot' => null,
        'n_register_constant' => null,
        'volume' => null,
        'fee' => null,
        'reward' => null,
        'deposit' => null,
        'unfrozen_fees' => null,
        'unfrozen_rewards' => null,
        'unfrozen_deposits' => null,
        'activated_supply' => null,
        'burned_supply' => null,
        'n_accounts' => null,
        'n_new_accounts' => null,
        'n_new_contracts' => null,
        'n_cleared_accounts' => null,
        'n_funded_accounts' => null,
        'gas_limit' => null,
        'gas_used' => null,
        'gas_price' => null,
        'storage_size' => null,
        'days_destroyed' => null,
        'pct_account_reuse' => null,
        'n_ops_implicit' => null,
        'lb_esc_vote' => null,
        'lb_esc_ema' => null,
        'protocol' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
        'predecessor' => 'predecessor',
        'successor' => 'successor',
        'baker' => 'baker',
        'height' => 'height',
        'cycle' => 'cycle',
        'is_cycle_snapshot' => 'is_cycle_snapshot',
        'time' => 'time',
        'solvetime' => 'solvetime',
        'version' => 'version',
        'validation_pass' => 'validation_pass',
        'fitness' => 'fitness',
        'priority' => 'priority',
        'nonce' => 'nonce',
        'voting_period_kind' => 'voting_period_kind',
        'slot_mask' => 'slot_mask',
        'n_endorsed_slots' => 'n_endorsed_slots',
        'n_ops' => 'n_ops',
        'n_ops_failed' => 'n_ops_failed',
        'n_ops_contract' => 'n_ops_contract',
        'n_contract_calls' => 'n_contract_calls',
        'n_tx' => 'n_tx',
        'n_activation' => 'n_activation',
        'n_seed_nonce_revelations' => 'n_seed_nonce_revelations',
        'n_double_baking_evidences' => 'n_double_baking_evidences',
        'n_double_endorsement_evidences' => 'n_double_endorsement_evidences',
        'n_endorsement' => 'n_endorsement',
        'n_delegation' => 'n_delegation',
        'n_reveal' => 'n_reveal',
        'n_origination' => 'n_origination',
        'n_proposal' => 'n_proposal',
        'n_ballot' => 'n_ballot',
        'n_register_constant' => 'n_register_constant',
        'volume' => 'volume',
        'fee' => 'fee',
        'reward' => 'reward',
        'deposit' => 'deposit',
        'unfrozen_fees' => 'unfrozen_fees',
        'unfrozen_rewards' => 'unfrozen_rewards',
        'unfrozen_deposits' => 'unfrozen_deposits',
        'activated_supply' => 'activated_supply',
        'burned_supply' => 'burned_supply',
        'n_accounts' => 'n_accounts',
        'n_new_accounts' => 'n_new_accounts',
        'n_new_contracts' => 'n_new_contracts',
        'n_cleared_accounts' => 'n_cleared_accounts',
        'n_funded_accounts' => 'n_funded_accounts',
        'gas_limit' => 'gas_limit',
        'gas_used' => 'gas_used',
        'gas_price' => 'gas_price',
        'storage_size' => 'storage_size',
        'days_destroyed' => 'days_destroyed',
        'pct_account_reuse' => 'pct_account_reuse',
        'n_ops_implicit' => 'n_ops_implicit',
        'lb_esc_vote' => 'lb_esc_vote',
        'lb_esc_ema' => 'lb_esc_ema',
        'protocol' => 'protocol'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
        'predecessor' => 'setPredecessor',
        'successor' => 'setSuccessor',
        'baker' => 'setBaker',
        'height' => 'setHeight',
        'cycle' => 'setCycle',
        'is_cycle_snapshot' => 'setIsCycleSnapshot',
        'time' => 'setTime',
        'solvetime' => 'setSolvetime',
        'version' => 'setVersion',
        'validation_pass' => 'setValidationPass',
        'fitness' => 'setFitness',
        'priority' => 'setPriority',
        'nonce' => 'setNonce',
        'voting_period_kind' => 'setVotingPeriodKind',
        'slot_mask' => 'setSlotMask',
        'n_endorsed_slots' => 'setNEndorsedSlots',
        'n_ops' => 'setNOps',
        'n_ops_failed' => 'setNOpsFailed',
        'n_ops_contract' => 'setNOpsContract',
        'n_contract_calls' => 'setNContractCalls',
        'n_tx' => 'setNTx',
        'n_activation' => 'setNActivation',
        'n_seed_nonce_revelations' => 'setNSeedNonceRevelations',
        'n_double_baking_evidences' => 'setNDoubleBakingEvidences',
        'n_double_endorsement_evidences' => 'setNDoubleEndorsementEvidences',
        'n_endorsement' => 'setNEndorsement',
        'n_delegation' => 'setNDelegation',
        'n_reveal' => 'setNReveal',
        'n_origination' => 'setNOrigination',
        'n_proposal' => 'setNProposal',
        'n_ballot' => 'setNBallot',
        'n_register_constant' => 'setNRegisterConstant',
        'volume' => 'setVolume',
        'fee' => 'setFee',
        'reward' => 'setReward',
        'deposit' => 'setDeposit',
        'unfrozen_fees' => 'setUnfrozenFees',
        'unfrozen_rewards' => 'setUnfrozenRewards',
        'unfrozen_deposits' => 'setUnfrozenDeposits',
        'activated_supply' => 'setActivatedSupply',
        'burned_supply' => 'setBurnedSupply',
        'n_accounts' => 'setNAccounts',
        'n_new_accounts' => 'setNNewAccounts',
        'n_new_contracts' => 'setNNewContracts',
        'n_cleared_accounts' => 'setNClearedAccounts',
        'n_funded_accounts' => 'setNFundedAccounts',
        'gas_limit' => 'setGasLimit',
        'gas_used' => 'setGasUsed',
        'gas_price' => 'setGasPrice',
        'storage_size' => 'setStorageSize',
        'days_destroyed' => 'setDaysDestroyed',
        'pct_account_reuse' => 'setPctAccountReuse',
        'n_ops_implicit' => 'setNOpsImplicit',
        'lb_esc_vote' => 'setLbEscVote',
        'lb_esc_ema' => 'setLbEscEma',
        'protocol' => 'setProtocol'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
        'predecessor' => 'getPredecessor',
        'successor' => 'getSuccessor',
        'baker' => 'getBaker',
        'height' => 'getHeight',
        'cycle' => 'getCycle',
        'is_cycle_snapshot' => 'getIsCycleSnapshot',
        'time' => 'getTime',
        'solvetime' => 'getSolvetime',
        'version' => 'getVersion',
        'validation_pass' => 'getValidationPass',
        'fitness' => 'getFitness',
        'priority' => 'getPriority',
        'nonce' => 'getNonce',
        'voting_period_kind' => 'getVotingPeriodKind',
        'slot_mask' => 'getSlotMask',
        'n_endorsed_slots' => 'getNEndorsedSlots',
        'n_ops' => 'getNOps',
        'n_ops_failed' => 'getNOpsFailed',
        'n_ops_contract' => 'getNOpsContract',
        'n_contract_calls' => 'getNContractCalls',
        'n_tx' => 'getNTx',
        'n_activation' => 'getNActivation',
        'n_seed_nonce_revelations' => 'getNSeedNonceRevelations',
        'n_double_baking_evidences' => 'getNDoubleBakingEvidences',
        'n_double_endorsement_evidences' => 'getNDoubleEndorsementEvidences',
        'n_endorsement' => 'getNEndorsement',
        'n_delegation' => 'getNDelegation',
        'n_reveal' => 'getNReveal',
        'n_origination' => 'getNOrigination',
        'n_proposal' => 'getNProposal',
        'n_ballot' => 'getNBallot',
        'n_register_constant' => 'getNRegisterConstant',
        'volume' => 'getVolume',
        'fee' => 'getFee',
        'reward' => 'getReward',
        'deposit' => 'getDeposit',
        'unfrozen_fees' => 'getUnfrozenFees',
        'unfrozen_rewards' => 'getUnfrozenRewards',
        'unfrozen_deposits' => 'getUnfrozenDeposits',
        'activated_supply' => 'getActivatedSupply',
        'burned_supply' => 'getBurnedSupply',
        'n_accounts' => 'getNAccounts',
        'n_new_accounts' => 'getNNewAccounts',
        'n_new_contracts' => 'getNNewContracts',
        'n_cleared_accounts' => 'getNClearedAccounts',
        'n_funded_accounts' => 'getNFundedAccounts',
        'gas_limit' => 'getGasLimit',
        'gas_used' => 'getGasUsed',
        'gas_price' => 'getGasPrice',
        'storage_size' => 'getStorageSize',
        'days_destroyed' => 'getDaysDestroyed',
        'pct_account_reuse' => 'getPctAccountReuse',
        'n_ops_implicit' => 'getNOpsImplicit',
        'lb_esc_vote' => 'getLbEscVote',
        'lb_esc_ema' => 'getLbEscEma',
        'protocol' => 'getProtocol'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['predecessor'] = $data['predecessor'] ?? null;
        $this->container['successor'] = $data['successor'] ?? null;
        $this->container['baker'] = $data['baker'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['is_cycle_snapshot'] = $data['is_cycle_snapshot'] ?? null;
        $this->container['time'] = $data['time'] ?? null;
        $this->container['solvetime'] = $data['solvetime'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['validation_pass'] = $data['validation_pass'] ?? null;
        $this->container['fitness'] = $data['fitness'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['nonce'] = $data['nonce'] ?? null;
        $this->container['voting_period_kind'] = $data['voting_period_kind'] ?? null;
        $this->container['slot_mask'] = $data['slot_mask'] ?? null;
        $this->container['n_endorsed_slots'] = $data['n_endorsed_slots'] ?? null;
        $this->container['n_ops'] = $data['n_ops'] ?? null;
        $this->container['n_ops_failed'] = $data['n_ops_failed'] ?? null;
        $this->container['n_ops_contract'] = $data['n_ops_contract'] ?? null;
        $this->container['n_contract_calls'] = $data['n_contract_calls'] ?? null;
        $this->container['n_tx'] = $data['n_tx'] ?? null;
        $this->container['n_activation'] = $data['n_activation'] ?? null;
        $this->container['n_seed_nonce_revelations'] = $data['n_seed_nonce_revelations'] ?? null;
        $this->container['n_double_baking_evidences'] = $data['n_double_baking_evidences'] ?? null;
        $this->container['n_double_endorsement_evidences'] = $data['n_double_endorsement_evidences'] ?? null;
        $this->container['n_endorsement'] = $data['n_endorsement'] ?? null;
        $this->container['n_delegation'] = $data['n_delegation'] ?? null;
        $this->container['n_reveal'] = $data['n_reveal'] ?? null;
        $this->container['n_origination'] = $data['n_origination'] ?? null;
        $this->container['n_proposal'] = $data['n_proposal'] ?? null;
        $this->container['n_ballot'] = $data['n_ballot'] ?? null;
        $this->container['n_register_constant'] = $data['n_register_constant'] ?? null;
        $this->container['volume'] = $data['volume'] ?? null;
        $this->container['fee'] = $data['fee'] ?? null;
        $this->container['reward'] = $data['reward'] ?? null;
        $this->container['deposit'] = $data['deposit'] ?? null;
        $this->container['unfrozen_fees'] = $data['unfrozen_fees'] ?? null;
        $this->container['unfrozen_rewards'] = $data['unfrozen_rewards'] ?? null;
        $this->container['unfrozen_deposits'] = $data['unfrozen_deposits'] ?? null;
        $this->container['activated_supply'] = $data['activated_supply'] ?? null;
        $this->container['burned_supply'] = $data['burned_supply'] ?? null;
        $this->container['n_accounts'] = $data['n_accounts'] ?? null;
        $this->container['n_new_accounts'] = $data['n_new_accounts'] ?? null;
        $this->container['n_new_contracts'] = $data['n_new_contracts'] ?? null;
        $this->container['n_cleared_accounts'] = $data['n_cleared_accounts'] ?? null;
        $this->container['n_funded_accounts'] = $data['n_funded_accounts'] ?? null;
        $this->container['gas_limit'] = $data['gas_limit'] ?? null;
        $this->container['gas_used'] = $data['gas_used'] ?? null;
        $this->container['gas_price'] = $data['gas_price'] ?? null;
        $this->container['storage_size'] = $data['storage_size'] ?? null;
        $this->container['days_destroyed'] = $data['days_destroyed'] ?? null;
        $this->container['pct_account_reuse'] = $data['pct_account_reuse'] ?? null;
        $this->container['n_ops_implicit'] = $data['n_ops_implicit'] ?? null;
        $this->container['lb_esc_vote'] = $data['lb_esc_vote'] ?? null;
        $this->container['lb_esc_ema'] = $data['lb_esc_ema'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ((mb_strlen($this->container['hash']) < 1)) {
            $invalidProperties[] = "invalid value for 'hash', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['predecessor'] === null) {
            $invalidProperties[] = "'predecessor' can't be null";
        }
        if ((mb_strlen($this->container['predecessor']) < 1)) {
            $invalidProperties[] = "invalid value for 'predecessor', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['successor'] === null) {
            $invalidProperties[] = "'successor' can't be null";
        }
        if ($this->container['baker'] === null) {
            $invalidProperties[] = "'baker' can't be null";
        }
        if ((mb_strlen($this->container['baker']) < 1)) {
            $invalidProperties[] = "invalid value for 'baker', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['cycle'] === null) {
            $invalidProperties[] = "'cycle' can't be null";
        }
        if ($this->container['is_cycle_snapshot'] === null) {
            $invalidProperties[] = "'is_cycle_snapshot' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ((mb_strlen($this->container['time']) < 1)) {
            $invalidProperties[] = "invalid value for 'time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['solvetime'] === null) {
            $invalidProperties[] = "'solvetime' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['validation_pass'] === null) {
            $invalidProperties[] = "'validation_pass' can't be null";
        }
        if ($this->container['fitness'] === null) {
            $invalidProperties[] = "'fitness' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if ((mb_strlen($this->container['nonce']) < 1)) {
            $invalidProperties[] = "invalid value for 'nonce', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['voting_period_kind'] === null) {
            $invalidProperties[] = "'voting_period_kind' can't be null";
        }
        if ((mb_strlen($this->container['voting_period_kind']) < 1)) {
            $invalidProperties[] = "invalid value for 'voting_period_kind', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['slot_mask'] === null) {
            $invalidProperties[] = "'slot_mask' can't be null";
        }
        if ((mb_strlen($this->container['slot_mask']) < 1)) {
            $invalidProperties[] = "invalid value for 'slot_mask', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['n_endorsed_slots'] === null) {
            $invalidProperties[] = "'n_endorsed_slots' can't be null";
        }
        if ($this->container['n_ops'] === null) {
            $invalidProperties[] = "'n_ops' can't be null";
        }
        if ($this->container['n_ops_failed'] === null) {
            $invalidProperties[] = "'n_ops_failed' can't be null";
        }
        if ($this->container['n_ops_contract'] === null) {
            $invalidProperties[] = "'n_ops_contract' can't be null";
        }
        if ($this->container['n_contract_calls'] === null) {
            $invalidProperties[] = "'n_contract_calls' can't be null";
        }
        if ($this->container['n_tx'] === null) {
            $invalidProperties[] = "'n_tx' can't be null";
        }
        if ($this->container['n_activation'] === null) {
            $invalidProperties[] = "'n_activation' can't be null";
        }
        if ($this->container['n_seed_nonce_revelations'] === null) {
            $invalidProperties[] = "'n_seed_nonce_revelations' can't be null";
        }
        if ($this->container['n_double_baking_evidences'] === null) {
            $invalidProperties[] = "'n_double_baking_evidences' can't be null";
        }
        if ($this->container['n_double_endorsement_evidences'] === null) {
            $invalidProperties[] = "'n_double_endorsement_evidences' can't be null";
        }
        if ($this->container['n_endorsement'] === null) {
            $invalidProperties[] = "'n_endorsement' can't be null";
        }
        if ($this->container['n_delegation'] === null) {
            $invalidProperties[] = "'n_delegation' can't be null";
        }
        if ($this->container['n_reveal'] === null) {
            $invalidProperties[] = "'n_reveal' can't be null";
        }
        if ($this->container['n_origination'] === null) {
            $invalidProperties[] = "'n_origination' can't be null";
        }
        if ($this->container['n_proposal'] === null) {
            $invalidProperties[] = "'n_proposal' can't be null";
        }
        if ($this->container['n_ballot'] === null) {
            $invalidProperties[] = "'n_ballot' can't be null";
        }
        if ($this->container['n_register_constant'] === null) {
            $invalidProperties[] = "'n_register_constant' can't be null";
        }
        if ($this->container['volume'] === null) {
            $invalidProperties[] = "'volume' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['reward'] === null) {
            $invalidProperties[] = "'reward' can't be null";
        }
        if ($this->container['deposit'] === null) {
            $invalidProperties[] = "'deposit' can't be null";
        }
        if ($this->container['unfrozen_fees'] === null) {
            $invalidProperties[] = "'unfrozen_fees' can't be null";
        }
        if ($this->container['unfrozen_rewards'] === null) {
            $invalidProperties[] = "'unfrozen_rewards' can't be null";
        }
        if ($this->container['unfrozen_deposits'] === null) {
            $invalidProperties[] = "'unfrozen_deposits' can't be null";
        }
        if ($this->container['activated_supply'] === null) {
            $invalidProperties[] = "'activated_supply' can't be null";
        }
        if ($this->container['burned_supply'] === null) {
            $invalidProperties[] = "'burned_supply' can't be null";
        }
        if ($this->container['n_accounts'] === null) {
            $invalidProperties[] = "'n_accounts' can't be null";
        }
        if ($this->container['n_new_accounts'] === null) {
            $invalidProperties[] = "'n_new_accounts' can't be null";
        }
        if ($this->container['n_new_contracts'] === null) {
            $invalidProperties[] = "'n_new_contracts' can't be null";
        }
        if ($this->container['n_cleared_accounts'] === null) {
            $invalidProperties[] = "'n_cleared_accounts' can't be null";
        }
        if ($this->container['n_funded_accounts'] === null) {
            $invalidProperties[] = "'n_funded_accounts' can't be null";
        }
        if ($this->container['gas_limit'] === null) {
            $invalidProperties[] = "'gas_limit' can't be null";
        }
        if ($this->container['gas_used'] === null) {
            $invalidProperties[] = "'gas_used' can't be null";
        }
        if ($this->container['gas_price'] === null) {
            $invalidProperties[] = "'gas_price' can't be null";
        }
        if ($this->container['storage_size'] === null) {
            $invalidProperties[] = "'storage_size' can't be null";
        }
        if ($this->container['days_destroyed'] === null) {
            $invalidProperties[] = "'days_destroyed' can't be null";
        }
        if ($this->container['pct_account_reuse'] === null) {
            $invalidProperties[] = "'pct_account_reuse' can't be null";
        }
        if ($this->container['n_ops_implicit'] === null) {
            $invalidProperties[] = "'n_ops_implicit' can't be null";
        }
        if ($this->container['lb_esc_vote'] === null) {
            $invalidProperties[] = "'lb_esc_vote' can't be null";
        }
        if ($this->container['lb_esc_ema'] === null) {
            $invalidProperties[] = "'lb_esc_ema' can't be null";
        }
        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        if ((mb_strlen($this->container['protocol']) < 1)) {
            $invalidProperties[] = "invalid value for 'protocol', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {

        if ((mb_strlen($hash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hash when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets predecessor
     *
     * @return string
     */
    public function getPredecessor()
    {
        return $this->container['predecessor'];
    }

    /**
     * Sets predecessor
     *
     * @param string $predecessor predecessor
     *
     * @return self
     */
    public function setPredecessor($predecessor)
    {

        if ((mb_strlen($predecessor) < 1)) {
            throw new \InvalidArgumentException('invalid length for $predecessor when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['predecessor'] = $predecessor;

        return $this;
    }

    /**
     * Gets successor
     *
     * @return string
     */
    public function getSuccessor()
    {
        return $this->container['successor'];
    }

    /**
     * Sets successor
     *
     * @param string $successor successor
     *
     * @return self
     */
    public function setSuccessor($successor)
    {
        $this->container['successor'] = $successor;

        return $this;
    }

    /**
     * Gets baker
     *
     * @return string
     */
    public function getBaker()
    {
        return $this->container['baker'];
    }

    /**
     * Sets baker
     *
     * @param string $baker baker
     *
     * @return self
     */
    public function setBaker($baker)
    {

        if ((mb_strlen($baker) < 1)) {
            throw new \InvalidArgumentException('invalid length for $baker when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['baker'] = $baker;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets cycle
     *
     * @return float
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param float $cycle cycle
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets is_cycle_snapshot
     *
     * @return bool
     */
    public function getIsCycleSnapshot()
    {
        return $this->container['is_cycle_snapshot'];
    }

    /**
     * Sets is_cycle_snapshot
     *
     * @param bool $is_cycle_snapshot is_cycle_snapshot
     *
     * @return self
     */
    public function setIsCycleSnapshot($is_cycle_snapshot)
    {
        $this->container['is_cycle_snapshot'] = $is_cycle_snapshot;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return self
     */
    public function setTime($time)
    {

        if ((mb_strlen($time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $time when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets solvetime
     *
     * @return float
     */
    public function getSolvetime()
    {
        return $this->container['solvetime'];
    }

    /**
     * Sets solvetime
     *
     * @param float $solvetime solvetime
     *
     * @return self
     */
    public function setSolvetime($solvetime)
    {
        $this->container['solvetime'] = $solvetime;

        return $this;
    }

    /**
     * Gets version
     *
     * @return float
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param float $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets validation_pass
     *
     * @return float
     */
    public function getValidationPass()
    {
        return $this->container['validation_pass'];
    }

    /**
     * Sets validation_pass
     *
     * @param float $validation_pass validation_pass
     *
     * @return self
     */
    public function setValidationPass($validation_pass)
    {
        $this->container['validation_pass'] = $validation_pass;

        return $this;
    }

    /**
     * Gets fitness
     *
     * @return float
     */
    public function getFitness()
    {
        return $this->container['fitness'];
    }

    /**
     * Sets fitness
     *
     * @param float $fitness fitness
     *
     * @return self
     */
    public function setFitness($fitness)
    {
        $this->container['fitness'] = $fitness;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return float
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param float $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce nonce
     *
     * @return self
     */
    public function setNonce($nonce)
    {

        if ((mb_strlen($nonce) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nonce when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets voting_period_kind
     *
     * @return string
     */
    public function getVotingPeriodKind()
    {
        return $this->container['voting_period_kind'];
    }

    /**
     * Sets voting_period_kind
     *
     * @param string $voting_period_kind voting_period_kind
     *
     * @return self
     */
    public function setVotingPeriodKind($voting_period_kind)
    {

        if ((mb_strlen($voting_period_kind) < 1)) {
            throw new \InvalidArgumentException('invalid length for $voting_period_kind when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['voting_period_kind'] = $voting_period_kind;

        return $this;
    }

    /**
     * Gets slot_mask
     *
     * @return string
     */
    public function getSlotMask()
    {
        return $this->container['slot_mask'];
    }

    /**
     * Sets slot_mask
     *
     * @param string $slot_mask slot_mask
     *
     * @return self
     */
    public function setSlotMask($slot_mask)
    {

        if ((mb_strlen($slot_mask) < 1)) {
            throw new \InvalidArgumentException('invalid length for $slot_mask when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['slot_mask'] = $slot_mask;

        return $this;
    }

    /**
     * Gets n_endorsed_slots
     *
     * @return float
     */
    public function getNEndorsedSlots()
    {
        return $this->container['n_endorsed_slots'];
    }

    /**
     * Sets n_endorsed_slots
     *
     * @param float $n_endorsed_slots n_endorsed_slots
     *
     * @return self
     */
    public function setNEndorsedSlots($n_endorsed_slots)
    {
        $this->container['n_endorsed_slots'] = $n_endorsed_slots;

        return $this;
    }

    /**
     * Gets n_ops
     *
     * @return float
     */
    public function getNOps()
    {
        return $this->container['n_ops'];
    }

    /**
     * Sets n_ops
     *
     * @param float $n_ops n_ops
     *
     * @return self
     */
    public function setNOps($n_ops)
    {
        $this->container['n_ops'] = $n_ops;

        return $this;
    }

    /**
     * Gets n_ops_failed
     *
     * @return float
     */
    public function getNOpsFailed()
    {
        return $this->container['n_ops_failed'];
    }

    /**
     * Sets n_ops_failed
     *
     * @param float $n_ops_failed n_ops_failed
     *
     * @return self
     */
    public function setNOpsFailed($n_ops_failed)
    {
        $this->container['n_ops_failed'] = $n_ops_failed;

        return $this;
    }

    /**
     * Gets n_ops_contract
     *
     * @return float
     */
    public function getNOpsContract()
    {
        return $this->container['n_ops_contract'];
    }

    /**
     * Sets n_ops_contract
     *
     * @param float $n_ops_contract n_ops_contract
     *
     * @return self
     */
    public function setNOpsContract($n_ops_contract)
    {
        $this->container['n_ops_contract'] = $n_ops_contract;

        return $this;
    }

    /**
     * Gets n_contract_calls
     *
     * @return float
     */
    public function getNContractCalls()
    {
        return $this->container['n_contract_calls'];
    }

    /**
     * Sets n_contract_calls
     *
     * @param float $n_contract_calls n_contract_calls
     *
     * @return self
     */
    public function setNContractCalls($n_contract_calls)
    {
        $this->container['n_contract_calls'] = $n_contract_calls;

        return $this;
    }

    /**
     * Gets n_tx
     *
     * @return float
     */
    public function getNTx()
    {
        return $this->container['n_tx'];
    }

    /**
     * Sets n_tx
     *
     * @param float $n_tx n_tx
     *
     * @return self
     */
    public function setNTx($n_tx)
    {
        $this->container['n_tx'] = $n_tx;

        return $this;
    }

    /**
     * Gets n_activation
     *
     * @return float
     */
    public function getNActivation()
    {
        return $this->container['n_activation'];
    }

    /**
     * Sets n_activation
     *
     * @param float $n_activation n_activation
     *
     * @return self
     */
    public function setNActivation($n_activation)
    {
        $this->container['n_activation'] = $n_activation;

        return $this;
    }

    /**
     * Gets n_seed_nonce_revelations
     *
     * @return float
     */
    public function getNSeedNonceRevelations()
    {
        return $this->container['n_seed_nonce_revelations'];
    }

    /**
     * Sets n_seed_nonce_revelations
     *
     * @param float $n_seed_nonce_revelations n_seed_nonce_revelations
     *
     * @return self
     */
    public function setNSeedNonceRevelations($n_seed_nonce_revelations)
    {
        $this->container['n_seed_nonce_revelations'] = $n_seed_nonce_revelations;

        return $this;
    }

    /**
     * Gets n_double_baking_evidences
     *
     * @return float
     */
    public function getNDoubleBakingEvidences()
    {
        return $this->container['n_double_baking_evidences'];
    }

    /**
     * Sets n_double_baking_evidences
     *
     * @param float $n_double_baking_evidences n_double_baking_evidences
     *
     * @return self
     */
    public function setNDoubleBakingEvidences($n_double_baking_evidences)
    {
        $this->container['n_double_baking_evidences'] = $n_double_baking_evidences;

        return $this;
    }

    /**
     * Gets n_double_endorsement_evidences
     *
     * @return float
     */
    public function getNDoubleEndorsementEvidences()
    {
        return $this->container['n_double_endorsement_evidences'];
    }

    /**
     * Sets n_double_endorsement_evidences
     *
     * @param float $n_double_endorsement_evidences n_double_endorsement_evidences
     *
     * @return self
     */
    public function setNDoubleEndorsementEvidences($n_double_endorsement_evidences)
    {
        $this->container['n_double_endorsement_evidences'] = $n_double_endorsement_evidences;

        return $this;
    }

    /**
     * Gets n_endorsement
     *
     * @return float
     */
    public function getNEndorsement()
    {
        return $this->container['n_endorsement'];
    }

    /**
     * Sets n_endorsement
     *
     * @param float $n_endorsement n_endorsement
     *
     * @return self
     */
    public function setNEndorsement($n_endorsement)
    {
        $this->container['n_endorsement'] = $n_endorsement;

        return $this;
    }

    /**
     * Gets n_delegation
     *
     * @return float
     */
    public function getNDelegation()
    {
        return $this->container['n_delegation'];
    }

    /**
     * Sets n_delegation
     *
     * @param float $n_delegation n_delegation
     *
     * @return self
     */
    public function setNDelegation($n_delegation)
    {
        $this->container['n_delegation'] = $n_delegation;

        return $this;
    }

    /**
     * Gets n_reveal
     *
     * @return float
     */
    public function getNReveal()
    {
        return $this->container['n_reveal'];
    }

    /**
     * Sets n_reveal
     *
     * @param float $n_reveal n_reveal
     *
     * @return self
     */
    public function setNReveal($n_reveal)
    {
        $this->container['n_reveal'] = $n_reveal;

        return $this;
    }

    /**
     * Gets n_origination
     *
     * @return float
     */
    public function getNOrigination()
    {
        return $this->container['n_origination'];
    }

    /**
     * Sets n_origination
     *
     * @param float $n_origination n_origination
     *
     * @return self
     */
    public function setNOrigination($n_origination)
    {
        $this->container['n_origination'] = $n_origination;

        return $this;
    }

    /**
     * Gets n_proposal
     *
     * @return float
     */
    public function getNProposal()
    {
        return $this->container['n_proposal'];
    }

    /**
     * Sets n_proposal
     *
     * @param float $n_proposal n_proposal
     *
     * @return self
     */
    public function setNProposal($n_proposal)
    {
        $this->container['n_proposal'] = $n_proposal;

        return $this;
    }

    /**
     * Gets n_ballot
     *
     * @return float
     */
    public function getNBallot()
    {
        return $this->container['n_ballot'];
    }

    /**
     * Sets n_ballot
     *
     * @param float $n_ballot n_ballot
     *
     * @return self
     */
    public function setNBallot($n_ballot)
    {
        $this->container['n_ballot'] = $n_ballot;

        return $this;
    }

    /**
     * Gets n_register_constant
     *
     * @return float
     */
    public function getNRegisterConstant()
    {
        return $this->container['n_register_constant'];
    }

    /**
     * Sets n_register_constant
     *
     * @param float $n_register_constant n_register_constant
     *
     * @return self
     */
    public function setNRegisterConstant($n_register_constant)
    {
        $this->container['n_register_constant'] = $n_register_constant;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return float
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param float $reward reward
     *
     * @return self
     */
    public function setReward($reward)
    {
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return float
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param float $deposit deposit
     *
     * @return self
     */
    public function setDeposit($deposit)
    {
        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets unfrozen_fees
     *
     * @return float
     */
    public function getUnfrozenFees()
    {
        return $this->container['unfrozen_fees'];
    }

    /**
     * Sets unfrozen_fees
     *
     * @param float $unfrozen_fees unfrozen_fees
     *
     * @return self
     */
    public function setUnfrozenFees($unfrozen_fees)
    {
        $this->container['unfrozen_fees'] = $unfrozen_fees;

        return $this;
    }

    /**
     * Gets unfrozen_rewards
     *
     * @return float
     */
    public function getUnfrozenRewards()
    {
        return $this->container['unfrozen_rewards'];
    }

    /**
     * Sets unfrozen_rewards
     *
     * @param float $unfrozen_rewards unfrozen_rewards
     *
     * @return self
     */
    public function setUnfrozenRewards($unfrozen_rewards)
    {
        $this->container['unfrozen_rewards'] = $unfrozen_rewards;

        return $this;
    }

    /**
     * Gets unfrozen_deposits
     *
     * @return float
     */
    public function getUnfrozenDeposits()
    {
        return $this->container['unfrozen_deposits'];
    }

    /**
     * Sets unfrozen_deposits
     *
     * @param float $unfrozen_deposits unfrozen_deposits
     *
     * @return self
     */
    public function setUnfrozenDeposits($unfrozen_deposits)
    {
        $this->container['unfrozen_deposits'] = $unfrozen_deposits;

        return $this;
    }

    /**
     * Gets activated_supply
     *
     * @return float
     */
    public function getActivatedSupply()
    {
        return $this->container['activated_supply'];
    }

    /**
     * Sets activated_supply
     *
     * @param float $activated_supply activated_supply
     *
     * @return self
     */
    public function setActivatedSupply($activated_supply)
    {
        $this->container['activated_supply'] = $activated_supply;

        return $this;
    }

    /**
     * Gets burned_supply
     *
     * @return float
     */
    public function getBurnedSupply()
    {
        return $this->container['burned_supply'];
    }

    /**
     * Sets burned_supply
     *
     * @param float $burned_supply burned_supply
     *
     * @return self
     */
    public function setBurnedSupply($burned_supply)
    {
        $this->container['burned_supply'] = $burned_supply;

        return $this;
    }

    /**
     * Gets n_accounts
     *
     * @return float
     */
    public function getNAccounts()
    {
        return $this->container['n_accounts'];
    }

    /**
     * Sets n_accounts
     *
     * @param float $n_accounts n_accounts
     *
     * @return self
     */
    public function setNAccounts($n_accounts)
    {
        $this->container['n_accounts'] = $n_accounts;

        return $this;
    }

    /**
     * Gets n_new_accounts
     *
     * @return float
     */
    public function getNNewAccounts()
    {
        return $this->container['n_new_accounts'];
    }

    /**
     * Sets n_new_accounts
     *
     * @param float $n_new_accounts n_new_accounts
     *
     * @return self
     */
    public function setNNewAccounts($n_new_accounts)
    {
        $this->container['n_new_accounts'] = $n_new_accounts;

        return $this;
    }

    /**
     * Gets n_new_contracts
     *
     * @return float
     */
    public function getNNewContracts()
    {
        return $this->container['n_new_contracts'];
    }

    /**
     * Sets n_new_contracts
     *
     * @param float $n_new_contracts n_new_contracts
     *
     * @return self
     */
    public function setNNewContracts($n_new_contracts)
    {
        $this->container['n_new_contracts'] = $n_new_contracts;

        return $this;
    }

    /**
     * Gets n_cleared_accounts
     *
     * @return float
     */
    public function getNClearedAccounts()
    {
        return $this->container['n_cleared_accounts'];
    }

    /**
     * Sets n_cleared_accounts
     *
     * @param float $n_cleared_accounts n_cleared_accounts
     *
     * @return self
     */
    public function setNClearedAccounts($n_cleared_accounts)
    {
        $this->container['n_cleared_accounts'] = $n_cleared_accounts;

        return $this;
    }

    /**
     * Gets n_funded_accounts
     *
     * @return float
     */
    public function getNFundedAccounts()
    {
        return $this->container['n_funded_accounts'];
    }

    /**
     * Sets n_funded_accounts
     *
     * @param float $n_funded_accounts n_funded_accounts
     *
     * @return self
     */
    public function setNFundedAccounts($n_funded_accounts)
    {
        $this->container['n_funded_accounts'] = $n_funded_accounts;

        return $this;
    }

    /**
     * Gets gas_limit
     *
     * @return float
     */
    public function getGasLimit()
    {
        return $this->container['gas_limit'];
    }

    /**
     * Sets gas_limit
     *
     * @param float $gas_limit gas_limit
     *
     * @return self
     */
    public function setGasLimit($gas_limit)
    {
        $this->container['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Gets gas_used
     *
     * @return float
     */
    public function getGasUsed()
    {
        return $this->container['gas_used'];
    }

    /**
     * Sets gas_used
     *
     * @param float $gas_used gas_used
     *
     * @return self
     */
    public function setGasUsed($gas_used)
    {
        $this->container['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Gets gas_price
     *
     * @return float
     */
    public function getGasPrice()
    {
        return $this->container['gas_price'];
    }

    /**
     * Sets gas_price
     *
     * @param float $gas_price gas_price
     *
     * @return self
     */
    public function setGasPrice($gas_price)
    {
        $this->container['gas_price'] = $gas_price;

        return $this;
    }

    /**
     * Gets storage_size
     *
     * @return float
     */
    public function getStorageSize()
    {
        return $this->container['storage_size'];
    }

    /**
     * Sets storage_size
     *
     * @param float $storage_size storage_size
     *
     * @return self
     */
    public function setStorageSize($storage_size)
    {
        $this->container['storage_size'] = $storage_size;

        return $this;
    }

    /**
     * Gets days_destroyed
     *
     * @return float
     */
    public function getDaysDestroyed()
    {
        return $this->container['days_destroyed'];
    }

    /**
     * Sets days_destroyed
     *
     * @param float $days_destroyed days_destroyed
     *
     * @return self
     */
    public function setDaysDestroyed($days_destroyed)
    {
        $this->container['days_destroyed'] = $days_destroyed;

        return $this;
    }

    /**
     * Gets pct_account_reuse
     *
     * @return float
     */
    public function getPctAccountReuse()
    {
        return $this->container['pct_account_reuse'];
    }

    /**
     * Sets pct_account_reuse
     *
     * @param float $pct_account_reuse pct_account_reuse
     *
     * @return self
     */
    public function setPctAccountReuse($pct_account_reuse)
    {
        $this->container['pct_account_reuse'] = $pct_account_reuse;

        return $this;
    }

    /**
     * Gets n_ops_implicit
     *
     * @return float
     */
    public function getNOpsImplicit()
    {
        return $this->container['n_ops_implicit'];
    }

    /**
     * Sets n_ops_implicit
     *
     * @param float $n_ops_implicit n_ops_implicit
     *
     * @return self
     */
    public function setNOpsImplicit($n_ops_implicit)
    {
        $this->container['n_ops_implicit'] = $n_ops_implicit;

        return $this;
    }

    /**
     * Gets lb_esc_vote
     *
     * @return bool
     */
    public function getLbEscVote()
    {
        return $this->container['lb_esc_vote'];
    }

    /**
     * Sets lb_esc_vote
     *
     * @param bool $lb_esc_vote lb_esc_vote
     *
     * @return self
     */
    public function setLbEscVote($lb_esc_vote)
    {
        $this->container['lb_esc_vote'] = $lb_esc_vote;

        return $this;
    }

    /**
     * Gets lb_esc_ema
     *
     * @return float
     */
    public function getLbEscEma()
    {
        return $this->container['lb_esc_ema'];
    }

    /**
     * Sets lb_esc_ema
     *
     * @param float $lb_esc_ema lb_esc_ema
     *
     * @return self
     */
    public function setLbEscEma($lb_esc_ema)
    {
        $this->container['lb_esc_ema'] = $lb_esc_ema;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {

        if ((mb_strlen($protocol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $protocol when calling InlineResponse2006., must be bigger than or equal to 1.');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


