<?php
/**
 * InlineResponse2002
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzStats API - PHP SDK
 *
 * API for TZstats.com, useful for viewing information about the Tezos blockchain.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@ideaengine.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2002 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'network' => 'string',
        'symbol' => 'string',
        'chain_id' => 'string',
        'genesis_time' => 'string',
        'block_hash' => 'string',
        'timestamp' => 'string',
        'height' => 'float',
        'cycle' => 'float',
        'total_accounts' => 'float',
        'funded_accounts' => 'float',
        'dust_accounts' => 'float',
        'dust_delegators' => 'float',
        'total_ops' => 'float',
        'delegators' => 'float',
        'delegates' => 'float',
        'rolls' => 'float',
        'roll_owners' => 'float',
        'new_accounts_30d' => 'float',
        'cleared_accounts_30d' => 'float',
        'funded_accounts_30d' => 'float',
        'inflation_1y' => 'float',
        'inflation_rate_1y' => 'float',
        'health' => 'float',
        'deployments' => 'object[]',
        'supply' => '\IdeaEngine\TzStats\Model\InlineResponse2002Supply',
        'status' => '\IdeaEngine\TzStats\Model\InlineResponse2002Status'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'network' => null,
        'symbol' => null,
        'chain_id' => null,
        'genesis_time' => null,
        'block_hash' => null,
        'timestamp' => null,
        'height' => null,
        'cycle' => null,
        'total_accounts' => null,
        'funded_accounts' => null,
        'dust_accounts' => null,
        'dust_delegators' => null,
        'total_ops' => null,
        'delegators' => null,
        'delegates' => null,
        'rolls' => null,
        'roll_owners' => null,
        'new_accounts_30d' => null,
        'cleared_accounts_30d' => null,
        'funded_accounts_30d' => null,
        'inflation_1y' => null,
        'inflation_rate_1y' => null,
        'health' => null,
        'deployments' => null,
        'supply' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'network' => 'network',
        'symbol' => 'symbol',
        'chain_id' => 'chain_id',
        'genesis_time' => 'genesis_time',
        'block_hash' => 'block_hash',
        'timestamp' => 'timestamp',
        'height' => 'height',
        'cycle' => 'cycle',
        'total_accounts' => 'total_accounts',
        'funded_accounts' => 'funded_accounts',
        'dust_accounts' => 'dust_accounts',
        'dust_delegators' => 'dust_delegators',
        'total_ops' => 'total_ops',
        'delegators' => 'delegators',
        'delegates' => 'delegates',
        'rolls' => 'rolls',
        'roll_owners' => 'roll_owners',
        'new_accounts_30d' => 'new_accounts_30d',
        'cleared_accounts_30d' => 'cleared_accounts_30d',
        'funded_accounts_30d' => 'funded_accounts_30d',
        'inflation_1y' => 'inflation_1y',
        'inflation_rate_1y' => 'inflation_rate_1y',
        'health' => 'health',
        'deployments' => 'deployments',
        'supply' => 'supply',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'network' => 'setNetwork',
        'symbol' => 'setSymbol',
        'chain_id' => 'setChainId',
        'genesis_time' => 'setGenesisTime',
        'block_hash' => 'setBlockHash',
        'timestamp' => 'setTimestamp',
        'height' => 'setHeight',
        'cycle' => 'setCycle',
        'total_accounts' => 'setTotalAccounts',
        'funded_accounts' => 'setFundedAccounts',
        'dust_accounts' => 'setDustAccounts',
        'dust_delegators' => 'setDustDelegators',
        'total_ops' => 'setTotalOps',
        'delegators' => 'setDelegators',
        'delegates' => 'setDelegates',
        'rolls' => 'setRolls',
        'roll_owners' => 'setRollOwners',
        'new_accounts_30d' => 'setNewAccounts30d',
        'cleared_accounts_30d' => 'setClearedAccounts30d',
        'funded_accounts_30d' => 'setFundedAccounts30d',
        'inflation_1y' => 'setInflation1y',
        'inflation_rate_1y' => 'setInflationRate1y',
        'health' => 'setHealth',
        'deployments' => 'setDeployments',
        'supply' => 'setSupply',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'network' => 'getNetwork',
        'symbol' => 'getSymbol',
        'chain_id' => 'getChainId',
        'genesis_time' => 'getGenesisTime',
        'block_hash' => 'getBlockHash',
        'timestamp' => 'getTimestamp',
        'height' => 'getHeight',
        'cycle' => 'getCycle',
        'total_accounts' => 'getTotalAccounts',
        'funded_accounts' => 'getFundedAccounts',
        'dust_accounts' => 'getDustAccounts',
        'dust_delegators' => 'getDustDelegators',
        'total_ops' => 'getTotalOps',
        'delegators' => 'getDelegators',
        'delegates' => 'getDelegates',
        'rolls' => 'getRolls',
        'roll_owners' => 'getRollOwners',
        'new_accounts_30d' => 'getNewAccounts30d',
        'cleared_accounts_30d' => 'getClearedAccounts30d',
        'funded_accounts_30d' => 'getFundedAccounts30d',
        'inflation_1y' => 'getInflation1y',
        'inflation_rate_1y' => 'getInflationRate1y',
        'health' => 'getHealth',
        'deployments' => 'getDeployments',
        'supply' => 'getSupply',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['chain_id'] = $data['chain_id'] ?? null;
        $this->container['genesis_time'] = $data['genesis_time'] ?? null;
        $this->container['block_hash'] = $data['block_hash'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['total_accounts'] = $data['total_accounts'] ?? null;
        $this->container['funded_accounts'] = $data['funded_accounts'] ?? null;
        $this->container['dust_accounts'] = $data['dust_accounts'] ?? null;
        $this->container['dust_delegators'] = $data['dust_delegators'] ?? null;
        $this->container['total_ops'] = $data['total_ops'] ?? null;
        $this->container['delegators'] = $data['delegators'] ?? null;
        $this->container['delegates'] = $data['delegates'] ?? null;
        $this->container['rolls'] = $data['rolls'] ?? null;
        $this->container['roll_owners'] = $data['roll_owners'] ?? null;
        $this->container['new_accounts_30d'] = $data['new_accounts_30d'] ?? null;
        $this->container['cleared_accounts_30d'] = $data['cleared_accounts_30d'] ?? null;
        $this->container['funded_accounts_30d'] = $data['funded_accounts_30d'] ?? null;
        $this->container['inflation_1y'] = $data['inflation_1y'] ?? null;
        $this->container['inflation_rate_1y'] = $data['inflation_rate_1y'] ?? null;
        $this->container['health'] = $data['health'] ?? null;
        $this->container['deployments'] = $data['deployments'] ?? null;
        $this->container['supply'] = $data['supply'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ((mb_strlen($this->container['network']) < 1)) {
            $invalidProperties[] = "invalid value for 'network', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->container['symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['chain_id'] === null) {
            $invalidProperties[] = "'chain_id' can't be null";
        }
        if ((mb_strlen($this->container['chain_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'chain_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['genesis_time'] === null) {
            $invalidProperties[] = "'genesis_time' can't be null";
        }
        if ((mb_strlen($this->container['genesis_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'genesis_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['block_hash'] === null) {
            $invalidProperties[] = "'block_hash' can't be null";
        }
        if ((mb_strlen($this->container['block_hash']) < 1)) {
            $invalidProperties[] = "invalid value for 'block_hash', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ((mb_strlen($this->container['timestamp']) < 1)) {
            $invalidProperties[] = "invalid value for 'timestamp', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['cycle'] === null) {
            $invalidProperties[] = "'cycle' can't be null";
        }
        if ($this->container['total_accounts'] === null) {
            $invalidProperties[] = "'total_accounts' can't be null";
        }
        if ($this->container['funded_accounts'] === null) {
            $invalidProperties[] = "'funded_accounts' can't be null";
        }
        if ($this->container['dust_accounts'] === null) {
            $invalidProperties[] = "'dust_accounts' can't be null";
        }
        if ($this->container['dust_delegators'] === null) {
            $invalidProperties[] = "'dust_delegators' can't be null";
        }
        if ($this->container['total_ops'] === null) {
            $invalidProperties[] = "'total_ops' can't be null";
        }
        if ($this->container['delegators'] === null) {
            $invalidProperties[] = "'delegators' can't be null";
        }
        if ($this->container['delegates'] === null) {
            $invalidProperties[] = "'delegates' can't be null";
        }
        if ($this->container['rolls'] === null) {
            $invalidProperties[] = "'rolls' can't be null";
        }
        if ($this->container['roll_owners'] === null) {
            $invalidProperties[] = "'roll_owners' can't be null";
        }
        if ($this->container['new_accounts_30d'] === null) {
            $invalidProperties[] = "'new_accounts_30d' can't be null";
        }
        if ($this->container['cleared_accounts_30d'] === null) {
            $invalidProperties[] = "'cleared_accounts_30d' can't be null";
        }
        if ($this->container['funded_accounts_30d'] === null) {
            $invalidProperties[] = "'funded_accounts_30d' can't be null";
        }
        if ($this->container['inflation_1y'] === null) {
            $invalidProperties[] = "'inflation_1y' can't be null";
        }
        if ($this->container['inflation_rate_1y'] === null) {
            $invalidProperties[] = "'inflation_rate_1y' can't be null";
        }
        if ($this->container['health'] === null) {
            $invalidProperties[] = "'health' can't be null";
        }
        if ($this->container['deployments'] === null) {
            $invalidProperties[] = "'deployments' can't be null";
        }
        if ((count($this->container['deployments']) < 1)) {
            $invalidProperties[] = "invalid value for 'deployments', number of items must be greater than or equal to 1.";
        }

        if ($this->container['supply'] === null) {
            $invalidProperties[] = "'supply' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {

        if ((mb_strlen($network) < 1)) {
            throw new \InvalidArgumentException('invalid length for $network when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {

        if ((mb_strlen($symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets chain_id
     *
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param string $chain_id chain_id
     *
     * @return self
     */
    public function setChainId($chain_id)
    {

        if ((mb_strlen($chain_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $chain_id when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets genesis_time
     *
     * @return string
     */
    public function getGenesisTime()
    {
        return $this->container['genesis_time'];
    }

    /**
     * Sets genesis_time
     *
     * @param string $genesis_time genesis_time
     *
     * @return self
     */
    public function setGenesisTime($genesis_time)
    {

        if ((mb_strlen($genesis_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $genesis_time when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['genesis_time'] = $genesis_time;

        return $this;
    }

    /**
     * Gets block_hash
     *
     * @return string
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string $block_hash block_hash
     *
     * @return self
     */
    public function setBlockHash($block_hash)
    {

        if ((mb_strlen($block_hash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $block_hash when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {

        if ((mb_strlen($timestamp) < 1)) {
            throw new \InvalidArgumentException('invalid length for $timestamp when calling InlineResponse2002., must be bigger than or equal to 1.');
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets cycle
     *
     * @return float
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param float $cycle cycle
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets total_accounts
     *
     * @return float
     */
    public function getTotalAccounts()
    {
        return $this->container['total_accounts'];
    }

    /**
     * Sets total_accounts
     *
     * @param float $total_accounts total_accounts
     *
     * @return self
     */
    public function setTotalAccounts($total_accounts)
    {
        $this->container['total_accounts'] = $total_accounts;

        return $this;
    }

    /**
     * Gets funded_accounts
     *
     * @return float
     */
    public function getFundedAccounts()
    {
        return $this->container['funded_accounts'];
    }

    /**
     * Sets funded_accounts
     *
     * @param float $funded_accounts funded_accounts
     *
     * @return self
     */
    public function setFundedAccounts($funded_accounts)
    {
        $this->container['funded_accounts'] = $funded_accounts;

        return $this;
    }

    /**
     * Gets dust_accounts
     *
     * @return float
     */
    public function getDustAccounts()
    {
        return $this->container['dust_accounts'];
    }

    /**
     * Sets dust_accounts
     *
     * @param float $dust_accounts dust_accounts
     *
     * @return self
     */
    public function setDustAccounts($dust_accounts)
    {
        $this->container['dust_accounts'] = $dust_accounts;

        return $this;
    }

    /**
     * Gets dust_delegators
     *
     * @return float
     */
    public function getDustDelegators()
    {
        return $this->container['dust_delegators'];
    }

    /**
     * Sets dust_delegators
     *
     * @param float $dust_delegators dust_delegators
     *
     * @return self
     */
    public function setDustDelegators($dust_delegators)
    {
        $this->container['dust_delegators'] = $dust_delegators;

        return $this;
    }

    /**
     * Gets total_ops
     *
     * @return float
     */
    public function getTotalOps()
    {
        return $this->container['total_ops'];
    }

    /**
     * Sets total_ops
     *
     * @param float $total_ops total_ops
     *
     * @return self
     */
    public function setTotalOps($total_ops)
    {
        $this->container['total_ops'] = $total_ops;

        return $this;
    }

    /**
     * Gets delegators
     *
     * @return float
     */
    public function getDelegators()
    {
        return $this->container['delegators'];
    }

    /**
     * Sets delegators
     *
     * @param float $delegators delegators
     *
     * @return self
     */
    public function setDelegators($delegators)
    {
        $this->container['delegators'] = $delegators;

        return $this;
    }

    /**
     * Gets delegates
     *
     * @return float
     */
    public function getDelegates()
    {
        return $this->container['delegates'];
    }

    /**
     * Sets delegates
     *
     * @param float $delegates delegates
     *
     * @return self
     */
    public function setDelegates($delegates)
    {
        $this->container['delegates'] = $delegates;

        return $this;
    }

    /**
     * Gets rolls
     *
     * @return float
     */
    public function getRolls()
    {
        return $this->container['rolls'];
    }

    /**
     * Sets rolls
     *
     * @param float $rolls rolls
     *
     * @return self
     */
    public function setRolls($rolls)
    {
        $this->container['rolls'] = $rolls;

        return $this;
    }

    /**
     * Gets roll_owners
     *
     * @return float
     */
    public function getRollOwners()
    {
        return $this->container['roll_owners'];
    }

    /**
     * Sets roll_owners
     *
     * @param float $roll_owners roll_owners
     *
     * @return self
     */
    public function setRollOwners($roll_owners)
    {
        $this->container['roll_owners'] = $roll_owners;

        return $this;
    }

    /**
     * Gets new_accounts_30d
     *
     * @return float
     */
    public function getNewAccounts30d()
    {
        return $this->container['new_accounts_30d'];
    }

    /**
     * Sets new_accounts_30d
     *
     * @param float $new_accounts_30d new_accounts_30d
     *
     * @return self
     */
    public function setNewAccounts30d($new_accounts_30d)
    {
        $this->container['new_accounts_30d'] = $new_accounts_30d;

        return $this;
    }

    /**
     * Gets cleared_accounts_30d
     *
     * @return float
     */
    public function getClearedAccounts30d()
    {
        return $this->container['cleared_accounts_30d'];
    }

    /**
     * Sets cleared_accounts_30d
     *
     * @param float $cleared_accounts_30d cleared_accounts_30d
     *
     * @return self
     */
    public function setClearedAccounts30d($cleared_accounts_30d)
    {
        $this->container['cleared_accounts_30d'] = $cleared_accounts_30d;

        return $this;
    }

    /**
     * Gets funded_accounts_30d
     *
     * @return float
     */
    public function getFundedAccounts30d()
    {
        return $this->container['funded_accounts_30d'];
    }

    /**
     * Sets funded_accounts_30d
     *
     * @param float $funded_accounts_30d funded_accounts_30d
     *
     * @return self
     */
    public function setFundedAccounts30d($funded_accounts_30d)
    {
        $this->container['funded_accounts_30d'] = $funded_accounts_30d;

        return $this;
    }

    /**
     * Gets inflation_1y
     *
     * @return float
     */
    public function getInflation1y()
    {
        return $this->container['inflation_1y'];
    }

    /**
     * Sets inflation_1y
     *
     * @param float $inflation_1y inflation_1y
     *
     * @return self
     */
    public function setInflation1y($inflation_1y)
    {
        $this->container['inflation_1y'] = $inflation_1y;

        return $this;
    }

    /**
     * Gets inflation_rate_1y
     *
     * @return float
     */
    public function getInflationRate1y()
    {
        return $this->container['inflation_rate_1y'];
    }

    /**
     * Sets inflation_rate_1y
     *
     * @param float $inflation_rate_1y inflation_rate_1y
     *
     * @return self
     */
    public function setInflationRate1y($inflation_rate_1y)
    {
        $this->container['inflation_rate_1y'] = $inflation_rate_1y;

        return $this;
    }

    /**
     * Gets health
     *
     * @return float
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param float $health health
     *
     * @return self
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets deployments
     *
     * @return object[]
     */
    public function getDeployments()
    {
        return $this->container['deployments'];
    }

    /**
     * Sets deployments
     *
     * @param object[] $deployments deployments
     *
     * @return self
     */
    public function setDeployments($deployments)
    {


        if ((count($deployments) < 1)) {
            throw new \InvalidArgumentException('invalid length for $deployments when calling InlineResponse2002., number of items must be greater than or equal to 1.');
        }
        $this->container['deployments'] = $deployments;

        return $this;
    }

    /**
     * Gets supply
     *
     * @return \IdeaEngine\TzStats\Model\InlineResponse2002Supply
     */
    public function getSupply()
    {
        return $this->container['supply'];
    }

    /**
     * Sets supply
     *
     * @param \IdeaEngine\TzStats\Model\InlineResponse2002Supply $supply supply
     *
     * @return self
     */
    public function setSupply($supply)
    {
        $this->container['supply'] = $supply;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \IdeaEngine\TzStats\Model\InlineResponse2002Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \IdeaEngine\TzStats\Model\InlineResponse2002Status $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


