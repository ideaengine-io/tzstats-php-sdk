<?php
/**
 * InlineResponse2009Value
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TZstats
 *
 * API for TZstats.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tezos@whafor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2009Value Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2009Value implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_9_value';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounts' => 'string',
        'freeze_baker' => 'bool',
        'lqt_total' => 'string',
        'manager' => 'string',
        'self_is_updating_token_pool' => 'bool',
        'token_address' => 'string',
        'token_pool' => 'string',
        'xtz_pool' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounts' => null,
        'freeze_baker' => null,
        'lqt_total' => null,
        'manager' => null,
        'self_is_updating_token_pool' => null,
        'token_address' => null,
        'token_pool' => null,
        'xtz_pool' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'freeze_baker' => 'freezeBaker',
        'lqt_total' => 'lqtTotal',
        'manager' => 'manager',
        'self_is_updating_token_pool' => 'selfIsUpdatingTokenPool',
        'token_address' => 'tokenAddress',
        'token_pool' => 'tokenPool',
        'xtz_pool' => 'xtzPool'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'freeze_baker' => 'setFreezeBaker',
        'lqt_total' => 'setLqtTotal',
        'manager' => 'setManager',
        'self_is_updating_token_pool' => 'setSelfIsUpdatingTokenPool',
        'token_address' => 'setTokenAddress',
        'token_pool' => 'setTokenPool',
        'xtz_pool' => 'setXtzPool'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'freeze_baker' => 'getFreezeBaker',
        'lqt_total' => 'getLqtTotal',
        'manager' => 'getManager',
        'self_is_updating_token_pool' => 'getSelfIsUpdatingTokenPool',
        'token_address' => 'getTokenAddress',
        'token_pool' => 'getTokenPool',
        'xtz_pool' => 'getXtzPool'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounts'] = $data['accounts'] ?? null;
        $this->container['freeze_baker'] = $data['freeze_baker'] ?? null;
        $this->container['lqt_total'] = $data['lqt_total'] ?? null;
        $this->container['manager'] = $data['manager'] ?? null;
        $this->container['self_is_updating_token_pool'] = $data['self_is_updating_token_pool'] ?? null;
        $this->container['token_address'] = $data['token_address'] ?? null;
        $this->container['token_pool'] = $data['token_pool'] ?? null;
        $this->container['xtz_pool'] = $data['xtz_pool'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accounts'] === null) {
            $invalidProperties[] = "'accounts' can't be null";
        }
        if ((mb_strlen($this->container['accounts']) < 1)) {
            $invalidProperties[] = "invalid value for 'accounts', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['freeze_baker'] === null) {
            $invalidProperties[] = "'freeze_baker' can't be null";
        }
        if ($this->container['lqt_total'] === null) {
            $invalidProperties[] = "'lqt_total' can't be null";
        }
        if ((mb_strlen($this->container['lqt_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'lqt_total', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['manager'] === null) {
            $invalidProperties[] = "'manager' can't be null";
        }
        if ((mb_strlen($this->container['manager']) < 1)) {
            $invalidProperties[] = "invalid value for 'manager', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['self_is_updating_token_pool'] === null) {
            $invalidProperties[] = "'self_is_updating_token_pool' can't be null";
        }
        if ($this->container['token_address'] === null) {
            $invalidProperties[] = "'token_address' can't be null";
        }
        if ((mb_strlen($this->container['token_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'token_address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['token_pool'] === null) {
            $invalidProperties[] = "'token_pool' can't be null";
        }
        if ((mb_strlen($this->container['token_pool']) < 1)) {
            $invalidProperties[] = "invalid value for 'token_pool', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['xtz_pool'] === null) {
            $invalidProperties[] = "'xtz_pool' can't be null";
        }
        if ((mb_strlen($this->container['xtz_pool']) < 1)) {
            $invalidProperties[] = "invalid value for 'xtz_pool', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return string
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param string $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {

        if ((mb_strlen($accounts) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accounts when calling InlineResponse2009Value., must be bigger than or equal to 1.');
        }

        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets freeze_baker
     *
     * @return bool
     */
    public function getFreezeBaker()
    {
        return $this->container['freeze_baker'];
    }

    /**
     * Sets freeze_baker
     *
     * @param bool $freeze_baker freeze_baker
     *
     * @return self
     */
    public function setFreezeBaker($freeze_baker)
    {
        $this->container['freeze_baker'] = $freeze_baker;

        return $this;
    }

    /**
     * Gets lqt_total
     *
     * @return string
     */
    public function getLqtTotal()
    {
        return $this->container['lqt_total'];
    }

    /**
     * Sets lqt_total
     *
     * @param string $lqt_total lqt_total
     *
     * @return self
     */
    public function setLqtTotal($lqt_total)
    {

        if ((mb_strlen($lqt_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $lqt_total when calling InlineResponse2009Value., must be bigger than or equal to 1.');
        }

        $this->container['lqt_total'] = $lqt_total;

        return $this;
    }

    /**
     * Gets manager
     *
     * @return string
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     *
     * @param string $manager manager
     *
     * @return self
     */
    public function setManager($manager)
    {

        if ((mb_strlen($manager) < 1)) {
            throw new \InvalidArgumentException('invalid length for $manager when calling InlineResponse2009Value., must be bigger than or equal to 1.');
        }

        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets self_is_updating_token_pool
     *
     * @return bool
     */
    public function getSelfIsUpdatingTokenPool()
    {
        return $this->container['self_is_updating_token_pool'];
    }

    /**
     * Sets self_is_updating_token_pool
     *
     * @param bool $self_is_updating_token_pool self_is_updating_token_pool
     *
     * @return self
     */
    public function setSelfIsUpdatingTokenPool($self_is_updating_token_pool)
    {
        $this->container['self_is_updating_token_pool'] = $self_is_updating_token_pool;

        return $this;
    }

    /**
     * Gets token_address
     *
     * @return string
     */
    public function getTokenAddress()
    {
        return $this->container['token_address'];
    }

    /**
     * Sets token_address
     *
     * @param string $token_address token_address
     *
     * @return self
     */
    public function setTokenAddress($token_address)
    {

        if ((mb_strlen($token_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token_address when calling InlineResponse2009Value., must be bigger than or equal to 1.');
        }

        $this->container['token_address'] = $token_address;

        return $this;
    }

    /**
     * Gets token_pool
     *
     * @return string
     */
    public function getTokenPool()
    {
        return $this->container['token_pool'];
    }

    /**
     * Sets token_pool
     *
     * @param string $token_pool token_pool
     *
     * @return self
     */
    public function setTokenPool($token_pool)
    {

        if ((mb_strlen($token_pool) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token_pool when calling InlineResponse2009Value., must be bigger than or equal to 1.');
        }

        $this->container['token_pool'] = $token_pool;

        return $this;
    }

    /**
     * Gets xtz_pool
     *
     * @return string
     */
    public function getXtzPool()
    {
        return $this->container['xtz_pool'];
    }

    /**
     * Sets xtz_pool
     *
     * @param string $xtz_pool xtz_pool
     *
     * @return self
     */
    public function setXtzPool($xtz_pool)
    {

        if ((mb_strlen($xtz_pool) < 1)) {
            throw new \InvalidArgumentException('invalid length for $xtz_pool when calling InlineResponse2009Value., must be bigger than or equal to 1.');
        }

        $this->container['xtz_pool'] = $xtz_pool;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


