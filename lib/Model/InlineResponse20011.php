<?php
/**
 * InlineResponse20011
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzStats API - PHP SDK
 *
 * API for TZstats.com, useful for viewing information about the Tezos blockchain.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@ideaengine.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse20011 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20011 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_11';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'election_id' => 'float',
        'max_periods' => 'float',
        'num_periods' => 'float',
        'num_proposals' => 'float',
        'start_time' => 'string',
        'end_time' => 'string',
        'start_height' => 'float',
        'end_height' => 'float',
        'is_empty' => 'bool',
        'is_open' => 'bool',
        'is_failed' => 'bool',
        'no_quorum' => 'bool',
        'no_majority' => 'bool',
        'no_proposal' => 'bool',
        'voting_period' => 'string',
        'proposal' => '\IdeaEngine\TzStats\Model\InlineResponse20011Proposal',
        'exploration' => 'mixed',
        'cooldown' => 'mixed',
        'promotion' => 'mixed',
        'adoption' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'election_id' => null,
        'max_periods' => null,
        'num_periods' => null,
        'num_proposals' => null,
        'start_time' => null,
        'end_time' => null,
        'start_height' => null,
        'end_height' => null,
        'is_empty' => null,
        'is_open' => null,
        'is_failed' => null,
        'no_quorum' => null,
        'no_majority' => null,
        'no_proposal' => null,
        'voting_period' => null,
        'proposal' => null,
        'exploration' => null,
        'cooldown' => null,
        'promotion' => null,
        'adoption' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'election_id' => 'election_id',
        'max_periods' => 'max_periods',
        'num_periods' => 'num_periods',
        'num_proposals' => 'num_proposals',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'start_height' => 'start_height',
        'end_height' => 'end_height',
        'is_empty' => 'is_empty',
        'is_open' => 'is_open',
        'is_failed' => 'is_failed',
        'no_quorum' => 'no_quorum',
        'no_majority' => 'no_majority',
        'no_proposal' => 'no_proposal',
        'voting_period' => 'voting_period',
        'proposal' => 'proposal',
        'exploration' => 'exploration',
        'cooldown' => 'cooldown',
        'promotion' => 'promotion',
        'adoption' => 'adoption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'election_id' => 'setElectionId',
        'max_periods' => 'setMaxPeriods',
        'num_periods' => 'setNumPeriods',
        'num_proposals' => 'setNumProposals',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'start_height' => 'setStartHeight',
        'end_height' => 'setEndHeight',
        'is_empty' => 'setIsEmpty',
        'is_open' => 'setIsOpen',
        'is_failed' => 'setIsFailed',
        'no_quorum' => 'setNoQuorum',
        'no_majority' => 'setNoMajority',
        'no_proposal' => 'setNoProposal',
        'voting_period' => 'setVotingPeriod',
        'proposal' => 'setProposal',
        'exploration' => 'setExploration',
        'cooldown' => 'setCooldown',
        'promotion' => 'setPromotion',
        'adoption' => 'setAdoption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'election_id' => 'getElectionId',
        'max_periods' => 'getMaxPeriods',
        'num_periods' => 'getNumPeriods',
        'num_proposals' => 'getNumProposals',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'start_height' => 'getStartHeight',
        'end_height' => 'getEndHeight',
        'is_empty' => 'getIsEmpty',
        'is_open' => 'getIsOpen',
        'is_failed' => 'getIsFailed',
        'no_quorum' => 'getNoQuorum',
        'no_majority' => 'getNoMajority',
        'no_proposal' => 'getNoProposal',
        'voting_period' => 'getVotingPeriod',
        'proposal' => 'getProposal',
        'exploration' => 'getExploration',
        'cooldown' => 'getCooldown',
        'promotion' => 'getPromotion',
        'adoption' => 'getAdoption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['election_id'] = $data['election_id'] ?? null;
        $this->container['max_periods'] = $data['max_periods'] ?? null;
        $this->container['num_periods'] = $data['num_periods'] ?? null;
        $this->container['num_proposals'] = $data['num_proposals'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['start_height'] = $data['start_height'] ?? null;
        $this->container['end_height'] = $data['end_height'] ?? null;
        $this->container['is_empty'] = $data['is_empty'] ?? null;
        $this->container['is_open'] = $data['is_open'] ?? null;
        $this->container['is_failed'] = $data['is_failed'] ?? null;
        $this->container['no_quorum'] = $data['no_quorum'] ?? null;
        $this->container['no_majority'] = $data['no_majority'] ?? null;
        $this->container['no_proposal'] = $data['no_proposal'] ?? null;
        $this->container['voting_period'] = $data['voting_period'] ?? null;
        $this->container['proposal'] = $data['proposal'] ?? null;
        $this->container['exploration'] = $data['exploration'] ?? null;
        $this->container['cooldown'] = $data['cooldown'] ?? null;
        $this->container['promotion'] = $data['promotion'] ?? null;
        $this->container['adoption'] = $data['adoption'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['election_id'] === null) {
            $invalidProperties[] = "'election_id' can't be null";
        }
        if ($this->container['max_periods'] === null) {
            $invalidProperties[] = "'max_periods' can't be null";
        }
        if ($this->container['num_periods'] === null) {
            $invalidProperties[] = "'num_periods' can't be null";
        }
        if ($this->container['num_proposals'] === null) {
            $invalidProperties[] = "'num_proposals' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ((mb_strlen($this->container['start_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'start_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ((mb_strlen($this->container['end_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'end_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['start_height'] === null) {
            $invalidProperties[] = "'start_height' can't be null";
        }
        if ($this->container['end_height'] === null) {
            $invalidProperties[] = "'end_height' can't be null";
        }
        if ($this->container['is_empty'] === null) {
            $invalidProperties[] = "'is_empty' can't be null";
        }
        if ($this->container['is_open'] === null) {
            $invalidProperties[] = "'is_open' can't be null";
        }
        if ($this->container['is_failed'] === null) {
            $invalidProperties[] = "'is_failed' can't be null";
        }
        if ($this->container['no_quorum'] === null) {
            $invalidProperties[] = "'no_quorum' can't be null";
        }
        if ($this->container['no_majority'] === null) {
            $invalidProperties[] = "'no_majority' can't be null";
        }
        if ($this->container['no_proposal'] === null) {
            $invalidProperties[] = "'no_proposal' can't be null";
        }
        if ($this->container['voting_period'] === null) {
            $invalidProperties[] = "'voting_period' can't be null";
        }
        if ((mb_strlen($this->container['voting_period']) < 1)) {
            $invalidProperties[] = "invalid value for 'voting_period', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['proposal'] === null) {
            $invalidProperties[] = "'proposal' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets election_id
     *
     * @return float
     */
    public function getElectionId()
    {
        return $this->container['election_id'];
    }

    /**
     * Sets election_id
     *
     * @param float $election_id election_id
     *
     * @return self
     */
    public function setElectionId($election_id)
    {
        $this->container['election_id'] = $election_id;

        return $this;
    }

    /**
     * Gets max_periods
     *
     * @return float
     */
    public function getMaxPeriods()
    {
        return $this->container['max_periods'];
    }

    /**
     * Sets max_periods
     *
     * @param float $max_periods max_periods
     *
     * @return self
     */
    public function setMaxPeriods($max_periods)
    {
        $this->container['max_periods'] = $max_periods;

        return $this;
    }

    /**
     * Gets num_periods
     *
     * @return float
     */
    public function getNumPeriods()
    {
        return $this->container['num_periods'];
    }

    /**
     * Sets num_periods
     *
     * @param float $num_periods num_periods
     *
     * @return self
     */
    public function setNumPeriods($num_periods)
    {
        $this->container['num_periods'] = $num_periods;

        return $this;
    }

    /**
     * Gets num_proposals
     *
     * @return float
     */
    public function getNumProposals()
    {
        return $this->container['num_proposals'];
    }

    /**
     * Sets num_proposals
     *
     * @param float $num_proposals num_proposals
     *
     * @return self
     */
    public function setNumProposals($num_proposals)
    {
        $this->container['num_proposals'] = $num_proposals;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {

        if ((mb_strlen($start_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $start_time when calling InlineResponse20011., must be bigger than or equal to 1.');
        }

        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return self
     */
    public function setEndTime($end_time)
    {

        if ((mb_strlen($end_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $end_time when calling InlineResponse20011., must be bigger than or equal to 1.');
        }

        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets start_height
     *
     * @return float
     */
    public function getStartHeight()
    {
        return $this->container['start_height'];
    }

    /**
     * Sets start_height
     *
     * @param float $start_height start_height
     *
     * @return self
     */
    public function setStartHeight($start_height)
    {
        $this->container['start_height'] = $start_height;

        return $this;
    }

    /**
     * Gets end_height
     *
     * @return float
     */
    public function getEndHeight()
    {
        return $this->container['end_height'];
    }

    /**
     * Sets end_height
     *
     * @param float $end_height end_height
     *
     * @return self
     */
    public function setEndHeight($end_height)
    {
        $this->container['end_height'] = $end_height;

        return $this;
    }

    /**
     * Gets is_empty
     *
     * @return bool
     */
    public function getIsEmpty()
    {
        return $this->container['is_empty'];
    }

    /**
     * Sets is_empty
     *
     * @param bool $is_empty is_empty
     *
     * @return self
     */
    public function setIsEmpty($is_empty)
    {
        $this->container['is_empty'] = $is_empty;

        return $this;
    }

    /**
     * Gets is_open
     *
     * @return bool
     */
    public function getIsOpen()
    {
        return $this->container['is_open'];
    }

    /**
     * Sets is_open
     *
     * @param bool $is_open is_open
     *
     * @return self
     */
    public function setIsOpen($is_open)
    {
        $this->container['is_open'] = $is_open;

        return $this;
    }

    /**
     * Gets is_failed
     *
     * @return bool
     */
    public function getIsFailed()
    {
        return $this->container['is_failed'];
    }

    /**
     * Sets is_failed
     *
     * @param bool $is_failed is_failed
     *
     * @return self
     */
    public function setIsFailed($is_failed)
    {
        $this->container['is_failed'] = $is_failed;

        return $this;
    }

    /**
     * Gets no_quorum
     *
     * @return bool
     */
    public function getNoQuorum()
    {
        return $this->container['no_quorum'];
    }

    /**
     * Sets no_quorum
     *
     * @param bool $no_quorum no_quorum
     *
     * @return self
     */
    public function setNoQuorum($no_quorum)
    {
        $this->container['no_quorum'] = $no_quorum;

        return $this;
    }

    /**
     * Gets no_majority
     *
     * @return bool
     */
    public function getNoMajority()
    {
        return $this->container['no_majority'];
    }

    /**
     * Sets no_majority
     *
     * @param bool $no_majority no_majority
     *
     * @return self
     */
    public function setNoMajority($no_majority)
    {
        $this->container['no_majority'] = $no_majority;

        return $this;
    }

    /**
     * Gets no_proposal
     *
     * @return bool
     */
    public function getNoProposal()
    {
        return $this->container['no_proposal'];
    }

    /**
     * Sets no_proposal
     *
     * @param bool $no_proposal no_proposal
     *
     * @return self
     */
    public function setNoProposal($no_proposal)
    {
        $this->container['no_proposal'] = $no_proposal;

        return $this;
    }

    /**
     * Gets voting_period
     *
     * @return string
     */
    public function getVotingPeriod()
    {
        return $this->container['voting_period'];
    }

    /**
     * Sets voting_period
     *
     * @param string $voting_period voting_period
     *
     * @return self
     */
    public function setVotingPeriod($voting_period)
    {

        if ((mb_strlen($voting_period) < 1)) {
            throw new \InvalidArgumentException('invalid length for $voting_period when calling InlineResponse20011., must be bigger than or equal to 1.');
        }

        $this->container['voting_period'] = $voting_period;

        return $this;
    }

    /**
     * Gets proposal
     *
     * @return \IdeaEngine\TzStats\Model\InlineResponse20011Proposal
     */
    public function getProposal()
    {
        return $this->container['proposal'];
    }

    /**
     * Sets proposal
     *
     * @param \IdeaEngine\TzStats\Model\InlineResponse20011Proposal $proposal proposal
     *
     * @return self
     */
    public function setProposal($proposal)
    {
        $this->container['proposal'] = $proposal;

        return $this;
    }

    /**
     * Gets exploration
     *
     * @return mixed|null
     */
    public function getExploration()
    {
        return $this->container['exploration'];
    }

    /**
     * Sets exploration
     *
     * @param mixed|null $exploration exploration
     *
     * @return self
     */
    public function setExploration($exploration)
    {
        $this->container['exploration'] = $exploration;

        return $this;
    }

    /**
     * Gets cooldown
     *
     * @return mixed|null
     */
    public function getCooldown()
    {
        return $this->container['cooldown'];
    }

    /**
     * Sets cooldown
     *
     * @param mixed|null $cooldown cooldown
     *
     * @return self
     */
    public function setCooldown($cooldown)
    {
        $this->container['cooldown'] = $cooldown;

        return $this;
    }

    /**
     * Gets promotion
     *
     * @return mixed|null
     */
    public function getPromotion()
    {
        return $this->container['promotion'];
    }

    /**
     * Sets promotion
     *
     * @param mixed|null $promotion promotion
     *
     * @return self
     */
    public function setPromotion($promotion)
    {
        $this->container['promotion'] = $promotion;

        return $this;
    }

    /**
     * Gets adoption
     *
     * @return mixed|null
     */
    public function getAdoption()
    {
        return $this->container['adoption'];
    }

    /**
     * Sets adoption
     *
     * @param mixed|null $adoption adoption
     *
     * @return self
     */
    public function setAdoption($adoption)
    {
        $this->container['adoption'] = $adoption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


