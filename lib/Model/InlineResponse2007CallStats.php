<?php
/**
 * InlineResponse2007CallStats
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzStats API - PHP SDK
 *
 * API for TZstats.com, useful for viewing information about the Tezos blockchain.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@ideaengine.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2007CallStats Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2007CallStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_7_call_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'add_liquidity' => 'float',
        'approve' => 'float',
        'default' => 'float',
        'remove_liquidity' => 'float',
        'set_baker' => 'float',
        'set_manager' => 'float',
        'token_to_token' => 'float',
        'token_to_xtz' => 'float',
        'update_token_pool' => 'float',
        'update_token_pool_internal' => 'float',
        'xtz_to_token' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'add_liquidity' => null,
        'approve' => null,
        'default' => null,
        'remove_liquidity' => null,
        'set_baker' => null,
        'set_manager' => null,
        'token_to_token' => null,
        'token_to_xtz' => null,
        'update_token_pool' => null,
        'update_token_pool_internal' => null,
        'xtz_to_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_liquidity' => 'addLiquidity',
        'approve' => 'approve',
        'default' => 'default',
        'remove_liquidity' => 'removeLiquidity',
        'set_baker' => 'setBaker',
        'set_manager' => 'setManager',
        'token_to_token' => 'tokenToToken',
        'token_to_xtz' => 'tokenToXtz',
        'update_token_pool' => 'updateTokenPool',
        'update_token_pool_internal' => 'updateTokenPoolInternal',
        'xtz_to_token' => 'xtzToToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_liquidity' => 'setAddLiquidity',
        'approve' => 'setApprove',
        'default' => 'setDefault',
        'remove_liquidity' => 'setRemoveLiquidity',
        'set_baker' => 'setSetBaker',
        'set_manager' => 'setSetManager',
        'token_to_token' => 'setTokenToToken',
        'token_to_xtz' => 'setTokenToXtz',
        'update_token_pool' => 'setUpdateTokenPool',
        'update_token_pool_internal' => 'setUpdateTokenPoolInternal',
        'xtz_to_token' => 'setXtzToToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_liquidity' => 'getAddLiquidity',
        'approve' => 'getApprove',
        'default' => 'getDefault',
        'remove_liquidity' => 'getRemoveLiquidity',
        'set_baker' => 'getSetBaker',
        'set_manager' => 'getSetManager',
        'token_to_token' => 'getTokenToToken',
        'token_to_xtz' => 'getTokenToXtz',
        'update_token_pool' => 'getUpdateTokenPool',
        'update_token_pool_internal' => 'getUpdateTokenPoolInternal',
        'xtz_to_token' => 'getXtzToToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_liquidity'] = $data['add_liquidity'] ?? null;
        $this->container['approve'] = $data['approve'] ?? null;
        $this->container['default'] = $data['default'] ?? null;
        $this->container['remove_liquidity'] = $data['remove_liquidity'] ?? null;
        $this->container['set_baker'] = $data['set_baker'] ?? null;
        $this->container['set_manager'] = $data['set_manager'] ?? null;
        $this->container['token_to_token'] = $data['token_to_token'] ?? null;
        $this->container['token_to_xtz'] = $data['token_to_xtz'] ?? null;
        $this->container['update_token_pool'] = $data['update_token_pool'] ?? null;
        $this->container['update_token_pool_internal'] = $data['update_token_pool_internal'] ?? null;
        $this->container['xtz_to_token'] = $data['xtz_to_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['add_liquidity'] === null) {
            $invalidProperties[] = "'add_liquidity' can't be null";
        }
        if ($this->container['approve'] === null) {
            $invalidProperties[] = "'approve' can't be null";
        }
        if ($this->container['default'] === null) {
            $invalidProperties[] = "'default' can't be null";
        }
        if ($this->container['remove_liquidity'] === null) {
            $invalidProperties[] = "'remove_liquidity' can't be null";
        }
        if ($this->container['set_baker'] === null) {
            $invalidProperties[] = "'set_baker' can't be null";
        }
        if ($this->container['set_manager'] === null) {
            $invalidProperties[] = "'set_manager' can't be null";
        }
        if ($this->container['token_to_token'] === null) {
            $invalidProperties[] = "'token_to_token' can't be null";
        }
        if ($this->container['token_to_xtz'] === null) {
            $invalidProperties[] = "'token_to_xtz' can't be null";
        }
        if ($this->container['update_token_pool'] === null) {
            $invalidProperties[] = "'update_token_pool' can't be null";
        }
        if ($this->container['update_token_pool_internal'] === null) {
            $invalidProperties[] = "'update_token_pool_internal' can't be null";
        }
        if ($this->container['xtz_to_token'] === null) {
            $invalidProperties[] = "'xtz_to_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_liquidity
     *
     * @return float
     */
    public function getAddLiquidity()
    {
        return $this->container['add_liquidity'];
    }

    /**
     * Sets add_liquidity
     *
     * @param float $add_liquidity add_liquidity
     *
     * @return self
     */
    public function setAddLiquidity($add_liquidity)
    {
        $this->container['add_liquidity'] = $add_liquidity;

        return $this;
    }

    /**
     * Gets approve
     *
     * @return float
     */
    public function getApprove()
    {
        return $this->container['approve'];
    }

    /**
     * Sets approve
     *
     * @param float $approve approve
     *
     * @return self
     */
    public function setApprove($approve)
    {
        $this->container['approve'] = $approve;

        return $this;
    }

    /**
     * Gets default
     *
     * @return float
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param float $default default
     *
     * @return self
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets remove_liquidity
     *
     * @return float
     */
    public function getRemoveLiquidity()
    {
        return $this->container['remove_liquidity'];
    }

    /**
     * Sets remove_liquidity
     *
     * @param float $remove_liquidity remove_liquidity
     *
     * @return self
     */
    public function setRemoveLiquidity($remove_liquidity)
    {
        $this->container['remove_liquidity'] = $remove_liquidity;

        return $this;
    }

    /**
     * Gets set_baker
     *
     * @return float
     */
    public function getSetBaker()
    {
        return $this->container['set_baker'];
    }

    /**
     * Sets set_baker
     *
     * @param float $set_baker set_baker
     *
     * @return self
     */
    public function setSetBaker($set_baker)
    {
        $this->container['set_baker'] = $set_baker;

        return $this;
    }

    /**
     * Gets set_manager
     *
     * @return float
     */
    public function getSetManager()
    {
        return $this->container['set_manager'];
    }

    /**
     * Sets set_manager
     *
     * @param float $set_manager set_manager
     *
     * @return self
     */
    public function setSetManager($set_manager)
    {
        $this->container['set_manager'] = $set_manager;

        return $this;
    }

    /**
     * Gets token_to_token
     *
     * @return float
     */
    public function getTokenToToken()
    {
        return $this->container['token_to_token'];
    }

    /**
     * Sets token_to_token
     *
     * @param float $token_to_token token_to_token
     *
     * @return self
     */
    public function setTokenToToken($token_to_token)
    {
        $this->container['token_to_token'] = $token_to_token;

        return $this;
    }

    /**
     * Gets token_to_xtz
     *
     * @return float
     */
    public function getTokenToXtz()
    {
        return $this->container['token_to_xtz'];
    }

    /**
     * Sets token_to_xtz
     *
     * @param float $token_to_xtz token_to_xtz
     *
     * @return self
     */
    public function setTokenToXtz($token_to_xtz)
    {
        $this->container['token_to_xtz'] = $token_to_xtz;

        return $this;
    }

    /**
     * Gets update_token_pool
     *
     * @return float
     */
    public function getUpdateTokenPool()
    {
        return $this->container['update_token_pool'];
    }

    /**
     * Sets update_token_pool
     *
     * @param float $update_token_pool update_token_pool
     *
     * @return self
     */
    public function setUpdateTokenPool($update_token_pool)
    {
        $this->container['update_token_pool'] = $update_token_pool;

        return $this;
    }

    /**
     * Gets update_token_pool_internal
     *
     * @return float
     */
    public function getUpdateTokenPoolInternal()
    {
        return $this->container['update_token_pool_internal'];
    }

    /**
     * Sets update_token_pool_internal
     *
     * @param float $update_token_pool_internal update_token_pool_internal
     *
     * @return self
     */
    public function setUpdateTokenPoolInternal($update_token_pool_internal)
    {
        $this->container['update_token_pool_internal'] = $update_token_pool_internal;

        return $this;
    }

    /**
     * Gets xtz_to_token
     *
     * @return float
     */
    public function getXtzToToken()
    {
        return $this->container['xtz_to_token'];
    }

    /**
     * Sets xtz_to_token
     *
     * @param float $xtz_to_token xtz_to_token
     *
     * @return self
     */
    public function setXtzToToken($xtz_to_token)
    {
        $this->container['xtz_to_token'] = $xtz_to_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


