<?php
/**
 * InlineResponse20010SnapshotCycle
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TZstats
 *
 * API for TZstats.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tezos@whafor.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse20010SnapshotCycle Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20010SnapshotCycle implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_10_snapshot_cycle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cycle' => 'float',
        'start_height' => 'float',
        'end_height' => 'float',
        'start_time' => 'string',
        'end_time' => 'string',
        'progress' => 'float',
        'is_complete' => 'bool',
        'is_snapshot' => 'bool',
        'is_active' => 'bool',
        'snapshot_height' => 'float',
        'snapshot_index' => 'float',
        'snapshot_time' => 'string',
        'rolls' => 'float',
        'roll_owners' => 'float',
        'active_delegators' => 'float',
        'active_bakers' => 'float',
        'staking_supply' => 'float',
        'staking_percent' => 'float',
        'working_bakers' => 'float',
        'working_endorsers' => 'float',
        'missed_priorities' => 'float',
        'missed_endorsements' => 'float',
        'n_double_baking' => 'float',
        'n_double_endorsement' => 'float',
        'n_orphans' => 'float',
        'solvetime_min' => 'float',
        'solvetime_max' => 'float',
        'solvetime_mean' => 'float',
        'priority_min' => 'float',
        'priority_max' => 'float',
        'priority_mean' => 'float',
        'endorsement_rate' => 'float',
        'endorsements_min' => 'float',
        'endorsements_max' => 'float',
        'endorsements_mean' => 'float',
        'seed_rate' => 'float',
        'worst_baked_block' => 'float',
        'worst_endorsed_block' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cycle' => null,
        'start_height' => null,
        'end_height' => null,
        'start_time' => null,
        'end_time' => null,
        'progress' => null,
        'is_complete' => null,
        'is_snapshot' => null,
        'is_active' => null,
        'snapshot_height' => null,
        'snapshot_index' => null,
        'snapshot_time' => null,
        'rolls' => null,
        'roll_owners' => null,
        'active_delegators' => null,
        'active_bakers' => null,
        'staking_supply' => null,
        'staking_percent' => null,
        'working_bakers' => null,
        'working_endorsers' => null,
        'missed_priorities' => null,
        'missed_endorsements' => null,
        'n_double_baking' => null,
        'n_double_endorsement' => null,
        'n_orphans' => null,
        'solvetime_min' => null,
        'solvetime_max' => null,
        'solvetime_mean' => null,
        'priority_min' => null,
        'priority_max' => null,
        'priority_mean' => null,
        'endorsement_rate' => null,
        'endorsements_min' => null,
        'endorsements_max' => null,
        'endorsements_mean' => null,
        'seed_rate' => null,
        'worst_baked_block' => null,
        'worst_endorsed_block' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cycle' => 'cycle',
        'start_height' => 'start_height',
        'end_height' => 'end_height',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'progress' => 'progress',
        'is_complete' => 'is_complete',
        'is_snapshot' => 'is_snapshot',
        'is_active' => 'is_active',
        'snapshot_height' => 'snapshot_height',
        'snapshot_index' => 'snapshot_index',
        'snapshot_time' => 'snapshot_time',
        'rolls' => 'rolls',
        'roll_owners' => 'roll_owners',
        'active_delegators' => 'active_delegators',
        'active_bakers' => 'active_bakers',
        'staking_supply' => 'staking_supply',
        'staking_percent' => 'staking_percent',
        'working_bakers' => 'working_bakers',
        'working_endorsers' => 'working_endorsers',
        'missed_priorities' => 'missed_priorities',
        'missed_endorsements' => 'missed_endorsements',
        'n_double_baking' => 'n_double_baking',
        'n_double_endorsement' => 'n_double_endorsement',
        'n_orphans' => 'n_orphans',
        'solvetime_min' => 'solvetime_min',
        'solvetime_max' => 'solvetime_max',
        'solvetime_mean' => 'solvetime_mean',
        'priority_min' => 'priority_min',
        'priority_max' => 'priority_max',
        'priority_mean' => 'priority_mean',
        'endorsement_rate' => 'endorsement_rate',
        'endorsements_min' => 'endorsements_min',
        'endorsements_max' => 'endorsements_max',
        'endorsements_mean' => 'endorsements_mean',
        'seed_rate' => 'seed_rate',
        'worst_baked_block' => 'worst_baked_block',
        'worst_endorsed_block' => 'worst_endorsed_block'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cycle' => 'setCycle',
        'start_height' => 'setStartHeight',
        'end_height' => 'setEndHeight',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'progress' => 'setProgress',
        'is_complete' => 'setIsComplete',
        'is_snapshot' => 'setIsSnapshot',
        'is_active' => 'setIsActive',
        'snapshot_height' => 'setSnapshotHeight',
        'snapshot_index' => 'setSnapshotIndex',
        'snapshot_time' => 'setSnapshotTime',
        'rolls' => 'setRolls',
        'roll_owners' => 'setRollOwners',
        'active_delegators' => 'setActiveDelegators',
        'active_bakers' => 'setActiveBakers',
        'staking_supply' => 'setStakingSupply',
        'staking_percent' => 'setStakingPercent',
        'working_bakers' => 'setWorkingBakers',
        'working_endorsers' => 'setWorkingEndorsers',
        'missed_priorities' => 'setMissedPriorities',
        'missed_endorsements' => 'setMissedEndorsements',
        'n_double_baking' => 'setNDoubleBaking',
        'n_double_endorsement' => 'setNDoubleEndorsement',
        'n_orphans' => 'setNOrphans',
        'solvetime_min' => 'setSolvetimeMin',
        'solvetime_max' => 'setSolvetimeMax',
        'solvetime_mean' => 'setSolvetimeMean',
        'priority_min' => 'setPriorityMin',
        'priority_max' => 'setPriorityMax',
        'priority_mean' => 'setPriorityMean',
        'endorsement_rate' => 'setEndorsementRate',
        'endorsements_min' => 'setEndorsementsMin',
        'endorsements_max' => 'setEndorsementsMax',
        'endorsements_mean' => 'setEndorsementsMean',
        'seed_rate' => 'setSeedRate',
        'worst_baked_block' => 'setWorstBakedBlock',
        'worst_endorsed_block' => 'setWorstEndorsedBlock'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cycle' => 'getCycle',
        'start_height' => 'getStartHeight',
        'end_height' => 'getEndHeight',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'progress' => 'getProgress',
        'is_complete' => 'getIsComplete',
        'is_snapshot' => 'getIsSnapshot',
        'is_active' => 'getIsActive',
        'snapshot_height' => 'getSnapshotHeight',
        'snapshot_index' => 'getSnapshotIndex',
        'snapshot_time' => 'getSnapshotTime',
        'rolls' => 'getRolls',
        'roll_owners' => 'getRollOwners',
        'active_delegators' => 'getActiveDelegators',
        'active_bakers' => 'getActiveBakers',
        'staking_supply' => 'getStakingSupply',
        'staking_percent' => 'getStakingPercent',
        'working_bakers' => 'getWorkingBakers',
        'working_endorsers' => 'getWorkingEndorsers',
        'missed_priorities' => 'getMissedPriorities',
        'missed_endorsements' => 'getMissedEndorsements',
        'n_double_baking' => 'getNDoubleBaking',
        'n_double_endorsement' => 'getNDoubleEndorsement',
        'n_orphans' => 'getNOrphans',
        'solvetime_min' => 'getSolvetimeMin',
        'solvetime_max' => 'getSolvetimeMax',
        'solvetime_mean' => 'getSolvetimeMean',
        'priority_min' => 'getPriorityMin',
        'priority_max' => 'getPriorityMax',
        'priority_mean' => 'getPriorityMean',
        'endorsement_rate' => 'getEndorsementRate',
        'endorsements_min' => 'getEndorsementsMin',
        'endorsements_max' => 'getEndorsementsMax',
        'endorsements_mean' => 'getEndorsementsMean',
        'seed_rate' => 'getSeedRate',
        'worst_baked_block' => 'getWorstBakedBlock',
        'worst_endorsed_block' => 'getWorstEndorsedBlock'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['start_height'] = $data['start_height'] ?? null;
        $this->container['end_height'] = $data['end_height'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['progress'] = $data['progress'] ?? null;
        $this->container['is_complete'] = $data['is_complete'] ?? null;
        $this->container['is_snapshot'] = $data['is_snapshot'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['snapshot_height'] = $data['snapshot_height'] ?? null;
        $this->container['snapshot_index'] = $data['snapshot_index'] ?? null;
        $this->container['snapshot_time'] = $data['snapshot_time'] ?? null;
        $this->container['rolls'] = $data['rolls'] ?? null;
        $this->container['roll_owners'] = $data['roll_owners'] ?? null;
        $this->container['active_delegators'] = $data['active_delegators'] ?? null;
        $this->container['active_bakers'] = $data['active_bakers'] ?? null;
        $this->container['staking_supply'] = $data['staking_supply'] ?? null;
        $this->container['staking_percent'] = $data['staking_percent'] ?? null;
        $this->container['working_bakers'] = $data['working_bakers'] ?? null;
        $this->container['working_endorsers'] = $data['working_endorsers'] ?? null;
        $this->container['missed_priorities'] = $data['missed_priorities'] ?? null;
        $this->container['missed_endorsements'] = $data['missed_endorsements'] ?? null;
        $this->container['n_double_baking'] = $data['n_double_baking'] ?? null;
        $this->container['n_double_endorsement'] = $data['n_double_endorsement'] ?? null;
        $this->container['n_orphans'] = $data['n_orphans'] ?? null;
        $this->container['solvetime_min'] = $data['solvetime_min'] ?? null;
        $this->container['solvetime_max'] = $data['solvetime_max'] ?? null;
        $this->container['solvetime_mean'] = $data['solvetime_mean'] ?? null;
        $this->container['priority_min'] = $data['priority_min'] ?? null;
        $this->container['priority_max'] = $data['priority_max'] ?? null;
        $this->container['priority_mean'] = $data['priority_mean'] ?? null;
        $this->container['endorsement_rate'] = $data['endorsement_rate'] ?? null;
        $this->container['endorsements_min'] = $data['endorsements_min'] ?? null;
        $this->container['endorsements_max'] = $data['endorsements_max'] ?? null;
        $this->container['endorsements_mean'] = $data['endorsements_mean'] ?? null;
        $this->container['seed_rate'] = $data['seed_rate'] ?? null;
        $this->container['worst_baked_block'] = $data['worst_baked_block'] ?? null;
        $this->container['worst_endorsed_block'] = $data['worst_endorsed_block'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cycle'] === null) {
            $invalidProperties[] = "'cycle' can't be null";
        }
        if ($this->container['start_height'] === null) {
            $invalidProperties[] = "'start_height' can't be null";
        }
        if ($this->container['end_height'] === null) {
            $invalidProperties[] = "'end_height' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ((mb_strlen($this->container['start_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'start_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ((mb_strlen($this->container['end_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'end_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        if ($this->container['is_complete'] === null) {
            $invalidProperties[] = "'is_complete' can't be null";
        }
        if ($this->container['is_snapshot'] === null) {
            $invalidProperties[] = "'is_snapshot' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['snapshot_height'] === null) {
            $invalidProperties[] = "'snapshot_height' can't be null";
        }
        if ($this->container['snapshot_index'] === null) {
            $invalidProperties[] = "'snapshot_index' can't be null";
        }
        if ($this->container['snapshot_time'] === null) {
            $invalidProperties[] = "'snapshot_time' can't be null";
        }
        if ((mb_strlen($this->container['snapshot_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'snapshot_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['rolls'] === null) {
            $invalidProperties[] = "'rolls' can't be null";
        }
        if ($this->container['roll_owners'] === null) {
            $invalidProperties[] = "'roll_owners' can't be null";
        }
        if ($this->container['active_delegators'] === null) {
            $invalidProperties[] = "'active_delegators' can't be null";
        }
        if ($this->container['active_bakers'] === null) {
            $invalidProperties[] = "'active_bakers' can't be null";
        }
        if ($this->container['staking_supply'] === null) {
            $invalidProperties[] = "'staking_supply' can't be null";
        }
        if ($this->container['staking_percent'] === null) {
            $invalidProperties[] = "'staking_percent' can't be null";
        }
        if ($this->container['working_bakers'] === null) {
            $invalidProperties[] = "'working_bakers' can't be null";
        }
        if ($this->container['working_endorsers'] === null) {
            $invalidProperties[] = "'working_endorsers' can't be null";
        }
        if ($this->container['missed_priorities'] === null) {
            $invalidProperties[] = "'missed_priorities' can't be null";
        }
        if ($this->container['missed_endorsements'] === null) {
            $invalidProperties[] = "'missed_endorsements' can't be null";
        }
        if ($this->container['n_double_baking'] === null) {
            $invalidProperties[] = "'n_double_baking' can't be null";
        }
        if ($this->container['n_double_endorsement'] === null) {
            $invalidProperties[] = "'n_double_endorsement' can't be null";
        }
        if ($this->container['n_orphans'] === null) {
            $invalidProperties[] = "'n_orphans' can't be null";
        }
        if ($this->container['solvetime_min'] === null) {
            $invalidProperties[] = "'solvetime_min' can't be null";
        }
        if ($this->container['solvetime_max'] === null) {
            $invalidProperties[] = "'solvetime_max' can't be null";
        }
        if ($this->container['solvetime_mean'] === null) {
            $invalidProperties[] = "'solvetime_mean' can't be null";
        }
        if ($this->container['priority_min'] === null) {
            $invalidProperties[] = "'priority_min' can't be null";
        }
        if ($this->container['priority_max'] === null) {
            $invalidProperties[] = "'priority_max' can't be null";
        }
        if ($this->container['priority_mean'] === null) {
            $invalidProperties[] = "'priority_mean' can't be null";
        }
        if ($this->container['endorsement_rate'] === null) {
            $invalidProperties[] = "'endorsement_rate' can't be null";
        }
        if ($this->container['endorsements_min'] === null) {
            $invalidProperties[] = "'endorsements_min' can't be null";
        }
        if ($this->container['endorsements_max'] === null) {
            $invalidProperties[] = "'endorsements_max' can't be null";
        }
        if ($this->container['endorsements_mean'] === null) {
            $invalidProperties[] = "'endorsements_mean' can't be null";
        }
        if ($this->container['seed_rate'] === null) {
            $invalidProperties[] = "'seed_rate' can't be null";
        }
        if ($this->container['worst_baked_block'] === null) {
            $invalidProperties[] = "'worst_baked_block' can't be null";
        }
        if ($this->container['worst_endorsed_block'] === null) {
            $invalidProperties[] = "'worst_endorsed_block' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cycle
     *
     * @return float
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param float $cycle cycle
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets start_height
     *
     * @return float
     */
    public function getStartHeight()
    {
        return $this->container['start_height'];
    }

    /**
     * Sets start_height
     *
     * @param float $start_height start_height
     *
     * @return self
     */
    public function setStartHeight($start_height)
    {
        $this->container['start_height'] = $start_height;

        return $this;
    }

    /**
     * Gets end_height
     *
     * @return float
     */
    public function getEndHeight()
    {
        return $this->container['end_height'];
    }

    /**
     * Sets end_height
     *
     * @param float $end_height end_height
     *
     * @return self
     */
    public function setEndHeight($end_height)
    {
        $this->container['end_height'] = $end_height;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {

        if ((mb_strlen($start_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $start_time when calling InlineResponse20010SnapshotCycle., must be bigger than or equal to 1.');
        }

        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return self
     */
    public function setEndTime($end_time)
    {

        if ((mb_strlen($end_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $end_time when calling InlineResponse20010SnapshotCycle., must be bigger than or equal to 1.');
        }

        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return float
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param float $progress progress
     *
     * @return self
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets is_complete
     *
     * @return bool
     */
    public function getIsComplete()
    {
        return $this->container['is_complete'];
    }

    /**
     * Sets is_complete
     *
     * @param bool $is_complete is_complete
     *
     * @return self
     */
    public function setIsComplete($is_complete)
    {
        $this->container['is_complete'] = $is_complete;

        return $this;
    }

    /**
     * Gets is_snapshot
     *
     * @return bool
     */
    public function getIsSnapshot()
    {
        return $this->container['is_snapshot'];
    }

    /**
     * Sets is_snapshot
     *
     * @param bool $is_snapshot is_snapshot
     *
     * @return self
     */
    public function setIsSnapshot($is_snapshot)
    {
        $this->container['is_snapshot'] = $is_snapshot;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets snapshot_height
     *
     * @return float
     */
    public function getSnapshotHeight()
    {
        return $this->container['snapshot_height'];
    }

    /**
     * Sets snapshot_height
     *
     * @param float $snapshot_height snapshot_height
     *
     * @return self
     */
    public function setSnapshotHeight($snapshot_height)
    {
        $this->container['snapshot_height'] = $snapshot_height;

        return $this;
    }

    /**
     * Gets snapshot_index
     *
     * @return float
     */
    public function getSnapshotIndex()
    {
        return $this->container['snapshot_index'];
    }

    /**
     * Sets snapshot_index
     *
     * @param float $snapshot_index snapshot_index
     *
     * @return self
     */
    public function setSnapshotIndex($snapshot_index)
    {
        $this->container['snapshot_index'] = $snapshot_index;

        return $this;
    }

    /**
     * Gets snapshot_time
     *
     * @return string
     */
    public function getSnapshotTime()
    {
        return $this->container['snapshot_time'];
    }

    /**
     * Sets snapshot_time
     *
     * @param string $snapshot_time snapshot_time
     *
     * @return self
     */
    public function setSnapshotTime($snapshot_time)
    {

        if ((mb_strlen($snapshot_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $snapshot_time when calling InlineResponse20010SnapshotCycle., must be bigger than or equal to 1.');
        }

        $this->container['snapshot_time'] = $snapshot_time;

        return $this;
    }

    /**
     * Gets rolls
     *
     * @return float
     */
    public function getRolls()
    {
        return $this->container['rolls'];
    }

    /**
     * Sets rolls
     *
     * @param float $rolls rolls
     *
     * @return self
     */
    public function setRolls($rolls)
    {
        $this->container['rolls'] = $rolls;

        return $this;
    }

    /**
     * Gets roll_owners
     *
     * @return float
     */
    public function getRollOwners()
    {
        return $this->container['roll_owners'];
    }

    /**
     * Sets roll_owners
     *
     * @param float $roll_owners roll_owners
     *
     * @return self
     */
    public function setRollOwners($roll_owners)
    {
        $this->container['roll_owners'] = $roll_owners;

        return $this;
    }

    /**
     * Gets active_delegators
     *
     * @return float
     */
    public function getActiveDelegators()
    {
        return $this->container['active_delegators'];
    }

    /**
     * Sets active_delegators
     *
     * @param float $active_delegators active_delegators
     *
     * @return self
     */
    public function setActiveDelegators($active_delegators)
    {
        $this->container['active_delegators'] = $active_delegators;

        return $this;
    }

    /**
     * Gets active_bakers
     *
     * @return float
     */
    public function getActiveBakers()
    {
        return $this->container['active_bakers'];
    }

    /**
     * Sets active_bakers
     *
     * @param float $active_bakers active_bakers
     *
     * @return self
     */
    public function setActiveBakers($active_bakers)
    {
        $this->container['active_bakers'] = $active_bakers;

        return $this;
    }

    /**
     * Gets staking_supply
     *
     * @return float
     */
    public function getStakingSupply()
    {
        return $this->container['staking_supply'];
    }

    /**
     * Sets staking_supply
     *
     * @param float $staking_supply staking_supply
     *
     * @return self
     */
    public function setStakingSupply($staking_supply)
    {
        $this->container['staking_supply'] = $staking_supply;

        return $this;
    }

    /**
     * Gets staking_percent
     *
     * @return float
     */
    public function getStakingPercent()
    {
        return $this->container['staking_percent'];
    }

    /**
     * Sets staking_percent
     *
     * @param float $staking_percent staking_percent
     *
     * @return self
     */
    public function setStakingPercent($staking_percent)
    {
        $this->container['staking_percent'] = $staking_percent;

        return $this;
    }

    /**
     * Gets working_bakers
     *
     * @return float
     */
    public function getWorkingBakers()
    {
        return $this->container['working_bakers'];
    }

    /**
     * Sets working_bakers
     *
     * @param float $working_bakers working_bakers
     *
     * @return self
     */
    public function setWorkingBakers($working_bakers)
    {
        $this->container['working_bakers'] = $working_bakers;

        return $this;
    }

    /**
     * Gets working_endorsers
     *
     * @return float
     */
    public function getWorkingEndorsers()
    {
        return $this->container['working_endorsers'];
    }

    /**
     * Sets working_endorsers
     *
     * @param float $working_endorsers working_endorsers
     *
     * @return self
     */
    public function setWorkingEndorsers($working_endorsers)
    {
        $this->container['working_endorsers'] = $working_endorsers;

        return $this;
    }

    /**
     * Gets missed_priorities
     *
     * @return float
     */
    public function getMissedPriorities()
    {
        return $this->container['missed_priorities'];
    }

    /**
     * Sets missed_priorities
     *
     * @param float $missed_priorities missed_priorities
     *
     * @return self
     */
    public function setMissedPriorities($missed_priorities)
    {
        $this->container['missed_priorities'] = $missed_priorities;

        return $this;
    }

    /**
     * Gets missed_endorsements
     *
     * @return float
     */
    public function getMissedEndorsements()
    {
        return $this->container['missed_endorsements'];
    }

    /**
     * Sets missed_endorsements
     *
     * @param float $missed_endorsements missed_endorsements
     *
     * @return self
     */
    public function setMissedEndorsements($missed_endorsements)
    {
        $this->container['missed_endorsements'] = $missed_endorsements;

        return $this;
    }

    /**
     * Gets n_double_baking
     *
     * @return float
     */
    public function getNDoubleBaking()
    {
        return $this->container['n_double_baking'];
    }

    /**
     * Sets n_double_baking
     *
     * @param float $n_double_baking n_double_baking
     *
     * @return self
     */
    public function setNDoubleBaking($n_double_baking)
    {
        $this->container['n_double_baking'] = $n_double_baking;

        return $this;
    }

    /**
     * Gets n_double_endorsement
     *
     * @return float
     */
    public function getNDoubleEndorsement()
    {
        return $this->container['n_double_endorsement'];
    }

    /**
     * Sets n_double_endorsement
     *
     * @param float $n_double_endorsement n_double_endorsement
     *
     * @return self
     */
    public function setNDoubleEndorsement($n_double_endorsement)
    {
        $this->container['n_double_endorsement'] = $n_double_endorsement;

        return $this;
    }

    /**
     * Gets n_orphans
     *
     * @return float
     */
    public function getNOrphans()
    {
        return $this->container['n_orphans'];
    }

    /**
     * Sets n_orphans
     *
     * @param float $n_orphans n_orphans
     *
     * @return self
     */
    public function setNOrphans($n_orphans)
    {
        $this->container['n_orphans'] = $n_orphans;

        return $this;
    }

    /**
     * Gets solvetime_min
     *
     * @return float
     */
    public function getSolvetimeMin()
    {
        return $this->container['solvetime_min'];
    }

    /**
     * Sets solvetime_min
     *
     * @param float $solvetime_min solvetime_min
     *
     * @return self
     */
    public function setSolvetimeMin($solvetime_min)
    {
        $this->container['solvetime_min'] = $solvetime_min;

        return $this;
    }

    /**
     * Gets solvetime_max
     *
     * @return float
     */
    public function getSolvetimeMax()
    {
        return $this->container['solvetime_max'];
    }

    /**
     * Sets solvetime_max
     *
     * @param float $solvetime_max solvetime_max
     *
     * @return self
     */
    public function setSolvetimeMax($solvetime_max)
    {
        $this->container['solvetime_max'] = $solvetime_max;

        return $this;
    }

    /**
     * Gets solvetime_mean
     *
     * @return float
     */
    public function getSolvetimeMean()
    {
        return $this->container['solvetime_mean'];
    }

    /**
     * Sets solvetime_mean
     *
     * @param float $solvetime_mean solvetime_mean
     *
     * @return self
     */
    public function setSolvetimeMean($solvetime_mean)
    {
        $this->container['solvetime_mean'] = $solvetime_mean;

        return $this;
    }

    /**
     * Gets priority_min
     *
     * @return float
     */
    public function getPriorityMin()
    {
        return $this->container['priority_min'];
    }

    /**
     * Sets priority_min
     *
     * @param float $priority_min priority_min
     *
     * @return self
     */
    public function setPriorityMin($priority_min)
    {
        $this->container['priority_min'] = $priority_min;

        return $this;
    }

    /**
     * Gets priority_max
     *
     * @return float
     */
    public function getPriorityMax()
    {
        return $this->container['priority_max'];
    }

    /**
     * Sets priority_max
     *
     * @param float $priority_max priority_max
     *
     * @return self
     */
    public function setPriorityMax($priority_max)
    {
        $this->container['priority_max'] = $priority_max;

        return $this;
    }

    /**
     * Gets priority_mean
     *
     * @return float
     */
    public function getPriorityMean()
    {
        return $this->container['priority_mean'];
    }

    /**
     * Sets priority_mean
     *
     * @param float $priority_mean priority_mean
     *
     * @return self
     */
    public function setPriorityMean($priority_mean)
    {
        $this->container['priority_mean'] = $priority_mean;

        return $this;
    }

    /**
     * Gets endorsement_rate
     *
     * @return float
     */
    public function getEndorsementRate()
    {
        return $this->container['endorsement_rate'];
    }

    /**
     * Sets endorsement_rate
     *
     * @param float $endorsement_rate endorsement_rate
     *
     * @return self
     */
    public function setEndorsementRate($endorsement_rate)
    {
        $this->container['endorsement_rate'] = $endorsement_rate;

        return $this;
    }

    /**
     * Gets endorsements_min
     *
     * @return float
     */
    public function getEndorsementsMin()
    {
        return $this->container['endorsements_min'];
    }

    /**
     * Sets endorsements_min
     *
     * @param float $endorsements_min endorsements_min
     *
     * @return self
     */
    public function setEndorsementsMin($endorsements_min)
    {
        $this->container['endorsements_min'] = $endorsements_min;

        return $this;
    }

    /**
     * Gets endorsements_max
     *
     * @return float
     */
    public function getEndorsementsMax()
    {
        return $this->container['endorsements_max'];
    }

    /**
     * Sets endorsements_max
     *
     * @param float $endorsements_max endorsements_max
     *
     * @return self
     */
    public function setEndorsementsMax($endorsements_max)
    {
        $this->container['endorsements_max'] = $endorsements_max;

        return $this;
    }

    /**
     * Gets endorsements_mean
     *
     * @return float
     */
    public function getEndorsementsMean()
    {
        return $this->container['endorsements_mean'];
    }

    /**
     * Sets endorsements_mean
     *
     * @param float $endorsements_mean endorsements_mean
     *
     * @return self
     */
    public function setEndorsementsMean($endorsements_mean)
    {
        $this->container['endorsements_mean'] = $endorsements_mean;

        return $this;
    }

    /**
     * Gets seed_rate
     *
     * @return float
     */
    public function getSeedRate()
    {
        return $this->container['seed_rate'];
    }

    /**
     * Sets seed_rate
     *
     * @param float $seed_rate seed_rate
     *
     * @return self
     */
    public function setSeedRate($seed_rate)
    {
        $this->container['seed_rate'] = $seed_rate;

        return $this;
    }

    /**
     * Gets worst_baked_block
     *
     * @return float
     */
    public function getWorstBakedBlock()
    {
        return $this->container['worst_baked_block'];
    }

    /**
     * Sets worst_baked_block
     *
     * @param float $worst_baked_block worst_baked_block
     *
     * @return self
     */
    public function setWorstBakedBlock($worst_baked_block)
    {
        $this->container['worst_baked_block'] = $worst_baked_block;

        return $this;
    }

    /**
     * Gets worst_endorsed_block
     *
     * @return float
     */
    public function getWorstEndorsedBlock()
    {
        return $this->container['worst_endorsed_block'];
    }

    /**
     * Sets worst_endorsed_block
     *
     * @param float $worst_endorsed_block worst_endorsed_block
     *
     * @return self
     */
    public function setWorstEndorsedBlock($worst_endorsed_block)
    {
        $this->container['worst_endorsed_block'] = $worst_endorsed_block;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


