<?php
/**
 * Operation
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzStats API - PHP SDK
 *
 * API for TZstats.com, useful for viewing information about the Tezos blockchain.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@ideaengine.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * Operation Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Operation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Operation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'row_id' => 'float',
        'hash' => 'string',
        'type' => 'string',
        'block' => 'string',
        'time' => 'string',
        'height' => 'float',
        'cycle' => 'float',
        'counter' => 'float',
        'op_l' => 'float',
        'op_p' => 'float',
        'op_c' => 'float',
        'op_i' => 'float',
        'status' => 'string',
        'is_success' => 'bool',
        'is_contract' => 'bool',
        'gas_limit' => 'float',
        'gas_used' => 'float',
        'gas_price' => 'float',
        'storage_limit' => 'float',
        'storage_size' => 'float',
        'storage_paid' => 'float',
        'volume' => 'float',
        'fee' => 'float',
        'days_destroyed' => 'float',
        'sender' => 'string',
        'receiver' => 'string',
        'is_batch' => 'bool',
        'confirmations' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'row_id' => null,
        'hash' => null,
        'type' => null,
        'block' => null,
        'time' => null,
        'height' => null,
        'cycle' => null,
        'counter' => null,
        'op_l' => null,
        'op_p' => null,
        'op_c' => null,
        'op_i' => null,
        'status' => null,
        'is_success' => null,
        'is_contract' => null,
        'gas_limit' => null,
        'gas_used' => null,
        'gas_price' => null,
        'storage_limit' => null,
        'storage_size' => null,
        'storage_paid' => null,
        'volume' => null,
        'fee' => null,
        'days_destroyed' => null,
        'sender' => null,
        'receiver' => null,
        'is_batch' => null,
        'confirmations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'row_id' => 'row_id',
        'hash' => 'hash',
        'type' => 'type',
        'block' => 'block',
        'time' => 'time',
        'height' => 'height',
        'cycle' => 'cycle',
        'counter' => 'counter',
        'op_l' => 'op_l',
        'op_p' => 'op_p',
        'op_c' => 'op_c',
        'op_i' => 'op_i',
        'status' => 'status',
        'is_success' => 'is_success',
        'is_contract' => 'is_contract',
        'gas_limit' => 'gas_limit',
        'gas_used' => 'gas_used',
        'gas_price' => 'gas_price',
        'storage_limit' => 'storage_limit',
        'storage_size' => 'storage_size',
        'storage_paid' => 'storage_paid',
        'volume' => 'volume',
        'fee' => 'fee',
        'days_destroyed' => 'days_destroyed',
        'sender' => 'sender',
        'receiver' => 'receiver',
        'is_batch' => 'is_batch',
        'confirmations' => 'confirmations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'row_id' => 'setRowId',
        'hash' => 'setHash',
        'type' => 'setType',
        'block' => 'setBlock',
        'time' => 'setTime',
        'height' => 'setHeight',
        'cycle' => 'setCycle',
        'counter' => 'setCounter',
        'op_l' => 'setOpL',
        'op_p' => 'setOpP',
        'op_c' => 'setOpC',
        'op_i' => 'setOpI',
        'status' => 'setStatus',
        'is_success' => 'setIsSuccess',
        'is_contract' => 'setIsContract',
        'gas_limit' => 'setGasLimit',
        'gas_used' => 'setGasUsed',
        'gas_price' => 'setGasPrice',
        'storage_limit' => 'setStorageLimit',
        'storage_size' => 'setStorageSize',
        'storage_paid' => 'setStoragePaid',
        'volume' => 'setVolume',
        'fee' => 'setFee',
        'days_destroyed' => 'setDaysDestroyed',
        'sender' => 'setSender',
        'receiver' => 'setReceiver',
        'is_batch' => 'setIsBatch',
        'confirmations' => 'setConfirmations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'row_id' => 'getRowId',
        'hash' => 'getHash',
        'type' => 'getType',
        'block' => 'getBlock',
        'time' => 'getTime',
        'height' => 'getHeight',
        'cycle' => 'getCycle',
        'counter' => 'getCounter',
        'op_l' => 'getOpL',
        'op_p' => 'getOpP',
        'op_c' => 'getOpC',
        'op_i' => 'getOpI',
        'status' => 'getStatus',
        'is_success' => 'getIsSuccess',
        'is_contract' => 'getIsContract',
        'gas_limit' => 'getGasLimit',
        'gas_used' => 'getGasUsed',
        'gas_price' => 'getGasPrice',
        'storage_limit' => 'getStorageLimit',
        'storage_size' => 'getStorageSize',
        'storage_paid' => 'getStoragePaid',
        'volume' => 'getVolume',
        'fee' => 'getFee',
        'days_destroyed' => 'getDaysDestroyed',
        'sender' => 'getSender',
        'receiver' => 'getReceiver',
        'is_batch' => 'getIsBatch',
        'confirmations' => 'getConfirmations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['row_id'] = $data['row_id'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['block'] = $data['block'] ?? null;
        $this->container['time'] = $data['time'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['counter'] = $data['counter'] ?? null;
        $this->container['op_l'] = $data['op_l'] ?? null;
        $this->container['op_p'] = $data['op_p'] ?? null;
        $this->container['op_c'] = $data['op_c'] ?? null;
        $this->container['op_i'] = $data['op_i'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['is_success'] = $data['is_success'] ?? null;
        $this->container['is_contract'] = $data['is_contract'] ?? null;
        $this->container['gas_limit'] = $data['gas_limit'] ?? null;
        $this->container['gas_used'] = $data['gas_used'] ?? null;
        $this->container['gas_price'] = $data['gas_price'] ?? null;
        $this->container['storage_limit'] = $data['storage_limit'] ?? null;
        $this->container['storage_size'] = $data['storage_size'] ?? null;
        $this->container['storage_paid'] = $data['storage_paid'] ?? null;
        $this->container['volume'] = $data['volume'] ?? null;
        $this->container['fee'] = $data['fee'] ?? null;
        $this->container['days_destroyed'] = $data['days_destroyed'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['receiver'] = $data['receiver'] ?? null;
        $this->container['is_batch'] = $data['is_batch'] ?? null;
        $this->container['confirmations'] = $data['confirmations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['row_id'] === null) {
            $invalidProperties[] = "'row_id' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ((mb_strlen($this->container['hash']) < 1)) {
            $invalidProperties[] = "invalid value for 'hash', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ((mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['block'] === null) {
            $invalidProperties[] = "'block' can't be null";
        }
        if ((mb_strlen($this->container['block']) < 1)) {
            $invalidProperties[] = "invalid value for 'block', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ((mb_strlen($this->container['time']) < 1)) {
            $invalidProperties[] = "invalid value for 'time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['cycle'] === null) {
            $invalidProperties[] = "'cycle' can't be null";
        }
        if ($this->container['counter'] === null) {
            $invalidProperties[] = "'counter' can't be null";
        }
        if ($this->container['op_l'] === null) {
            $invalidProperties[] = "'op_l' can't be null";
        }
        if ($this->container['op_p'] === null) {
            $invalidProperties[] = "'op_p' can't be null";
        }
        if ($this->container['op_c'] === null) {
            $invalidProperties[] = "'op_c' can't be null";
        }
        if ($this->container['op_i'] === null) {
            $invalidProperties[] = "'op_i' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ((mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['is_success'] === null) {
            $invalidProperties[] = "'is_success' can't be null";
        }
        if ($this->container['is_contract'] === null) {
            $invalidProperties[] = "'is_contract' can't be null";
        }
        if ($this->container['gas_limit'] === null) {
            $invalidProperties[] = "'gas_limit' can't be null";
        }
        if ($this->container['gas_used'] === null) {
            $invalidProperties[] = "'gas_used' can't be null";
        }
        if ($this->container['gas_price'] === null) {
            $invalidProperties[] = "'gas_price' can't be null";
        }
        if ($this->container['storage_limit'] === null) {
            $invalidProperties[] = "'storage_limit' can't be null";
        }
        if ($this->container['storage_size'] === null) {
            $invalidProperties[] = "'storage_size' can't be null";
        }
        if ($this->container['storage_paid'] === null) {
            $invalidProperties[] = "'storage_paid' can't be null";
        }
        if ($this->container['volume'] === null) {
            $invalidProperties[] = "'volume' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['days_destroyed'] === null) {
            $invalidProperties[] = "'days_destroyed' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ((mb_strlen($this->container['sender']) < 1)) {
            $invalidProperties[] = "invalid value for 'sender', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['receiver'] === null) {
            $invalidProperties[] = "'receiver' can't be null";
        }
        if ((mb_strlen($this->container['receiver']) < 1)) {
            $invalidProperties[] = "invalid value for 'receiver', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['is_batch'] === null) {
            $invalidProperties[] = "'is_batch' can't be null";
        }
        if ($this->container['confirmations'] === null) {
            $invalidProperties[] = "'confirmations' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets row_id
     *
     * @return float
     */
    public function getRowId()
    {
        return $this->container['row_id'];
    }

    /**
     * Sets row_id
     *
     * @param float $row_id row_id
     *
     * @return self
     */
    public function setRowId($row_id)
    {
        $this->container['row_id'] = $row_id;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {

        if ((mb_strlen($hash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hash when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if ((mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets block
     *
     * @return string
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param string $block block
     *
     * @return self
     */
    public function setBlock($block)
    {

        if ((mb_strlen($block) < 1)) {
            throw new \InvalidArgumentException('invalid length for $block when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return self
     */
    public function setTime($time)
    {

        if ((mb_strlen($time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $time when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets cycle
     *
     * @return float
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param float $cycle cycle
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets counter
     *
     * @return float
     */
    public function getCounter()
    {
        return $this->container['counter'];
    }

    /**
     * Sets counter
     *
     * @param float $counter counter
     *
     * @return self
     */
    public function setCounter($counter)
    {
        $this->container['counter'] = $counter;

        return $this;
    }

    /**
     * Gets op_l
     *
     * @return float
     */
    public function getOpL()
    {
        return $this->container['op_l'];
    }

    /**
     * Sets op_l
     *
     * @param float $op_l op_l
     *
     * @return self
     */
    public function setOpL($op_l)
    {
        $this->container['op_l'] = $op_l;

        return $this;
    }

    /**
     * Gets op_p
     *
     * @return float
     */
    public function getOpP()
    {
        return $this->container['op_p'];
    }

    /**
     * Sets op_p
     *
     * @param float $op_p op_p
     *
     * @return self
     */
    public function setOpP($op_p)
    {
        $this->container['op_p'] = $op_p;

        return $this;
    }

    /**
     * Gets op_c
     *
     * @return float
     */
    public function getOpC()
    {
        return $this->container['op_c'];
    }

    /**
     * Sets op_c
     *
     * @param float $op_c op_c
     *
     * @return self
     */
    public function setOpC($op_c)
    {
        $this->container['op_c'] = $op_c;

        return $this;
    }

    /**
     * Gets op_i
     *
     * @return float
     */
    public function getOpI()
    {
        return $this->container['op_i'];
    }

    /**
     * Sets op_i
     *
     * @param float $op_i op_i
     *
     * @return self
     */
    public function setOpI($op_i)
    {
        $this->container['op_i'] = $op_i;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if ((mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_success
     *
     * @return bool
     */
    public function getIsSuccess()
    {
        return $this->container['is_success'];
    }

    /**
     * Sets is_success
     *
     * @param bool $is_success is_success
     *
     * @return self
     */
    public function setIsSuccess($is_success)
    {
        $this->container['is_success'] = $is_success;

        return $this;
    }

    /**
     * Gets is_contract
     *
     * @return bool
     */
    public function getIsContract()
    {
        return $this->container['is_contract'];
    }

    /**
     * Sets is_contract
     *
     * @param bool $is_contract is_contract
     *
     * @return self
     */
    public function setIsContract($is_contract)
    {
        $this->container['is_contract'] = $is_contract;

        return $this;
    }

    /**
     * Gets gas_limit
     *
     * @return float
     */
    public function getGasLimit()
    {
        return $this->container['gas_limit'];
    }

    /**
     * Sets gas_limit
     *
     * @param float $gas_limit gas_limit
     *
     * @return self
     */
    public function setGasLimit($gas_limit)
    {
        $this->container['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Gets gas_used
     *
     * @return float
     */
    public function getGasUsed()
    {
        return $this->container['gas_used'];
    }

    /**
     * Sets gas_used
     *
     * @param float $gas_used gas_used
     *
     * @return self
     */
    public function setGasUsed($gas_used)
    {
        $this->container['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Gets gas_price
     *
     * @return float
     */
    public function getGasPrice()
    {
        return $this->container['gas_price'];
    }

    /**
     * Sets gas_price
     *
     * @param float $gas_price gas_price
     *
     * @return self
     */
    public function setGasPrice($gas_price)
    {
        $this->container['gas_price'] = $gas_price;

        return $this;
    }

    /**
     * Gets storage_limit
     *
     * @return float
     */
    public function getStorageLimit()
    {
        return $this->container['storage_limit'];
    }

    /**
     * Sets storage_limit
     *
     * @param float $storage_limit storage_limit
     *
     * @return self
     */
    public function setStorageLimit($storage_limit)
    {
        $this->container['storage_limit'] = $storage_limit;

        return $this;
    }

    /**
     * Gets storage_size
     *
     * @return float
     */
    public function getStorageSize()
    {
        return $this->container['storage_size'];
    }

    /**
     * Sets storage_size
     *
     * @param float $storage_size storage_size
     *
     * @return self
     */
    public function setStorageSize($storage_size)
    {
        $this->container['storage_size'] = $storage_size;

        return $this;
    }

    /**
     * Gets storage_paid
     *
     * @return float
     */
    public function getStoragePaid()
    {
        return $this->container['storage_paid'];
    }

    /**
     * Sets storage_paid
     *
     * @param float $storage_paid storage_paid
     *
     * @return self
     */
    public function setStoragePaid($storage_paid)
    {
        $this->container['storage_paid'] = $storage_paid;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets days_destroyed
     *
     * @return float
     */
    public function getDaysDestroyed()
    {
        return $this->container['days_destroyed'];
    }

    /**
     * Sets days_destroyed
     *
     * @param float $days_destroyed days_destroyed
     *
     * @return self
     */
    public function setDaysDestroyed($days_destroyed)
    {
        $this->container['days_destroyed'] = $days_destroyed;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {

        if ((mb_strlen($sender) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sender when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return string
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param string $receiver receiver
     *
     * @return self
     */
    public function setReceiver($receiver)
    {

        if ((mb_strlen($receiver) < 1)) {
            throw new \InvalidArgumentException('invalid length for $receiver when calling Operation., must be bigger than or equal to 1.');
        }

        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets is_batch
     *
     * @return bool
     */
    public function getIsBatch()
    {
        return $this->container['is_batch'];
    }

    /**
     * Sets is_batch
     *
     * @param bool $is_batch is_batch
     *
     * @return self
     */
    public function setIsBatch($is_batch)
    {
        $this->container['is_batch'] = $is_batch;

        return $this;
    }

    /**
     * Gets confirmations
     *
     * @return float
     */
    public function getConfirmations()
    {
        return $this->container['confirmations'];
    }

    /**
     * Sets confirmations
     *
     * @param float $confirmations confirmations
     *
     * @return self
     */
    public function setConfirmations($confirmations)
    {
        $this->container['confirmations'] = $confirmations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


