<?php
/**
 * InlineResponse2004
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzStats API - PHP SDK
 *
 * API for TZstats.com, useful for viewing information about the Tezos blockchain.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@ideaengine.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TzStats\Model;

use \ArrayAccess;
use \IdeaEngine\TzStats\ObjectSerializer;

/**
 * InlineResponse2004 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TzStats
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2004 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contract' => 'string',
        'bigmap_id' => 'float',
        'n_updates' => 'float',
        'n_keys' => 'float',
        'alloc_height' => 'float',
        'alloc_block' => 'string',
        'alloc_time' => 'string',
        'update_height' => 'float',
        'update_block' => 'string',
        'update_time' => 'string',
        'key_type' => '\IdeaEngine\TzStats\Model\InlineResponse2004KeyType',
        'value_type' => '\IdeaEngine\TzStats\Model\InlineResponse2004ValueType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contract' => null,
        'bigmap_id' => null,
        'n_updates' => null,
        'n_keys' => null,
        'alloc_height' => null,
        'alloc_block' => null,
        'alloc_time' => null,
        'update_height' => null,
        'update_block' => null,
        'update_time' => null,
        'key_type' => null,
        'value_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract' => 'contract',
        'bigmap_id' => 'bigmap_id',
        'n_updates' => 'n_updates',
        'n_keys' => 'n_keys',
        'alloc_height' => 'alloc_height',
        'alloc_block' => 'alloc_block',
        'alloc_time' => 'alloc_time',
        'update_height' => 'update_height',
        'update_block' => 'update_block',
        'update_time' => 'update_time',
        'key_type' => 'key_type',
        'value_type' => 'value_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract' => 'setContract',
        'bigmap_id' => 'setBigmapId',
        'n_updates' => 'setNUpdates',
        'n_keys' => 'setNKeys',
        'alloc_height' => 'setAllocHeight',
        'alloc_block' => 'setAllocBlock',
        'alloc_time' => 'setAllocTime',
        'update_height' => 'setUpdateHeight',
        'update_block' => 'setUpdateBlock',
        'update_time' => 'setUpdateTime',
        'key_type' => 'setKeyType',
        'value_type' => 'setValueType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract' => 'getContract',
        'bigmap_id' => 'getBigmapId',
        'n_updates' => 'getNUpdates',
        'n_keys' => 'getNKeys',
        'alloc_height' => 'getAllocHeight',
        'alloc_block' => 'getAllocBlock',
        'alloc_time' => 'getAllocTime',
        'update_height' => 'getUpdateHeight',
        'update_block' => 'getUpdateBlock',
        'update_time' => 'getUpdateTime',
        'key_type' => 'getKeyType',
        'value_type' => 'getValueType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract'] = $data['contract'] ?? null;
        $this->container['bigmap_id'] = $data['bigmap_id'] ?? null;
        $this->container['n_updates'] = $data['n_updates'] ?? null;
        $this->container['n_keys'] = $data['n_keys'] ?? null;
        $this->container['alloc_height'] = $data['alloc_height'] ?? null;
        $this->container['alloc_block'] = $data['alloc_block'] ?? null;
        $this->container['alloc_time'] = $data['alloc_time'] ?? null;
        $this->container['update_height'] = $data['update_height'] ?? null;
        $this->container['update_block'] = $data['update_block'] ?? null;
        $this->container['update_time'] = $data['update_time'] ?? null;
        $this->container['key_type'] = $data['key_type'] ?? null;
        $this->container['value_type'] = $data['value_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contract'] === null) {
            $invalidProperties[] = "'contract' can't be null";
        }
        if ((mb_strlen($this->container['contract']) < 1)) {
            $invalidProperties[] = "invalid value for 'contract', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['bigmap_id'] === null) {
            $invalidProperties[] = "'bigmap_id' can't be null";
        }
        if ($this->container['n_updates'] === null) {
            $invalidProperties[] = "'n_updates' can't be null";
        }
        if ($this->container['n_keys'] === null) {
            $invalidProperties[] = "'n_keys' can't be null";
        }
        if ($this->container['alloc_height'] === null) {
            $invalidProperties[] = "'alloc_height' can't be null";
        }
        if ($this->container['alloc_block'] === null) {
            $invalidProperties[] = "'alloc_block' can't be null";
        }
        if ((mb_strlen($this->container['alloc_block']) < 1)) {
            $invalidProperties[] = "invalid value for 'alloc_block', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['alloc_time'] === null) {
            $invalidProperties[] = "'alloc_time' can't be null";
        }
        if ((mb_strlen($this->container['alloc_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'alloc_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['update_height'] === null) {
            $invalidProperties[] = "'update_height' can't be null";
        }
        if ($this->container['update_block'] === null) {
            $invalidProperties[] = "'update_block' can't be null";
        }
        if ((mb_strlen($this->container['update_block']) < 1)) {
            $invalidProperties[] = "invalid value for 'update_block', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ((mb_strlen($this->container['update_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'update_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['key_type'] === null) {
            $invalidProperties[] = "'key_type' can't be null";
        }
        if ($this->container['value_type'] === null) {
            $invalidProperties[] = "'value_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract
     *
     * @return string
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param string $contract contract
     *
     * @return self
     */
    public function setContract($contract)
    {

        if ((mb_strlen($contract) < 1)) {
            throw new \InvalidArgumentException('invalid length for $contract when calling InlineResponse2004., must be bigger than or equal to 1.');
        }

        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets bigmap_id
     *
     * @return float
     */
    public function getBigmapId()
    {
        return $this->container['bigmap_id'];
    }

    /**
     * Sets bigmap_id
     *
     * @param float $bigmap_id bigmap_id
     *
     * @return self
     */
    public function setBigmapId($bigmap_id)
    {
        $this->container['bigmap_id'] = $bigmap_id;

        return $this;
    }

    /**
     * Gets n_updates
     *
     * @return float
     */
    public function getNUpdates()
    {
        return $this->container['n_updates'];
    }

    /**
     * Sets n_updates
     *
     * @param float $n_updates n_updates
     *
     * @return self
     */
    public function setNUpdates($n_updates)
    {
        $this->container['n_updates'] = $n_updates;

        return $this;
    }

    /**
     * Gets n_keys
     *
     * @return float
     */
    public function getNKeys()
    {
        return $this->container['n_keys'];
    }

    /**
     * Sets n_keys
     *
     * @param float $n_keys n_keys
     *
     * @return self
     */
    public function setNKeys($n_keys)
    {
        $this->container['n_keys'] = $n_keys;

        return $this;
    }

    /**
     * Gets alloc_height
     *
     * @return float
     */
    public function getAllocHeight()
    {
        return $this->container['alloc_height'];
    }

    /**
     * Sets alloc_height
     *
     * @param float $alloc_height alloc_height
     *
     * @return self
     */
    public function setAllocHeight($alloc_height)
    {
        $this->container['alloc_height'] = $alloc_height;

        return $this;
    }

    /**
     * Gets alloc_block
     *
     * @return string
     */
    public function getAllocBlock()
    {
        return $this->container['alloc_block'];
    }

    /**
     * Sets alloc_block
     *
     * @param string $alloc_block alloc_block
     *
     * @return self
     */
    public function setAllocBlock($alloc_block)
    {

        if ((mb_strlen($alloc_block) < 1)) {
            throw new \InvalidArgumentException('invalid length for $alloc_block when calling InlineResponse2004., must be bigger than or equal to 1.');
        }

        $this->container['alloc_block'] = $alloc_block;

        return $this;
    }

    /**
     * Gets alloc_time
     *
     * @return string
     */
    public function getAllocTime()
    {
        return $this->container['alloc_time'];
    }

    /**
     * Sets alloc_time
     *
     * @param string $alloc_time alloc_time
     *
     * @return self
     */
    public function setAllocTime($alloc_time)
    {

        if ((mb_strlen($alloc_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $alloc_time when calling InlineResponse2004., must be bigger than or equal to 1.');
        }

        $this->container['alloc_time'] = $alloc_time;

        return $this;
    }

    /**
     * Gets update_height
     *
     * @return float
     */
    public function getUpdateHeight()
    {
        return $this->container['update_height'];
    }

    /**
     * Sets update_height
     *
     * @param float $update_height update_height
     *
     * @return self
     */
    public function setUpdateHeight($update_height)
    {
        $this->container['update_height'] = $update_height;

        return $this;
    }

    /**
     * Gets update_block
     *
     * @return string
     */
    public function getUpdateBlock()
    {
        return $this->container['update_block'];
    }

    /**
     * Sets update_block
     *
     * @param string $update_block update_block
     *
     * @return self
     */
    public function setUpdateBlock($update_block)
    {

        if ((mb_strlen($update_block) < 1)) {
            throw new \InvalidArgumentException('invalid length for $update_block when calling InlineResponse2004., must be bigger than or equal to 1.');
        }

        $this->container['update_block'] = $update_block;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {

        if ((mb_strlen($update_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $update_time when calling InlineResponse2004., must be bigger than or equal to 1.');
        }

        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets key_type
     *
     * @return \IdeaEngine\TzStats\Model\InlineResponse2004KeyType
     */
    public function getKeyType()
    {
        return $this->container['key_type'];
    }

    /**
     * Sets key_type
     *
     * @param \IdeaEngine\TzStats\Model\InlineResponse2004KeyType $key_type key_type
     *
     * @return self
     */
    public function setKeyType($key_type)
    {
        $this->container['key_type'] = $key_type;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return \IdeaEngine\TzStats\Model\InlineResponse2004ValueType
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param \IdeaEngine\TzStats\Model\InlineResponse2004ValueType $value_type value_type
     *
     * @return self
     */
    public function setValueType($value_type)
    {
        $this->container['value_type'] = $value_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


